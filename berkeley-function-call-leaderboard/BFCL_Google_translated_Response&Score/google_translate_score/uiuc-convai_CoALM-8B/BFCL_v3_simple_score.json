{"accuracy": 0.5875, "correct_count": 235, "total_count": 400}
{"id": "simple_5", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "\u627e\u5230\u7d66\u5b9a\u4fc2\u6578a = 3\uff0cb = -11\u548cc = -4\u7684\u4e8c\u6b21\u65b9\u7a0b\u7684\u6240\u6709\u6839\u3002"}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic(a=3, b=-11, c=-4)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_13", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "\u5f9ex = 1\u5230x = 3\u8a08\u7b97\u66f2\u7dda\u4e0b\u7684\u9762\u7a4dy = x^2\u3002"}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[calculate_area_under_curve(function=\"x^2\", interval=[1, 3])]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x^2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_30", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 10. Expected one of [300]."], "error_type": "value_error:others", "prompt": {"id": "simple_30", "question": [[{"role": "user", "content": "\u5f9e\u4f11\u606f\u958b\u59cb\u4e26\u4ee54 m/s^2\u52a0\u901f\u7684\u8eca\u8f1b\u7684\u6700\u7d42\u901f\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}]}, "model_result_raw": "[kinematics.final_velocity_from_distance(acceleration=4, distance=10)]", "model_result_decoded": [{"kinematics.final_velocity_from_distance": {"acceleration": 4, "distance": 10}}], "possible_answer": [{"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}]}
{"id": "simple_36", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'origin': 'New York'. Expected one of ['New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_36", "question": [[{"role": "user", "content": "\u627e\u5230\u7d10\u7d04\u5e02\u548c\u83ef\u76db\u9813\u7279\u5340\u4e4b\u9593\u7684\u6700\u77ed\u99d5\u99db\u8ddd\u96e2"}]], "function": [{"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "[get_shortest_driving_distance(origin=\"New York\", destination=\"Washington, D.C.\")]", "model_result_decoded": [{"get_shortest_driving_distance": {"origin": "New York", "destination": "Washington, D.C."}}], "possible_answer": [{"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}]}
{"id": "simple_38", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_38", "question": [[{"role": "user", "content": "\u8ddd\u96e2\u70ba0.05\u7684\u5169\u500b\u5e36\u96fb\u7269\u9ad4\u7684\u975c\u96fb\u96fb\u52e2\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}]}, "model_result_raw": "The query does not provide the required arguments for the function `calculate_electrostatic_potential`. Specifically, it lacks the `charge1` and `charge2` values.\n\nTo calculate the electrostatic potential, you need to provide the charges on both bodies and the distance between them.", "possible_answer": [{"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}]}
{"id": "simple_39", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'distance': 2. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"id": "simple_39", "question": [[{"role": "user", "content": "\u5728\u8ddd2\u7c73\u76842\u7c73\u8655\u7684\u9ede\u8655\u8a08\u7b97\u96fb\u5834\u3002"}]], "function": [{"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "dict", "properties": {"charge": {"type": "integer", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "integer", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "float", "description": "Permitivity of the space where field is being calculated, default is 8.854e-12."}}, "required": ["charge", "distance"]}}]}, "model_result_raw": "[calculate_electric_field(charge=2, distance=2)]", "model_result_decoded": [{"calculate_electric_field": {"charge": 2, "distance": 2}}], "possible_answer": [{"calculate_electric_field": {"charge": [2], "distance": [3], "permitivity": ["", 8.854e-12]}}]}
{"id": "simple_42", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'inductance': 5e-07. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": [[{"role": "user", "content": "\u8a08\u7b97LC\u96fb\u8def\u7684\u8ae7\u632f\u983b\u7387\u7d66\u5b9a100\u00b5F\u7684\u96fb\u5bb9\u548c50MH\u7684\u96fb\u611f\u3002"}]], "function": [{"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}]}, "model_result_raw": "[calculate_resonant_frequency(inductance=5e-07, capacitance=1e-05)]", "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 5e-07, "capacitance": 1e-05}}], "possible_answer": [{"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}]}
{"id": "simple_50", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': 'water'. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "\u5982\u679c\u57281\u500b\u58d3\u529b\u5927\u6c23\u4e0b\u5c07\u5176\u52a0\u71b1\u5230100\u00b0C\uff0c\u5247\u57280\u00b0C\u4e0b\uff0c\u6bcf\u958b\u723e\u6587\u7684\u71b5\u8b8a\u5316\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "[entropy_change.calculate(substance=\"water\", mass=1, initial_temperature=0, final_temperature=100)]", "model_result_decoded": [{"entropy_change.calculate": {"substance": "water", "mass": 1, "initial_temperature": 0, "final_temperature": 100}}], "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": "simple_55", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "\u627e\u5230\u6709\u95dc\u4eba\u985e\u7d30\u80de\u7d50\u69cb\u7684\u8a73\u7d30\u4fe1\u606f"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "[biology.get_cell_info(cell_type=\"human cell\", detailed=True)]", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_56", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_compartment': '\u8a66\u5fd1'. Expected one of ['plasma membrane']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_56", "question": [[{"role": "user", "content": "\u8cea\u819c\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u540d\u7a31\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "[cellbio.get_proteins(cell_compartment=\"\\u8a66\\u5fd1\")]", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": "\u8a66\u5fd1"}}], "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": ["", true, false]}}]}
{"id": "simple_58", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'molecule': 'ATP\u5408\u9176'. Expected one of ['ATP synthase']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "ATP\u5408\u9176\u5728\u7dda\u7c92\u9ad4\u4e2d\u7684\u529f\u80fd\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "[cell_biology.function_lookup(molecule=\"ATP\u5408\u9176\", organelle=\"\\u7f6e\\u8eab\\u5fd1\", specific_function=True)]", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": "ATP\u5408\u9176", "organelle": "\u7f6e\u8eab\u5fd1", "specific_function": true}}], "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_61", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'activity_level': 'moderately active'. Expected one of ['lightly active']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_61", "question": [[{"role": "user", "content": "\u9810\u6e2c\u9ad4\u91cd\u70ba150\u78c5\u548c\u8eab\u9ad85\u82f1\u5c3a10\u82f1\u5bf8\u7684\u4eba\u662f\u5426\u6703\u60a3\u67092\u578b\u7cd6\u5c3f\u75c5\u3002"}]], "function": [{"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}]}, "model_result_raw": "[diabetes_prediction(weight=150, height=70, activity_level=\"moderately active\")]", "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 70, "activity_level": "moderately active"}}], "possible_answer": [{"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}]}
{"id": "simple_65", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'population': 21300000000. Expected one of [213000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_65", "question": [[{"role": "user", "content": "\u5982\u679c\u4eba\u53e3\u70ba2.13\u5104\uff0c\u571f\u5730\u9762\u7a4d\u70ba850\u842c\u5e73\u65b9\u516c\u91cc\uff0c\u5247\u8a08\u7b972022\u5e74\u5df4\u897f\u7684\u4eba\u53e3\u5bc6\u5ea6\u3002"}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}]}, "model_result_raw": "[calculate_density(country=\"Brazil\", year=\"2022\", population=21300000000, land_area=85000000)]", "model_result_decoded": [{"calculate_density": {"country": "Brazil", "year": "2022", "population": 21300000000, "land_area": 85000000}}], "possible_answer": [{"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}]}
{"id": "simple_68", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u9ad4\u5fd1\u4e48\u6837\u884c'. Expected one of ['Yellowstone National Park']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_68", "question": [[{"role": "user", "content": "\u9810\u6e2c\u672a\u4f865\u5e74\u9ec3\u77f3\u570b\u5bb6\u516c\u5712\u7684\u68ee\u6797\u589e\u9577\uff0c\u5305\u62ec\u4eba\u985e\u5f71\u97ff\u3002"}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}]}, "model_result_raw": "[forest_growth_forecast(location=\"\\u9ad4\\u5fd1\\u4e48\\u6837\\u884c\", years=5, include_human_impact=True)]", "model_result_decoded": [{"forest_growth_forecast": {"location": "\u9ad4\u5fd1\u4e48\u6837\u884c", "years": 5, "include_human_impact": true}}], "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone National Park"], "years": [5], "include_human_impact": [true]}}]}
{"id": "simple_69", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_69", "question": [[{"role": "user", "content": "\u767c\u73fe2020\u5e74\u5728\u5bc6\u897f\u897f\u6bd4\u6cb3\u4e2d\u627e\u51fa\u70cf\u9f9c\u7684\u7a2e\u7fa4\u548c\u7269\u7a2e\u3002"}]], "function": [{"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "[ecology.get_turtle_population(location=\"Mississippi River\", year=2020)]", "model_result_decoded": [{"ecology.get_turtle_population": {"location": "Mississippi River", "year": 2020}}], "possible_answer": [{"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}]}
{"id": "simple_72", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'trait_contributions'. Expected outer type array with inner type <class 'float'>. Parameter value: [40, 60]."], "error_type": "type_error:nested", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "\u8a08\u7b97\u4e00\u500b\u751f\u7269\u7684\u9810\u671f\u9032\u5316\u9069\u61c9\u6027\uff0c\u5982\u679c\u7279\u5fb5a\u7684\u503c\u70ba0.8\uff0c\u4e26\u4e14\u7279\u8ceaB\u503c\u70ba0.7\uff0c\u5247\u7279\u5fb5a\u4f54\u5065\u8eab\u548c\u7279\u5fb5B\u768440\uff05\u8ca2\u737b60\uff05\u3002"}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "[calculate_fitness(trait_values=[0.8, 0.7], trait_contributions=[40, 60])]", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.8, 0.7], "trait_contributions": [40, 60]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "simple_74", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duplication_frequency': 6. Expected one of [1]."], "error_type": "value_error:others", "prompt": {"id": "simple_74", "question": [[{"role": "user", "content": "\u8a08\u7b97\u7d30\u83cc\u7a2e\u7fa4\u7684\u6f14\u5316\u901f\u7387\uff0c\u5f9e5000\u500b\u7d30\u83cc\u958b\u59cb\uff0c\u6bcf\u7a2e\u7d30\u83cc\u6bcf\u5c0f\u6642\u5fa9\u52366\u5c0f\u6642\u3002"}]], "function": [{"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}]}, "model_result_raw": "[calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=6, duration=1)]", "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 6, "duration": 1}}], "possible_answer": [{"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}]}
{"id": "simple_80", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_80", "question": [[{"role": "user", "content": "\u6211\u60f3\u5728\u6211\u7684\u4f4d\u7f6e\u9644\u8fd1\u627e\u52305\u5bb6\u9910\u5ef3\uff0c\u66fc\u54c8\u9813\uff0c\u63d0\u4f9b\u6cf0\u570b\u7f8e\u98df\u548c\u7d20\u98df\u83dc\u55ae\u3002"}]], "function": [{"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}]}, "model_result_raw": "[find_restaurants(location=\"Manhattan\", food_type=\"Thai cuisine\", number=5), find_restaurants(location=\"Manhattan\", food_type=\"vegetarian\", number=5)]", "model_result_decoded": [{"find_restaurants": {"location": "Manhattan", "food_type": "Thai cuisine", "number": 5}}, {"find_restaurants": {"location": "Manhattan", "food_type": "vegetarian", "number": 5}}], "possible_answer": [{"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York", "Manhattan, NY", "Manhattan, NYC"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}]}
{"id": "simple_83", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'coord1': [33.4484, 112.074]. Expected one of [[33.4484, -112.074]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_83", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5169\u500bGPS\u5750\u6a19\uff0833.4484 N\uff0c112.0740 W\uff09\u548c\uff0834.0522 N\uff0c118.2437 W\uff09\u7684\u8ddd\u96e2\u3002"}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}]}, "model_result_raw": "[calculate_distance(coord1=(33.4484, 112.074), coord2=(34.0522, 118.2437), unit=\"kilometers\")]", "model_result_decoded": [{"calculate_distance": {"coord1": [33.4484, 112.074], "coord2": [34.0522, 118.2437], "unit": "kilometers"}}], "possible_answer": [{"calculate_distance": {"coord1": [[33.4484, -112.074]], "coord2": [[34.0522, -118.2437]], "unit": ["miles"]}}]}
{"id": "simple_85", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_85", "question": [[{"role": "user", "content": "\u6ce2\u58eb\u9813\uff0c\u99ac\u85a9\u8af8\u585e\u5dde\u548c\u83ef\u76db\u9813\u7279\u5340\u4e4b\u9593\u7684\u5927\u7d04\u8ddd\u96e2\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation. Specify the location in the format of City, State."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation. Specify the location in the format of City, State."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[geo_distance.calculate(start_location=\"Boston, Massachusetts\", end_location=\"Washington, D.C.\"), geo_distance.calculate(start_location=\"Boston, Massachusetts\", end_location=\"Washington, D.C.\", units=\"kilometers\")]", "model_result_decoded": [{"geo_distance.calculate": {"start_location": "Boston, Massachusetts", "end_location": "Washington, D.C."}}, {"geo_distance.calculate": {"start_location": "Boston, Massachusetts", "end_location": "Washington, D.C.", "units": "kilometers"}}], "possible_answer": [{"geo_distance.calculate": {"start_location": ["Boston, MA"], "end_location": ["Washington, D.C."], "units": ["miles", ""]}}]}
{"id": "simple_86", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'transportation' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_86", "question": [[{"role": "user", "content": "\u901a\u904e\u706b\u8eca\u627e\u5230\u5169\u500b\u57ce\u5e02\uff0c\u7d10\u7d04\u548c\u6d1b\u6749\u78ef\u7684\u5169\u500b\u57ce\u5e02\u4e4b\u9593\u7684\u6700\u77ed\u8ddd\u96e2\uff0c\u60a8\u53ef\u4ee5\u8f49\u6703\u3002"}]], "function": [{"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "dict", "properties": {"start_city": {"type": "string", "description": "The city you are starting from. The parameter is in the format of city name."}, "end_city": {"type": "string", "description": "The city you are heading to.The parameter is in the format of city name."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true. Default is false."}}, "required": ["start_city", "end_city"]}}]}, "model_result_raw": "[city_distance.find_shortest(start_city=\"New York\", end_city=\"Los Angeles\", allow_transfer=True)]", "model_result_decoded": [{"city_distance.find_shortest": {"start_city": "New York", "end_city": "Los Angeles", "allow_transfer": true}}], "possible_answer": [{"city_distance.find_shortest": {"start_city": ["New York"], "end_city": ["Los Angeles"], "transportation": ["train"], "allow_transfer": [true]}}]}
{"id": "simple_87", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "\u6309\u5347\u5e8f\u5c0d\u5217\u8868[5\uff0c3\uff0c4\uff0c1\uff0c2]\u9032\u884c\u6392\u5e8f\u3002"}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order=\"ascending\")]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table_name': 'student'. Expected one of ['students']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "\u5f9eStudentDB\u4e2d\u7372\u53d6\u6240\u6709\u5728\u201c\u85cd\u9ce5\u9ad8\u4e2d\u201d\u4e2d\u5b78\u7fd2\u79d1\u5b78\u7684\u5b78\u751f\u7684\u8a18\u9304\u3002"}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "[db_fetch_records(database_name=\"StudentDB\", table_name=\"student\", conditions={\"school\": \"\\u9a96\\u5c3e\\u884c\\u5fd1\"})]", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "student", "conditions": {"school": "\u9a96\u5c3e\u884c\u5fd1"}}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_90", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'employee_id': 12345. Expected one of [345]."], "error_type": "value_error:others", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "\u6aa2\u7d22\u7279\u5b9a\u54e1\u5de5\u7684\u500b\u4eba\u4fe1\u606f\u548c\u5de5\u4f5c\u6b77\u53f2\u6578\u64da\uff0c\u8a72\u6578\u64da\u7684\u8eab\u4efd\u8b49\u70ba345\u516c\u53f8\u201c ABC Ltd.\u201d\u3002"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "[employee.fetch_data(company_name=\"ABC Ltd.\", employee_id=12345, data_field=[\"Personal Info\", \"Job History\"])]", "model_result_decoded": [{"employee.fetch_data": {"company_name": "ABC Ltd.", "employee_id": 12345, "data_field": ["Personal Info", "Job History"]}}], "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": "simple_91", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'open on Sunday'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "\u5728\u5468\u65e5\u958b\u653e\u7684\u6ce2\u58eb\u9813\uff0c\u7372\u5f97\u6700\u9ad8\u8a55\u50f9\u7684\u58fd\u53f8\u9910\u5ef3\u3002"}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"open on Sunday\")]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "open on Sunday"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_96", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': 'users'. Expected one of ['user']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "\u5728\u7528\u6236\u8868\u4e2d\u7684\u6578\u64da\u5eab\u4e2d\u67e5\u627e\u5e74\u9f61\u5927\u65bc25\u6b72\u7684\u8a18\u9304\uff0c\u800c\u4f5c\u696d\u70ba\u201c\u5de5\u7a0b\u5e2b\u201d\u3002"}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "[database.query(table=\"users\", conditions=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"occupation\", \"operation\": \"=\", \"value\": \"engineer\"}])]", "model_result_decoded": [{"database.query": {"table": "users", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "occupation", "operation": "=", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_99", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 2.0. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "\u5c07\u6b63\u5f26\u6ce2\u5f9e0\u52302 pi\u7e6a\u88fd\u70ba5 Hz\u7684\u983b\u7387\u3002"}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "[plot_sine_wave(start_range=0.0, end_range=2.0, frequency=5)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0.0, "end_range": 2.0, "frequency": 5}}], "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": "simple_101", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'to_unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_101", "question": [[{"role": "user", "content": "\u5982\u679c\u7269\u9ad4\u572820\u79d2\u5167\u50b3\u64ad450\u7c73\uff0c\u5247\u8a08\u7b97\u7269\u9ad4\u7684\u901f\u5ea6\u3002"}]], "function": [{"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}]}, "model_result_raw": "[calculate_speed(distance=450, time=20)]", "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20}}], "possible_answer": [{"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}]}
{"id": "simple_103", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "\u8a08\u7b97\u66f2\u7dda\u4e0b\u7684\u9762\u7a4dy = 3x^2 + 2x -4\uff0c\u5728x = -1\u548cx = 2\u4e4b\u9593\u3002"}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_105", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base': 4. Expected one of [3]."], "error_type": "value_error:others", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "\u8a08\u7b97\u529f\u73874\u76843\u500b\u529f\u7387\u3002"}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "[math.power(base=4, exponent=3)]", "model_result_decoded": [{"math.power": {"base": 4, "exponent": 3}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_108", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'target': 'publice_amount'. Expected one of ['Purchase_Amount']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_108", "question": [[{"role": "user", "content": "\u904b\u884c\u5177\u6709\u9810\u6e2c\u8b8a\u91cf\u201c\u5e74\u9f61\u201d\uff0c\u201c\u6536\u5165\u201d\u548c\u201c\u6559\u80b2\u201d\u7684\u7dda\u6027\u56de\u6b78\u6a21\u578b\uff0c\u4ee5\u53ca\u76ee\u6a19\u8b8a\u91cf'publice_amount'\u3002\u9084\u63a1\u7528\u6a19\u6e96\u5316\u3002"}]], "function": [{"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}]}, "model_result_raw": "[run_linear_regression(predictors=[\"age\", \"income\", \"education\"], target=\"publice_amount\", standardize=True)]", "model_result_decoded": [{"run_linear_regression": {"predictors": ["age", "income", "education"], "target": "publice_amount", "standardize": true}}], "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "simple_109", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_109", "question": [[{"role": "user", "content": "\u5728\u63d0\u4f9b\u7684\u6578\u64damy_data\u4e0a\u751f\u6210\u4e00\u500b\u96a8\u6a5f\u68ee\u6797\u6a21\u578b\uff0c\u5176\u6df1\u5ea6\u70ba5\u3002"}]], "function": [{"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "any", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}]}, "model_result_raw": "The query does not provide the required argument `n_estimators` (the number of trees in the forest) for the function `random_forest.train`.\n\nTherefore, the query lacks the necessary information to call the function.", "possible_answer": [{"random_forest.train": {"n_estimators": [100], "max_depth": [5], "data": ["my_data"]}}]}
{"id": "simple_112", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_112", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5f9e\u724c\u7532\u677f\u4e0a\u7e6a\u88fd\u570b\u738b\u7684\u6982\u7387\u3002"}]], "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}]}, "model_result_raw": "The given function \"calculate_probability\" can calculate the probability of drawing a king from a deck of cards, but it lacks the required \"total_outcomes\" and \"favorable_outcomes\" parameters. Please provide the total number of cards in the deck and the number of kings in the deck.", "possible_answer": [{"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}]}
{"id": "simple_119", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sample2': [23, 45, 44, 44, 14, 38]. Expected one of [[23, 45, 44, 14, 38]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_119", "question": [[{"role": "user", "content": "\u5c0d\u5169\u500b\u7368\u7acb\u6a23\u672c\u9032\u884c\u6a23\u672c1\u7684\u7368\u7acb\u6a23\u672c\u9032\u884c\u5047\u8a2d\u6aa2\u9a57\uff1a[22,33,42,12,34]\u548c\u6837\u672c2\uff1a[23,45,44,44,14,38]\u7684\u986f\u8457\u6027\u6c34\u5e73\u70ba0.05\u3002"}]], "function": [{"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "dict", "properties": {"sample1": {"type": "array", "items": {"type": "integer"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "integer"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "float", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}]}, "model_result_raw": "[hypothesis_testing.ttest_ind(sample1=[22, 33, 42, 12, 34], sample2=[23, 45, 44, 44, 14, 38], significance_level=0.05)]", "model_result_decoded": [{"hypothesis_testing.ttest_ind": {"sample1": [22, 33, 42, 12, 34], "sample2": [23, 45, 44, 44, 14, 38], "significance_level": 0.05}}], "possible_answer": [{"hypothesis_testing.ttest_ind": {"sample1": [[22, 33, 42, 12, 34]], "sample2": [[23, 45, 44, 14, 38]], "significance_level": [0.05]}}]}
{"id": "simple_126", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dataset_path': 'C:\\\\data\\\\cars.csv'. Expected one of ['C:/data/cars.csv']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "\u4f7f\u7528\u767c\u52d5\u6a5f\u5c3a\u5bf8\u548c\u71c3\u6cb9\u7d93\u6fdf\u6027\u8b8a\u91cf\u7684\u6a21\u578b\u7684\u78ba\u5b9a\u4fc2\u6578\uff08R\u5e73\u65b9\uff09\u662f\u4ec0\u9ebc\uff0c\u53ef\u4ee5\u901a\u904ePATH C\uff1a/data/cars.csv\u4e2d\u7684\u6578\u64da\u96c6\u9810\u6e2cCAR_PRICE\uff1f"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "[linear_regression.get_r_squared(dataset_path=\"C:\\\\data\\\\cars.csv\", independent_variables=[\"engine_size\", \"fuel_economy\"], dependent_variable=\"CAR_PRICE\")]", "model_result_decoded": [{"linear_regression.get_r_squared": {"dataset_path": "C:\\data\\cars.csv", "independent_variables": ["engine_size", "fuel_economy"], "dependent_variable": "CAR_PRICE"}}], "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_128", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 5000000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "\u4e00\u5bb6\u516c\u53f8\u7684\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u662f\u4ec0\u9ebc\uff0c\u67091\u5104\u80a1\u6d41\u901a\u80a1\uff0c\u7e3d\u80a1\u606f\u652f\u51fa\u70ba5000\u842c\u7f8e\u5143\uff1f"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=5000000, outstanding_shares=10000000000)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 5000000, "outstanding_shares": 10000000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": "simple_139", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_139", "question": [[{"role": "user", "content": "\u9451\u65bc\u5b83\u7684\u5e74\u6536\u76ca\u7387\u70ba5\uff05\uff0c\u6295\u8cc7\u984d\u70ba2000\u7f8e\u5143\u548c3\u5e74\u7684\u6642\u9593\u6bb5\uff0c\u5171\u540c\u57fa\u91d1\u7684\u4f30\u8a08\u56de\u5831\u7387\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}]}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=0.05, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 0.05, "investment_amount": 2000, "years": 3}}], "possible_answer": [{"estimate_mutual_fund_return": {"yearly_yield": [5.0], "investment_amount": [2000], "years": [3]}}]}
{"id": "simple_141", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_141", "question": [[{"role": "user", "content": "\u7372\u5f97\u7576\u524d\u7684\u6bcf\u76ce\u53f8\u91d1\u50f9\u3002"}]], "function": [{"name": "get_metal_price", "description": "Retrieve the current price for a specified metal and measure.", "parameters": {"type": "dict", "properties": {"metal": {"type": "string", "description": "The metal whose price needs to be fetched."}, "measure": {"type": "string", "description": "The measure unit for price, like 'ounce' or 'kg'."}}, "required": ["metal", "measure"]}}]}, "model_result_raw": "The function \"get_metal_price\" can retrieve the current price for gold, but it lacks the required \"measure\" parameter. Please provide the measure unit for the gold price, such as \"ounce\" or \"kg\".", "possible_answer": [{"get_metal_price": {"metal": ["Gold", "gold"], "measure": ["ounce"]}}]}
{"id": "simple_142", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': '\u4e16\u754c'. Expected one of ['Amazon', 'AMZN']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_142", "question": [[{"role": "user", "content": "\u57282022\u5e743\u670811\u65e5\u6536\u76e4\u4e0a\u67e5\u627e\u4e9e\u99ac\u905c\u516c\u53f8\u7684\u7d0d\u65af\u9054\u514b\u80a1\u50f9\u3002"}]], "function": [{"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}]}, "model_result_raw": "[get_stock_price(company_name=\"\\u4e16\\u754c\", date=\"2022-03-11\", exchange=\"NASDAQ\")]", "model_result_decoded": [{"get_stock_price": {"company_name": "\u4e16\u754c", "date": "2022-03-11", "exchange": "NASDAQ"}}], "possible_answer": [{"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}]}
{"id": "simple_143", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'days': 1. Expected one of [5]."], "error_type": "value_error:others", "prompt": {"id": "simple_143", "question": [[{"role": "user", "content": "\u201c\u5728\u7d0d\u65af\u9054\u514b\u7372\u5f97\u860b\u679c\u7684\u80a1\u50f9\u3002\u201d"}]], "function": [{"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}]}, "model_result_raw": "[get_stock_price(company=\"AAPL\", days=1, exchange=\"NASDAQ\")]", "model_result_decoded": [{"get_stock_price": {"company": "AAPL", "days": 1, "exchange": "NASDAQ"}}], "possible_answer": [{"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}]}
{"id": "simple_150", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 0.013. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": [[{"role": "user", "content": "\u8a08\u7b97\u9280\u884c\u5132\u84c4\u5e33\u6236\u7684\u6295\u8cc7\u56de\u5831\u7387\uff0c\u62bc\u91d1\u70ba1000\u7f8e\u5143\uff0c\u5e74\u5229\u7387\u70ba1\u5e743\uff05\u3002"}]], "function": [{"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}]}, "model_result_raw": "[calculate_roi(deposit=1000, annual_interest_rate=0.013, years=1)]", "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 0.013, "years": 1}}], "possible_answer": [{"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}]}
{"id": "simple_151", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "\u627e\u52302020\u5e74\u7f8e\u570b\u7e3d\u7968\u623f\u6700\u9ad8\u7684\u9280\u884c\u3002"}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "[highest_grossing_banks(country=\"USA\", year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "USA", "year": 2020}}], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": "simple_156", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_156", "question": [[{"role": "user", "content": "\u67e5\u627e\u8056\u5730\u4e9e\u54e5\u7e23\u6848\u4ef6\u7de8\u865fCA123456\u7684\u91cd\u7f6a\u72af\u7f6a\u8a18\u9304\u7684\u8a73\u7d30\u4fe1\u606f"}]], "function": [{"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}]}, "model_result_raw": "[crime_record.get_record(case_number=\"CA123456\", county=\"San Diego\")]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "simple_157", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'birth_date': '01-01-1970'. Expected one of ['01-01-1980']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_157", "question": [[{"role": "user", "content": "\u627e\u51fa\u4e00\u500b\u751f\u65e5\u7684\u7d04\u7ff0\u00b7\u591a\u4f0a\uff08John Doe\uff09\u662f\u5426\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6709\u4efb\u4f55\u91cd\u7f6a\u5b9a\u7f6a\u3002"}]], "function": [{"name": "criminal_history.check_felonies", "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.", "parameters": {"type": "dict", "properties": {"full_name": {"type": "string", "description": "The full name of the individual."}, "birth_date": {"type": "string", "description": "The birth date of the individual. Must be in MM-DD-YYYY format."}, "state": {"type": "string", "description": "The state to search the criminal record in. Default to 'None', which the function will search across all states."}}, "required": ["full_name", "birth_date"]}}]}, "model_result_raw": "[criminal_history.check_felonies(full_name=\"John Doe\", birth_date=\"01-01-1970\", state=\"California\")]", "model_result_decoded": [{"criminal_history.check_felonies": {"full_name": "John Doe", "birth_date": "01-01-1970", "state": "California"}}], "possible_answer": [{"criminal_history.check_felonies": {"full_name": ["John Doe"], "birth_date": ["01-01-1980"], "state": ["California", "CA"]}}]}
{"id": "simple_158", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'X'. Expected one of ['Mr. X']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "\u57282012\u5e74\u81f32015\u5e74\u9593\uff0c\u5728\u7d10\u7d04X\u5148\u751f\u5728\u7d10\u7d04\u627e\u5230\u5211\u4e8b\u6848\u4ef6\u7684\u4fe1\u606f\u3002"}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "[get_criminal_records(name=\"X\", location=\"New York, NY\", from_year=2012, to_year=2015)]", "model_result_decoded": [{"get_criminal_records": {"name": "X", "location": "New York, NY", "from_year": 2012, "to_year": 2015}}], "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": "simple_159", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_159", "question": [[{"role": "user", "content": "\u7d66\u62112013\u5e74\u7684\u5211\u6cd5\u4fee\u6b63\u6848\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}]}, "model_result_raw": "[get_act_details(act_name=\"\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u5e38\\u", "possible_answer": [{"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}]}
{"id": "simple_161", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail_level' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_161", "question": [[{"role": "user", "content": "\u8a73\u7d30\u4e86\u89e3\u52a0\u5229\u798f\u5c3c\u4e9e\u76dc\u7aca\u7f6a\u7684\u53ef\u80fd\u61f2\u7f70\u3002"}]], "function": [{"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}]}, "model_result_raw": "[crime_statute_lookup(jurisdiction=\"California\", crime=\"theft\")]", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "California", "crime": "theft"}}], "possible_answer": [{"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}]}
{"id": "simple_162", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'contract_type': 'rental'. Expected one of ['Rental Agreement', 'rental agreement']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u751f\u7522\u7d04\u7ff0\u548c\u611b\u9e97\u7d72\u4e4b\u9593\u7684\u79df\u8cc3\u5354\u8b70\u4e4b\u9593\u7684\u5b9a\u5236\u6cd5\u5f8b\u5408\u540c\u3002"}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": "[generate_law_contract(parties=[\"John\", \"Alice\"], contract_type=\"rental\", location=\"California\")]", "model_result_decoded": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "rental", "location": "California"}}], "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": "simple_163", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'address': 'Main Street 123'. Expected one of ['123 main street']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "\u70ba\u6211\u63d0\u4f9b\u4f4d\u65bcMain Street 123\u865f\u623f\u5c4b\u7684\u8ca1\u7522\u8a18\u9304\uff0c\u5728\u8056\u514b\u62c9\u62c9\u7e23\u7684\u5305\u88f9\u7de8\u865f\u70ba1234567890\u3002\u5728\u97ff\u61c9\u4e2d\u5305\u62ec\u6240\u6709\u8005\u4fe1\u606f\u3002"}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": "[property_records.get(address=\"Main Street 123\", parcel_number=\"1234567890\", county=\"Santa Clara\", include_owner=True)]", "model_result_decoded": [{"property_records.get": {"address": "Main Street 123", "parcel_number": "1234567890", "county": "Santa Clara", "include_owner": true}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": "simple_165", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'crime_type': '\u8a0e\u5b57'. Expected one of ['theft']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "\u5f9e2020\u5e74\u958b\u59cb\u95dc\u65bc\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef\u76dc\u7aca\u72af\u7f6a\u7684\u6848\u4ef6"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "[civil_cases.retrieve(year=2020, crime_type=\"\\u8a0e\\u5b57\", location=\"\\u4e0a\\u65c5\\u884c\")]", "model_result_decoded": [{"civil_cases.retrieve": {"year": 2020, "crime_type": "\u8a0e\u5b57", "location": "\u4e0a\u65c5\u884c"}}], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_166", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fee': 399. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u627e\u5230\u4e00\u540d\u5c08\u9580\u7814\u7a76\u96e2\u5a5a\u6848\u4ef6\u7684\u5f8b\u5e2b\uff0c\u6bcf\u5c0f\u6642\u8cbb\u7528\u4e0d\u5230400\u7f8e\u5143\u3002"}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city=\"Chicago, IL\", specialty=[\"Divorce\"], fee=399)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 399}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_167", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_title': 'Roev\u3002Wade'. Expected one of ['Roe v. Wade']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_167", "question": [[{"role": "user", "content": "\u6aa2\u7d22\u6700\u9ad8\u6cd5\u9662\u6848\u4ef6\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u6a19\u984c\u70ba\u201c Roev\u3002Wade\u201d\u3002\u5305\u62ec\u7570\u8b70\u4fe1\u606f\u3002"}]], "function": [{"name": "law.civil.get_case_details", "description": "Retrieve the details of a Supreme Court case given its title.", "parameters": {"type": "dict", "properties": {"case_title": {"type": "string", "description": "Title of the Supreme Court case."}, "include_dissent": {"type": "boolean", "description": "If true, the output will include details of the dissenting opinion."}}, "required": ["case_title", "include_dissent"]}}]}, "model_result_raw": "[law.civil.get_case_details(case_title=\"Roev\u3002Wade\", include_dissent=True)]", "model_result_decoded": [{"law.civil.get_case_details": {"case_title": "Roev\u3002Wade", "include_dissent": true}}], "possible_answer": [{"law.civil.get_case_details": {"case_title": ["Roe v. Wade"], "include_dissent": [true]}}]}
{"id": "simple_171", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_171", "question": [[{"role": "user", "content": "2018\u5e74\uff0c\u5728\u7d10\u7d04\u6cd5\u9662\u7372\u53d6\u5f8b\u5e2b\u6848\u4ef6\u7684\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "fetch_law_case_details", "description": "Fetch details of a specific law case based on case number, year and court.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "integer", "description": "The specific number of the law case."}, "court": {"type": "string", "description": "The city name where the court takes place"}, "year": {"type": "integer", "description": "The year in which the law case took place."}}, "required": ["case_number", "court", "year"]}}]}, "model_result_raw": "The query does not provide the required arguments for the function `fetch_law_case_details`. Specifically, it lacks the `case_number` which is required to fetch the details of the law case.\n\nPlease provide the case number for the law case in New York in 2018.", "possible_answer": [{"fetch_law_case_details": {"case_number": [43403], "court": ["New York"], "year": [2018]}}]}
{"id": "simple_174", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'field_of_law': '\u4e16\u754c'. Expected one of ['constitutional law', 'constitutional']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_174", "question": [[{"role": "user", "content": "\u8b93\u6211\u6210\u70ba\u4e2d\u570b\u61b2\u6cd5\u4e2d\u5341\u5927\u7684\u91cc\u7a0b\u7891\u5f0f\u6848\u4ef6\u3002"}]], "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}]}, "model_result_raw": "[get_top_cases(field_of_law=\"\\u4e16\\u754c\", top_number=10)]", "model_result_decoded": [{"get_top_cases": {"field_of_law": "\u4e16\u754c", "top_number": 10}}], "possible_answer": [{"get_top_cases": {"field_of_law": ["constitutional law", "constitutional"], "top_number": [10], "country": ["China", "CN"]}}]}
{"id": "simple_176", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'company_name': '\u8a66\u754c\u4e0a\u597d\u5fd1'. Expected one of ['Apple Inc.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_176", "question": [[{"role": "user", "content": "\u67e5\u627e\u6d89\u53ca\u201c\u860b\u679c\u516c\u53f8\u201d\u7684\u5c08\u5229\u8a34\u8a1f\u7684\u8a73\u7d30\u4fe1\u606f\u3002\u5f9e2010\u5e74\u958b\u59cb\u3002"}]], "function": [{"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "[lawsuit_details.find(company_name=\"\\u8a66\\u754c\\u4e0a\\u597d\\u5fd1\", year=2010, case_type=\"Patent\")]", "model_result_decoded": [{"lawsuit_details.find": {"company_name": "\u8a66\u754c\u4e0a\u597d\u5fd1", "year": 2010, "case_type": "Patent"}}], "possible_answer": [{"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}]}
{"id": "simple_181", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'with_verdict' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_181", "question": [[{"role": "user", "content": "\u7372\u53d6\u6848\u4ef6\u7de8\u865f\u70ba\u201c 123456-ABC\u201d\u7684\u8a34\u8a1f\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u4e26\u5728\u6d1b\u6749\u78ef\u6cd5\u9662\u63d0\u8d77\u8a34\u8a1f"}]], "function": [{"name": "get_lawsuit_details", "description": "Retrieve details of a lawsuit based on its case number and court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "Case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the lawsuit was filed."}, "with_verdict": {"type": "boolean", "description": "Flag to include verdict details if available. Default is False"}}, "required": ["case_number", "court_location"]}}]}, "model_result_raw": "[get_lawsuit_details(case_number=\"123456-ABC\", court_location=\"Los Angeles\")]", "model_result_decoded": [{"get_lawsuit_details": {"case_number": "123456-ABC", "court_location": "Los Angeles"}}], "possible_answer": [{"get_lawsuit_details": {"case_number": ["123456-ABC"], "court_location": ["Los Angeles"], "with_verdict": [true]}}]}
{"id": "simple_186", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': '\u6771\u4eac\u65c5\u884c'. Expected one of ['Tokyo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_186", "question": [[{"role": "user", "content": "\u65e5\u672c\u6771\u4eac\u7684\u651d\u6c0f\u548c\u6fd5\u5ea6\u6c34\u5e73\u7684\u6eab\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "current_weather_condition", "description": "Get the current weather conditions of a specific city including temperature and humidity.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city that you want to get the current weather conditions for."}, "country": {"type": "string", "description": "The country of the city you specified."}, "measurement": {"type": "string", "description": "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'."}}, "required": ["city", "country"]}}]}, "model_result_raw": "[current_weather_condition(city=\"\\u6771\\u4eac\\u65c5\\u884c\", country=\"JP\")]", "model_result_decoded": [{"current_weather_condition": {"city": "\u6771\u4eac\u65c5\u884c", "country": "JP"}}], "possible_answer": [{"current_weather_condition": {"city": ["Tokyo"], "country": ["Japan"], "measurement": ["c", ""]}}]}
{"id": "simple_187", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4e0a\u597d\u5b57\u884c'. Expected one of ['Seattle', 'Seattle, Washington']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_187", "question": [[{"role": "user", "content": "\u83ef\u76db\u9813\u897f\u96c5\u5716\u7684\u7576\u524d\u6eab\u5ea6\u548c\u6fd5\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}]}, "model_result_raw": "[get_current_weather(location=\"\\u4e0a\\u597d\\u5b57\\u884c\")]", "model_result_decoded": [{"get_current_weather": {"location": "\u4e0a\u597d\u5b57\u884c"}}], "possible_answer": [{"get_current_weather": {"location": ["Seattle", "Seattle, Washington"], "include_temperature": [true, ""], "include_humidity": [true, ""]}}]}
{"id": "simple_190", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'park_name': '\u9a66\u5fd1\u4e48\u6837\u884c'. Expected one of ['Yellowstone', 'Yellowstone National Park']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_190", "question": [[{"role": "user", "content": "\u9ec3\u77f3\u570b\u5bb6\u516c\u5712\u7684\u6d77\u62d4\u548c\u5730\u5340\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "[park_information(park_name=\"\\u9a66\\u5fd1\\u4e48\\u6837\\u884c\", information=[\"Elevation\", \"Area\"])]", "model_result_decoded": [{"park_information": {"park_name": "\u9a66\u5fd1\u4e48\u6837\u884c", "information": ["Elevation", "Area"]}}], "possible_answer": [{"park_information": {"park_name": ["Yellowstone", "Yellowstone National Park"], "information": [["Elevation", "Area"], ["Area", "Elevation"]]}}]}
{"id": "simple_196", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4e0a\u597d'. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "\u502b\u65662022/08/16\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[air_quality(location=\"\\u4e0a\\u597d\", date=\"2022-08-16\")]", "model_result_decoded": [{"air_quality": {"location": "\u4e0a\u597d", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_197", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u597d\u4e16\u754c'. Expected one of ['San Diego']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": [[{"role": "user", "content": "\u5728\u4e0b\u534812\u9ede\u5728\u8056\u5730\u4e9e\u54e5\u627e\u5230\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002"}]], "function": [{"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}]}, "model_result_raw": "[get_air_quality_index(location=\"\\u597d\\u4e16\\u754c\", time=\"12:00\")]", "model_result_decoded": [{"get_air_quality_index": {"location": "\u597d\u4e16\u754c", "time": "12:00"}}], "possible_answer": [{"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}]}
{"id": "simple_199", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u597d\u597e\u4e0a'. Expected one of ['San Jose', \"'San Jose'\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_199", "question": [[{"role": "user", "content": "\u5728\u63a5\u4e0b\u4f86\u7684\u4e09\u5929\u4e2d\u627e\u5230\u8056\u4f55\u585e\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002"}]], "function": [{"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}]}, "model_result_raw": "[environmental_data.air_quality_index(location=\"\\u597d\\u597e\\u4e0a\", days=3)]", "model_result_decoded": [{"environmental_data.air_quality_index": {"location": "\u597d\u597e\u4e0a", "days": 3}}], "possible_answer": [{"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}]}
{"id": "simple_200", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": [[{"role": "user", "content": "\u6bcf\u5e74\u6bcf\u5e74\u884c\u99db12,000\u82f1\u91cc\u7684\u6c7d\u6cb9\u6c7d\u8eca\u6bcf\u5e74\u751f\u7522\u591a\u5c11\u4e8c\u6c27\u5316\u78b3\uff0c\u71c3\u6cb9\u6548\u7387\u70ba25 mpg\uff1f"}]], "function": [{"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}]}, "model_result_raw": "[calculate_emissions(distance=12000, fuel_type=\"gasoline\", fuel_efficiency=25.0)]", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25.0}}], "possible_answer": [{"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}]}
{"id": "simple_201", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_201", "question": [[{"role": "user", "content": "\u4f30\u8a08\u4e2d\u570b\u91ce\u5916\u5927\u718a\u8c93\u7684\u7a2e\u7fa4\u3002"}]], "function": [{"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}]}, "model_result_raw": "The query does not provide sufficient information to call the function `estimate_population`. Specifically, it lacks the required arguments `species` and `country`.\n\nThe query mentions \"\u4e2d\u570b\u91ce\u5916\u5927\u718a\u8c93\", which is a species, but it does not specify the country where the species lives. Therefore, the query is missing the required `country` argument.\n\nPlease provide the country where the giant panda lives.", "possible_answer": [{"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}]}
{"id": "simple_203", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u829d\u52a0\u54e5'. Expected one of ['Chicago']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_203", "question": [[{"role": "user", "content": "\u60a8\u80fd\u627e\u5230\u6709\u95dc\u829d\u52a0\u54e5\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u548c\u6c61\u67d3\u6578\u64da\u7684\u6700\u65b0\u4fe1\u606f\u55ce\uff1f"}]], "function": [{"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "[get_air_quality(location=\"\u829d\u52a0\u54e5\")]", "model_result_decoded": [{"get_air_quality": {"location": "\u829d\u52a0\u54e5"}}], "possible_answer": [{"get_air_quality": {"location": ["Chicago"], "detail": [true]}}]}
{"id": "simple_207", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': 'New York'. Expected one of ['New York, USA', 'New York City', 'New York City, NY', 'NYC', 'NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_207", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\uff0c\u7f8e\u570b\u548c\u7f8e\u570b\u9081\u963f\u5bc6\u4e4b\u9593\u53d6\u5f97\u6700\u77ed\u7684\u884c\u99db\u8ddd\u96e2\u3002"}]], "function": [{"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": "[calculate_shortest_distance(start_location=\"New York\", end_location=\"Miami\", route_preference=\"Shortest\")]", "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York", "end_location": "Miami", "route_preference": "Shortest"}}], "possible_answer": [{"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}]}
{"id": "simple_211", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_211", "question": [[{"role": "user", "content": "\u901a\u904ejohn.doe@example.com\u5c07\u96fb\u5b50\u90f5\u4ef6\u767c\u9001\u7d66\u7d04\u7ff0\u00b7\u675c\uff08John Doe\uff09\uff0c\u4e3b\u984c\u201c\u6703\u8b70\u201d\u548c\u201c\u8eab\u9ad4\u201d\u548c\u201c\u660e\u5929\u4e0a\u534810\u9ede\u201d\u3002"}]], "function": [{"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}]}, "model_result_raw": "[send_email(to=\"john.doe@example.com\", subject=\"\\u597d\\u5b57\", body=\"\\u4e16\\u754c\\u6837\\u5fd1\\u6700\\u8fd1\\u597d\\u5b57\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u6700\\u8fd1\\u4e48\\u6837\\u5fd1\\u670", "possible_answer": [{"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}]}
{"id": "simple_214", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'days_ahead' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u641c\u7d22\u5373\u5c07\u8209\u884c\u7684\u6416\u6efe\u97f3\u6a02\u6703\u3002"}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "[event_finder.find_upcoming(location=\"New York, NY\", genre=\"rock\")]", "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "rock"}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": "simple_215", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'title': '\u4e0a\u5b57'. Expected one of ['Interstellar']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "\u7d66\u6211\u7c21\u8981\u4ecb\u7d39\u96fb\u5f71\u201c\u661f\u969b\u201d"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "[movie_details.brief(title=\"\\u4e0a\\u5b57\")]", "model_result_decoded": [{"movie_details.brief": {"title": "\u4e0a\u5b57"}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_216", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'text': '\u6211\u597d\u4e0e\u8fd1\u600e\u4e48\u6837\uff01\u8fd1\u6700\u8fd1\u600e\u4e48\u6837\uff01'. Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_216", "question": [[{"role": "user", "content": "\u5206\u6790\u5ba2\u6236\u8a55\u8ad6\u7684\u60c5\u611f\u201c\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002'\u3002"}]], "function": [{"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}]}, "model_result_raw": "[sentiment_analysis(text=\"\\u6211\\u597d\\u4e0e\\u8fd1\\u600e\\u4e48\\u6837\\uff01\\u8fd1\\u6700\\u8fd1\\u600e\\u4e48\\u6837\\uff01\", language=\"zh\")]", "model_result_decoded": [{"sentiment_analysis": {"text": "\u6211\u597d\u4e0e\u8fd1\u600e\u4e48\u6837\uff01\u8fd1\u6700\u8fd1\u600e\u4e48\u6837\uff01", "language": "zh"}}], "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}]}
{"id": "simple_217", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'data_source': '/data/myfmri.nii'. Expected one of ['~/data/myfMRI.nii']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_217", "question": [[{"role": "user", "content": "\u5f9e\u591a\u6ce2\u6bb5\u5e8f\u5217\u4e2d\u5206\u6790\u301c/data/myfmri.nii\u4e2d\u7684fMRI\u6578\u64da\uff0c\u8a72\u5e8f\u5217\u4ee56mm\u7684\u901f\u5ea6\u5e73\u6ed1\uff0c\u4ee5\u53ca\u5404\u5411\u540c\u6027\u9ad4\u7d20\u5927\u5c0f\u70ba2mm\u3002"}]], "function": [{"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}]}, "model_result_raw": "[fMRI.analyze(data_source=\"/data/myfmri.nii\", sequence_type=\"multiband\", smooth=6, voxel_size=2)]", "model_result_decoded": [{"fMRI.analyze": {"data_source": "/data/myfmri.nii", "sequence_type": "multiband", "smooth": 6, "voxel_size": 2}}], "possible_answer": [{"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}]}
{"id": "simple_224", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "\u5728Twitter\u4e0a\u627e\u5230\u6700\u53d7\u95dc\u6ce8\u7684\u4eba\uff0c\u4ed6\u767c\u63a8\u6587\u6709\u95dc\u8207\u884c\u70ba\u548c\u7fa4\u9ad4\u52d5\u614b\u6709\u95dc\u7684\u5fc3\u7406\u5b78\u3002"}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "[social_media_analytics.most_followed(topic=\"\\u79d1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1\\u6280\\u5fd1", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_226", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'sign1': '\u767d\u7f8a\u5ea7'. Expected one of ['Aries']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_226", "question": [[{"role": "user", "content": "\u627e\u5230\u767d\u7f8a\u5ea7\u8207\u96d9\u5b50\u5ea7\u7684\u517c\u5bb9\u6027\u5f97\u5206\u3002"}]], "function": [{"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "dict", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}]}, "model_result_raw": "[get_zodiac_compatibility(sign1=\"\u767d\u7f8a\u5ea7\", sign2=\"\\u5c0a\\u4e16\\u754c\")]", "model_result_decoded": [{"get_zodiac_compatibility": {"sign1": "\u767d\u7f8a\u5ea7", "sign2": "\u5c0a\u4e16\u754c"}}], "possible_answer": [{"get_zodiac_compatibility": {"sign1": ["Aries"], "sign2": ["Gemini"], "scale": ["percentage", ""]}}]}
{"id": "simple_228", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hobby': '\u8a89\u5c3e\u884c'. Expected one of ['jogging']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_228", "question": [[{"role": "user", "content": "\u627e\u5230\u559c\u6b61\u6162\u8dd1\u7684\u4eba\u7684\u4e09\u500b\u500b\u6027\u7279\u5fb5\u3002"}]], "function": [{"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "dict", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}]}, "model_result_raw": "[get_personality_traits(hobby=\"\\u8a89\\u5c3e\\u884c\", trait_count=3)]", "model_result_decoded": [{"get_personality_traits": {"hobby": "\u8a89\u5c3e\u884c", "trait_count": 3}}], "possible_answer": [{"get_personality_traits": {"hobby": ["jogging"], "trait_count": [3]}}]}
{"id": "simple_229", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'characteristics': ['high', 'organized', 'affable', 'sympathetic', 'empathetic']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "\u9451\u65bc\u6211\u9ad8\u6548\uff0c\u6709\u689d\u7406\uff0c\u96a8\u548c\uff0c\u5bcc\u6709\u540c\u60c5\u5fc3\u548c\u5bcc\u6709\u540c\u60c5\u5fc3\uff0c\u6211\u7684\u4e94\u5927\u6027\u683c\u7279\u8cea\u5f97\u5206\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "[get_bigfive_scores(characteristics=[\"high\", \"organized\", \"affable\", \"sympathetic\", \"empathetic\"])]", "model_result_decoded": [{"get_bigfive_scores": {"characteristics": ["high", "organized", "affable", "sympathetic", "empathetic"]}}], "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_233", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event_name': '\u5f60\u597d\u8ffd\u5fd1\u4e48\u6837'. Expected one of ['Treaty of Tordesillas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "Tordesillas\u689d\u7d04\u4f55\u6642\u767c\u751f\uff1f\u4ee5Yyyy\u7684\u683c\u5f0f\u8aaa\u51fa\u4f86\u3002"}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "[european_history.get_event_date(event_name=\"\\u5f60\\u597d\\u8ffd\\u5fd1\\u4e48\\u6837\", format=\"%Y\")]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "\u5f60\u597d\u8ffd\u5fd1\u4e48\u6837", "format": "%Y"}}], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": "simple_235", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': '\u6771\u4eac\u65c5\u884c\u8fd1\u5fd1'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "\u91cc\u65af\u672c\u689d\u7d04\u7684\u7c3d\u7f72\u662f\u4ec0\u9ebc\u6642\u5019\uff1f"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "[get_event_date(event=\"\\u6771\\u4eac\\u65c5\\u884c\\u8fd1\\u5fd1\")]", "model_result_decoded": [{"get_event_date": {"event": "\u6771\u4eac\u65c5\u884c\u8fd1\u5fd1"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_237", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': 'USA'. Expected one of ['United States', 'US']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_237", "question": [[{"role": "user", "content": "\u5f9e1960\u5e74\u52302000\u5e74\u7372\u53d6\u7f8e\u570b\u7684\u6b77\u53f2GDP\u6578\u64da\u3002"}]], "function": [{"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "[get_historical_GDP(country=\"USA\", start_year=1960, end_year=2000)]", "model_result_decoded": [{"get_historical_GDP": {"country": "USA", "start_year": 1960, "end_year": 2000}}], "possible_answer": [{"get_historical_GDP": {"country": ["United States", "US"], "start_year": [1960], "end_year": [2000]}}]}
{"id": "simple_241", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': '\u4e16\u754c'. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": [[{"role": "user", "content": "\u5167\u6230\u671f\u9593\u7f8e\u570b\u7e3d\u7d71\u662f\u8ab0\uff1f"}]], "function": [{"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}]}, "model_result_raw": "[US_President_During_Event(event=\"\\u4e16\\u754c\")]", "model_result_decoded": [{"US_President_During_Event": {"event": "\u4e16\u754c"}}], "possible_answer": [{"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}]}
{"id": "simple_242", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': '\u8fd1\u5fd1\u4e0a\u5fd1\u4e48\u6837'. Expected one of ['Theory of Evolution', 'theory of evolution']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_242", "question": [[{"role": "user", "content": "\u8ab0\u662f\u6700\u521d\u63d0\u51fa\u9032\u5316\u8ad6\u7684\u79d1\u5b78\u5bb6\uff1f"}]], "function": [{"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}]}, "model_result_raw": "[get_scientist_for_discovery(discovery=\"\\u8fd1\\u5fd1\\u4e0a\\u5fd1\\u4e48\\u6837\")]", "model_result_decoded": [{"get_scientist_for_discovery": {"discovery": "\u8fd1\u5fd1\u4e0a\u5fd1\u4e48\u6837"}}], "possible_answer": [{"get_scientist_for_discovery": {"discovery": ["Theory of Evolution", "theory of evolution"]}}]}
{"id": "simple_243", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'discovery': '\u5c3b\u5fc3'. Expected one of ['neutron']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_243", "question": [[{"role": "user", "content": "\u8ab0\u767c\u73fe\u4e86\u4e2d\u5b50\uff1f\u7d66\u6211\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}]}, "model_result_raw": "[get_discoverer(discovery=\"\\u5c3b\\u5fc3\", detail=True)]", "model_result_decoded": [{"get_discoverer": {"discovery": "\u5c3b\u5fc3", "detail": true}}], "possible_answer": [{"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}]}
{"id": "simple_244", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'author': '\u5b57\u5b9a\u4e16\u754c'. Expected one of ['Isaac Newton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "\u827e\u85a9\u514b\u00b7\u725b\u9813\uff08Isaac Newton\uff09\u51fa\u7248\u4e86\u666e\u904d\u91cd\u529b\u5b9a\u5f8b\u7684\u54ea\u4e00\u5e74\uff1f"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "[publication_year.find(author=\"\\u5b57\\u5b9a\\u4e16\\u754c\", work_title=\"\\u5e38\\u8e7e\\u5fd1\\u597d\")]", "model_result_decoded": [{"publication_year.find": {"author": "\u5b57\u5b9a\u4e16\u754c", "work_title": "\u5e38\u8e7e\u5fd1\u597d"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_245", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'element_name': '\u8c3f'. Expected one of [\"'radium'\", '\"radium\"', 'radium']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_245", "question": [[{"role": "user", "content": "\u8ab0\u767c\u73fe\u4e86\u9433\uff1f"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}]}, "model_result_raw": "[discoverer.get(element_name=\"\\u8c3f\")]", "model_result_decoded": [{"discoverer.get": {"element_name": "\u8c3f"}}], "possible_answer": [{"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}]}
{"id": "simple_247", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'scientist': '\u5b57\u5bf8\u4e16\u754c'. Expected one of ['Albert Einstein']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_247", "question": [[{"role": "user", "content": "1915\u5e743\u670817\u65e5\uff0c\u963f\u723e\u4f2f\u7279\u00b7\u611b\u56e0\u65af\u5766\uff08Albert Einstein\uff09\u5c0d\u79d1\u5b78\u7684\u8ca2\u737b\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}]}, "model_result_raw": "[historical_contrib.get_contrib(scientist=\"\\u5b57\\u5bf8\\u4e16\\u754c\", date=\"1915-03-17\")]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "\u5b57\u5bf8\u4e16\u754c", "date": "1915-03-17"}}], "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "simple_248", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'invention_name': '\u4e0e\u5b57\u5fd1\u4e48\u6837'. Expected one of ['theory of relativity', 'Theory of Relativity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "\u8ab0\u767c\u660e\u4e86\u76f8\u5c0d\u8ad6\u548c\u54ea\u4e00\u5e74\uff1f"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "[science_history.get_invention(invention_name=\"\\u4e0e\\u5b57\\u5fd1\\u4e48\\u6837\", want_year=True)]", "model_result_decoded": [{"science_history.get_invention": {"invention_name": "\u4e0e\u5b57\u5fd1\u4e48\u6837", "want_year": true}}], "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_249", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion': '\u57fa\u7763\u6559'. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "\u544a\u8a34\u6211\u66f4\u591a\u6709\u95dc\u57fa\u7763\u6559\u53ca\u5176\u6b77\u53f2\u76f4\u523014\u4e16\u7d00\u7684\u4fe1\u606f"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "[religion.history_info(religion=\"\u57fa\u7763\u6559\", till_century=14)]", "model_result_decoded": [{"religion.history_info": {"religion": "\u57fa\u7763\u6559", "till_century": 14}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_251", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u79d1\u6280\u5fd1'. Expected one of ['Jesus Christ']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "\u6b77\u53f2\u8a18\u9304\u4e2d\uff0c\u8036\u7a4c\u57fa\u7763\u5728\u6b77\u53f2\u4e0a\u6700\u65e9\u7684\u53c3\u8003\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "[get_earliest_reference(name=\"\\u79d1\\u6280\\u5fd1\", source=\"historical records\")]", "model_result_decoded": [{"get_earliest_reference": {"name": "\u79d1\u6280\u5fd1", "source": "historical records"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_252", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion': '\u57fa\u7763\u6559'. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_252", "question": [[{"role": "user", "content": "\u572816\u4e16\u7d00\u7684\u91cd\u8981\u6027\u4e2d\u627e\u5230\u8207\u57fa\u7763\u6559\u6709\u95dc\u7684\u5341\u500b\u4e3b\u8981\u6b77\u53f2\u4e8b\u4ef6\u3002"}]], "function": [{"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}]}, "model_result_raw": "[get_religion_history(religion=\"\u57fa\u7763\u6559\", century=16, sort_by=\"importance\", count=10)]", "model_result_decoded": [{"get_religion_history": {"religion": "\u57fa\u7763\u6559", "century": 16, "sort_by": "importance", "count": 10}}], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}]}
{"id": "simple_253", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion_name': '\u4e0a\u597d'. Expected one of ['Buddhism']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_253", "question": [[{"role": "user", "content": "\u6aa2\u7d22\u4f5b\u6559\u7684\u5b8c\u6574\u6b77\u53f2"}]], "function": [{"name": "retrieve_religion_info", "description": "Retrieve the history and main beliefs of a religion.", "parameters": {"type": "dict", "properties": {"religion_name": {"type": "string", "description": "The name of the religion."}, "detail_level": {"type": "string", "description": "Level of detail for the returned information, either 'summary' or 'full'.", "default": "summary"}}, "required": ["religion_name", "detail_level"]}}]}, "model_result_raw": "[retrieve_religion_info(religion_name=\"\\u4e0a\\u597d\", detail_level=\"full\")]", "model_result_decoded": [{"retrieve_religion_info": {"religion_name": "\u4e0a\u597d", "detail_level": "full"}}], "possible_answer": [{"retrieve_religion_info": {"religion_name": ["Buddhism"], "detail_level": ["full"]}}]}
{"id": "simple_254", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'religion': '\u57fa\u7763\u6559'. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "\u6aa2\u7d22300\u81f3400\u5e74\u4e4b\u9593\u8207\u57fa\u7763\u6559\u6709\u95dc\u7684\u6b77\u53f2\u65e5\u671f\u548c\u4e8b\u5be6\u3002"}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "[get_religion_history(religion=\"\u57fa\u7763\u6559\", start_year=300, end_year=400)]", "model_result_decoded": [{"get_religion_history": {"religion": "\u57fa\u7763\u6559", "start_year": 300, "end_year": 400}}], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": "simple_255", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'papal_name': '\u5c3c\u5b57\u4e3a'. Expected one of ['Innocent III', 'Pope Innocent III']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_255", "question": [[{"role": "user", "content": "\u7372\u53d6\u6559\u7687\u7121\u8f9cIII\u7684\u50b3\u8a18\u548c\u4e3b\u8981\u8ca2\u737b\u3002"}]], "function": [{"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}]}, "model_result_raw": "[religious_history.get_papal_biography(papal_name=\"\\u5c3c\\u5b57\\u4e3a\", include_contributions=True)]", "model_result_decoded": [{"religious_history.get_papal_biography": {"papal_name": "\u5c3c\u5b57\u4e3a", "include_contributions": true}}], "possible_answer": [{"religious_history.get_papal_biography": {"papal_name": ["Innocent III", "Pope Innocent III"], "include_contributions": [true]}}]}
{"id": "simple_256", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color': '\u8a00\u5b57\u5f3b'. Expected one of ['Red']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_256", "question": [[{"role": "user", "content": "\u751f\u6210\u4e00\u500b\u534a\u5f91\u70ba50\u50cf\u7d20\u548c\u984f\u8272\u70ba\u201c\u7d05\u8272\u201d\u7684\u5713\u7684\u5716\u50cf\u3002"}]], "function": [{"name": "generate_circle_image", "description": "Generates a circle image based on the given radius and color", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in pixels."}, "color": {"type": "string", "description": "The color of the circle."}, "background": {"type": "string", "description": "Optional: The color of the background, default is white."}}, "required": ["radius", "color"]}}]}, "model_result_raw": "[generate_circle_image(radius=50, color=\"\\u8a00\\u5b57\\u5f3b\")]", "model_result_decoded": [{"generate_circle_image": {"radius": 50, "color": "\u8a00\u5b57\u5f3b"}}], "possible_answer": [{"generate_circle_image": {"radius": [50], "color": ["Red"], "background": ["", "white"]}}]}
{"id": "simple_265", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u829d\u52a0\u54e5'. Expected one of ['Chicago', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_265", "question": [[{"role": "user", "content": "\u572819\u4e16\u7d00\u5728\u829d\u52a0\u54e5\u9644\u8fd1\u627e\u5230\u6211\u7684\u96d5\u5851\u3002"}]], "function": [{"name": "sculpture_search", "description": "Find sculptures based on location and a specific time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the sculptures are located."}, "time_frame": {"type": "string", "description": "The time frame during which the sculptures were made."}, "material": {"type": "string", "description": "Optional material of the sculptures. Default is 'all'"}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "[sculpture_search(location=\"\u829d\u52a0\u54e5\", time_frame=\"19\u4e16\u7d00\")]", "model_result_decoded": [{"sculpture_search": {"location": "\u829d\u52a0\u54e5", "time_frame": "19\u4e16\u7d00"}}], "possible_answer": [{"sculpture_search": {"location": ["Chicago", "Chicago, IL"], "time_frame": ["19th century"], "material": ["", "all"]}}]}
{"id": "simple_266", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_266", "question": [[{"role": "user", "content": "\u7f85\u4e39\u7684\u96d5\u5851\u201c\u601d\u60f3\u5bb6\u201d\u7684\u50f9\u503c\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "[get_sculpture_value(sculpture=\"\\u8a00\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57", "possible_answer": [{"get_sculpture_value": {"sculpture": ["The Thinker"], "artist": ["Rodin"]}}]}
{"id": "simple_267", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "\u5728\u4e0b\u4e00\u500b\u6708\u4e2d\u627e\u5230\u7d10\u7d04\u8209\u884c\u7684\u6700\u9ad8\u8a55\u50f9\u7684\u73fe\u4ee3\u96d5\u5851\u5c55\u89bd\u3002"}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "[find_exhibition(location=\"New York\", art_form=\"sculpture\", month=\"next month\", user_ratings=\"high\")]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "next month", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_268", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': '\u5b57\u4e48\u6837\u5fd1'. Expected one of ['Michelangelo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_268", "question": [[{"role": "user", "content": "\u5728\u610f\u5927\u5229\u7f85\u99ac\uff0c\u627e\u5230\u7c73\u958b\u6717\u57fa\u7f85\u7684\u96d5\u5851\u3002"}]], "function": [{"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}]}, "model_result_raw": "[sculpture_locator.find_by_artist(artist=\"\\u5b57\\u4e48\\u6837\\u5fd1\", material=\"all\", location=\"Italy\")]", "model_result_decoded": [{"sculpture_locator.find_by_artist": {"artist": "\u5b57\u4e48\u6837\u5fd1", "material": "all", "location": "Italy"}}], "possible_answer": [{"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}]}
{"id": "simple_270", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'building_name': '\u5a5a\u4e3a\u884c'. Expected one of ['Empire State Building', 'Empire State']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_270", "question": [[{"role": "user", "content": "\u60a8\u80fd\u7d66\u6211\u5e1d\u570b\u5927\u5ec8\u7684\u9ad8\u5ea6\u548c\u5bec\u5ea6\u55ce\uff1f"}]], "function": [{"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}]}, "model_result_raw": "[building.get_dimensions(building_name=\"\\u5a5a\\u4e3a\\u884c\", unit=\"meter\")]", "model_result_decoded": [{"building.get_dimensions": {"building_name": "\u5a5a\u4e3a\u884c", "unit": "meter"}}], "possible_answer": [{"building.get_dimensions": {"building_name": ["Empire State Building", "Empire State"], "unit": ["feet"]}}]}
{"id": "simple_271", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'floors': [1, 2, 3]. Expected one of [[2, 3, 4]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_271", "question": [[{"role": "user", "content": "\u5efa\u7bc9\u7269\u7684\u5efa\u7bc9\u7269ID B1004\u7684\u7d50\u69cb\u52d5\u614b\u5206\u6790\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "[analyze_structure(building_id=\"B1004\", floors=[1, 2, 3], mode=\"dynamic\")]", "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": [1, 2, 3], "mode": "dynamic"}}], "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "simple_273", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u8baf\u5fd1\u4e48\u6837\u5fd1\u4e48\u6837'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_273", "question": [[{"role": "user", "content": "\u627e\u51fa\u5df4\u9ece\u767e\u8449\u7a97\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u3002"}]], "function": [{"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}]}, "model_result_raw": "[museum.get_hours(name=\"\\u8baf\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\", location=\"\\u6771\\u4eac\\u65c5\\u884c\")]", "model_result_decoded": [{"museum.get_hours": {"name": "\u8baf\u5fd1\u4e48\u6837\u5fd1\u4e48\u6837", "location": "\u6771\u4eac\u65c5\u884c"}}], "possible_answer": [{"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": "simple_274", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum_name': '\u5b57\u884c\u597d\u5fd1\u4e48\u6837'. Expected one of ['Metropolitan Museum of Art', 'The Metropolitan Museum of Art', 'Met Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_274", "question": [[{"role": "user", "content": "\u67e5\u627e\u6709\u95dc\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\u958b\u696d\u6642\u9593\u7684\u4fe1\u606f\u3002"}]], "function": [{"name": "museum_info", "description": "Retrieve information about the opening hours of a museum based on its name.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "info_type": {"type": "string", "description": "The type of information needed about the museum.", "default": "opening_hours"}}, "required": ["museum_name"]}}]}, "model_result_raw": "[museum_info(museum_name=\"\\u5b57\\u884c\\u597d\\u5fd1\\u4e48\\u6837\", info_type=\"opening_hours\")]", "model_result_decoded": [{"museum_info": {"museum_name": "\u5b57\u884c\u597d\u5fd1\u4e48\u6837", "info_type": "opening_hours"}}], "possible_answer": [{"museum_info": {"museum_name": ["Metropolitan Museum of Art", "The Metropolitan Museum of Art", "Met Museum"], "info_type": ["opening_hours", ""]}}]}
{"id": "simple_276", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': '\u8a9e\u5c0e\u884c\u5fd1\u4e3a'. Expected one of ['Louvre Museum', 'Louvre']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_276", "question": [[{"role": "user", "content": "\u7372\u53d6\u5df4\u9ece\u76e7\u6d6e\u5bae\u535a\u7269\u9928\u7684\u5de5\u4f5c\u6642\u9593\u3002"}]], "function": [{"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Default is 'Monday'"}}, "required": ["museum", "location"]}}]}, "model_result_raw": "[museum_working_hours.get(museum=\"\\u8a9e\\u5c0e\\u884c\\u5fd1\\u4e3a\", location=\"Paris\")]", "model_result_decoded": [{"museum_working_hours.get": {"museum": "\u8a9e\u5c0e\u884c\u5fd1\u4e3a", "location": "Paris"}}], "possible_answer": [{"museum_working_hours.get": {"museum": ["Louvre Museum", "Louvre"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": "simple_277", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': 'British Museum'. Expected one of ['The British Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "\u5728\u672c\u9031\u672b\uff0c6\u670820233\u65e5\uff0c\u67e5\u627e\u5927\u82f1\u535a\u7269\u9928\u7684\u5de5\u4f5c\u6642\u9593\u548c\u7968\u50f9\u3002"}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "[museum_info(museum=\"British Museum\", date=\"2023-06-03\")]", "model_result_decoded": [{"museum_info": {"museum": "British Museum", "date": "2023-06-03"}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'instrument': '\u8a9e\u5b57'. Expected one of ['piano']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "\u70ba\u6211\u627e\u5230\u96c5\u99ac\u54c8\u92fc\u7434\u7684\u5e73\u5747\u50f9\u683c\u548c\u6536\u8996\u7387\u3002"}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "[get_instrument_details(instrument=\"\\u8a9e\\u5b57\", manufacturer=\"\\u8a9e\\u5b57\")]", "model_result_decoded": [{"get_instrument_details": {"instrument": "\u8a9e\u5b57", "manufacturer": "\u8a9e\u5b57"}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_280", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_280", "question": [[{"role": "user", "content": "\u5728\u6211\u7684\u9810\u7b971000\u7f8e\u5143\u5167\u627e\u5230\u4e00\u7a2e\u8072\u5b78\u5100\u5668\u3002"}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}]}, "model_result_raw": "The query does not provide the type of the instrument, which is a required argument for the function `find_instrument`.\n\nTherefore, the query lacks the required information to call the function.", "possible_answer": [{"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": [""]}}]}
{"id": "simple_281", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u5b57\u5b57\u5b57\u5b57'. Expected one of ['Violin']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_281", "question": [[{"role": "user", "content": "\u5f9e1721\u5e74\u88fd\u4f5c\u7684\u201c Stradivarius\u201d\u88fd\u9020\u5546\u4e2d\u7684\u6a02\u5668\u201c\u5c0f\u63d0\u7434\u201d\u7684\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}]}, "model_result_raw": "[get_instrument_info(name=\"\\u5b57\\u5b57\\u5b57\\u5b57\", maker=\"\\u5b57\\u5b57\\u5b57\\u5b57\", year=1721)]", "model_result_decoded": [{"get_instrument_info": {"name": "\u5b57\u5b57\u5b57\u5b57", "maker": "\u5b57\u5b57\u5b57\u5b57", "year": 1721}}], "possible_answer": [{"get_instrument_info": {"name": ["Violin"], "maker": ["Stradivarius"], "year": [1721]}}]}
{"id": "simple_283", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_283", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u5730\u5340\u627e\u5230\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002"}]], "function": [{"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "[guitar_price.find(model=\"Gibson Les Paul\", condition=\"Good\", location=\"Chicago\")]", "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois"]}}]}
{"id": "simple_286", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': '\u5b57\u4e3b\u5fd1'. Expected one of ['Beyonce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_286", "question": [[{"role": "user", "content": "\u7372\u53d6\u4e0b\u500b\u6708\uff082022\u5e744\u6708\uff09\u5728\u8056\u5730\u4e9e\u54e5\u6f14\u51fa\u7684\u85dd\u8853\u5bb6\u78a7\u6602\u65af\u6f14\u51fa\u7684\u97f3\u6a02\u6703\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}]}, "model_result_raw": "[concert.get_details(artist=\"\\u5b57\\u4e3b\\u5fd1\", location=\"\\u4e16\\u754c\", date=\"04-2022\")]", "model_result_decoded": [{"concert.get_details": {"artist": "\u5b57\u4e3b\u5fd1", "location": "\u4e16\u754c", "date": "04-2022"}}], "possible_answer": [{"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}]}
{"id": "simple_288", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Amm'. Expected one of ['Eminem']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_288", "question": [[{"role": "user", "content": "\u7d66\u6211\u5169\u5f35\u5728\u7d10\u7d04\u5e02\u4e0b\u4e00\u6b21\u963f\u59c6\u97f3\u6a02\u6703\u7684\u9580\u7968\u3002"}]], "function": [{"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}]}, "model_result_raw": "[concert_booking.book_ticket(artist=\"Amm\", city=\"New York\", num_tickets=2)]", "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "Amm", "city": "New York", "num_tickets": 2}}], "possible_answer": [{"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}]}
{"id": "simple_290", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': '\u9031\u672b'. Expected one of ['The Weeknd']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_290", "question": [[{"role": "user", "content": "\u9031\u672b\u97f3\u6a02\u6703\u572812\u6708\u8209\u884c\u7684\u6642\u6a5f\u548c\u4f4d\u7f6e\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}]}, "model_result_raw": "[concert.find_details(artist=\"\u9031\u672b\", month=\"12\")]", "model_result_decoded": [{"concert.find_details": {"artist": "\u9031\u672b", "month": "12"}}], "possible_answer": [{"concert.find_details": {"artist": ["The Weeknd"], "month": ["December"], "year": ["", 2022]}}]}
{"id": "simple_295", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'song_title': '\u6837\u5fd1\u4e48\u6837\u5fd1\u4e48'. Expected one of ['Bohemian Rhapsody']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_295", "question": [[{"role": "user", "content": "\u627e\u5230\u7687\u540e\u6b4c\u66f2\u300a\u6ce2\u5e0c\u7c73\u4e9e\u72c2\u60f3\u66f2\u300b\u7684\u6b4c\u8a5e\u3002"}]], "function": [{"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}]}, "model_result_raw": "[get_song_lyrics(song_title=\"\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\", artist_name=\"\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\")]", "model_result_decoded": [{"get_song_lyrics": {"song_title": "\u6837\u5fd1\u4e48\u6837\u5fd1\u4e48", "artist_name": "\u6837\u5fd1\u4e48\u6837\u5fd1\u4e48"}}], "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": "simple_300", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'first_note_frequency': 880. Expected one of [440]."], "error_type": "value_error:others", "prompt": {"id": "simple_300", "question": [[{"role": "user", "content": "\u6839\u64da\u8ae7\u6ce2\u7bc0\u594f\u8a08\u7b97\u5169\u500b\u97f3\u7b26\u548c880Hz\u983b\u7387\u7684\u5169\u500b\u97f3\u7b26\u4e4b\u9593\u7684\u6301\u7e8c\u6642\u9593\u3002"}]], "function": [{"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}]}, "model_result_raw": "[music.calculate_note_duration(first_note_frequency=880, second_note_frequency=880)]", "model_result_decoded": [{"music.calculate_note_duration": {"first_note_frequency": 880, "second_note_frequency": 880}}], "possible_answer": [{"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}]}
{"id": "simple_304", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u5f8e\u5f50\u597d'. Expected one of ['LeBron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "\u5f9e\u4e0a\u4e00\u5834\u7c43\u7403\u6bd4\u8cfd\u4e2d\u7372\u53d6\u7403\u54e1\u201c\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u201d\u7684\u7c43\u677f\u7d71\u8a08\u6578\u64da"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "[player_stats.getLastGame(player_name=\"\\u5f8e\\u5f50\\u597d\", team=\"Cavaliers\", metrics=[\"Rebounds\"])]", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "\u5f8e\u5f50\u597d", "team": "Cavaliers", "metrics": ["Rebounds"]}}], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": "simple_305", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u5d0d\u8c5e\u884c'. Expected one of ['Messi', 'Lionel Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "\u8a08\u7b97\u897f\u7532\u8db3\u7403\u904b\u52d5\u54e1\u6885\u897f\u57282020-2021\u8cfd\u5b63\u7684\u7e3d\u9ad4\u76ee\u6a19\u548c\u5354\u52a9"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "[sports_stats.get_performance(player_name=\"\\u5d0d\\u8c5e\\u884c\", tournament=\"\\u4e16\\u754c\", season=\"2020-2021\", performance_indicator=[\"Goals Scored\", \"Assists Made\"])]", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "\u5d0d\u8c5e\u884c", "tournament": "\u4e16\u754c", "season": "2020-2021", "performance_indicator": ["Goals Scored", "Assists Made"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_307", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'teams': ['\u6e56\u4eba', '\u5feb\u8239']. Expected one of [['Lakers', 'Clippers'], ['Clippers', 'Lakers']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "\u8ab0\u57282021\u5e741\u670828\u65e5\u8d0f\u5f97\u4e86\u6e56\u4eba\u548c\u5feb\u8239\u968a\u4e4b\u9593\u7684\u7c43\u7403\u6bd4\u8cfd\uff1f"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=[\"\u6e56\u4eba\", \"\u5feb\u8239\"], date=\"2021-01-28\")]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["\u6e56\u4eba", "\u5feb\u8239"], "date": "2021-01-28"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": "simple_310", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u5f60\u597d\u4e48\u6837'. Expected one of ['LeBron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_310", "question": [[{"role": "user", "content": "\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u7684\u8077\u696d\u6578\u64da\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}]}, "model_result_raw": "[get_career_stats(player_name=\"\\u5f60\\u597d\\u4e48\\u6837\")]", "model_result_decoded": [{"get_career_stats": {"player_name": "\u5f60\u597d\u4e48\u6837"}}], "possible_answer": [{"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}]}
{"id": "simple_311", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u5f60\u597d\u4e48\u6837'. Expected one of ['Lebron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_311", "question": [[{"role": "user", "content": "\u627e\u5230\u6211\u7684\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u7684\u8a73\u7d30\u8cc7\u6599"}]], "function": [{"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "[sports_db.find_athlete(name=\"\\u5f60\\u597d\\u4e48\\u6837\", sport=\"Basketball\")]", "model_result_decoded": [{"sports_db.find_athlete": {"name": "\u5f60\u597d\u4e48\u6837", "sport": "Basketball"}}], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": "simple_312", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u8a9e\u5fd1\u4e48\u6837'. Expected one of ['Ronaldo', 'Cristiano Ronaldo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_312", "question": [[{"role": "user", "content": "\u7f85\u7d0d\u723e\u591a\u57282021\u5e74\u7684\u6bd4\u8cfd\u7684\u7d71\u8a08\u6578\u64da\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default to not use it if not specified."}}, "required": ["player_name", "year"]}}]}, "model_result_raw": "[player_statistic(player_name=\"\\u8a9e\\u5fd1\\u4e48\\u6837\", year=2021)]", "model_result_decoded": [{"player_statistic": {"player_name": "\u8a9e\u5fd1\u4e48\u6837", "year": 2021}}], "possible_answer": [{"player_statistic": {"player_name": ["Ronaldo", "Cristiano Ronaldo"], "year": [2021], "team_name": [""]}}]}
{"id": "simple_313", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u5c38\u4e48\u6837'. Expected one of ['Lionel Messi', 'Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_313", "question": [[{"role": "user", "content": "\u6839\u64da\u6700\u65b0\u6578\u64da\uff0c\u6885\u897f\u6b50\u5143\u7684\u7e3d\u50f9\u503c\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}]}, "model_result_raw": "[celebrity_net_worth.get(name=\"\\u5c38\\u4e48\\u6837\", currency=\"EUR\")]", "model_result_decoded": [{"celebrity_net_worth.get": {"name": "\u5c38\u4e48\u6837", "currency": "EUR"}}], "possible_answer": [{"celebrity_net_worth.get": {"name": ["Lionel Messi", "Messi"], "currency": ["EUR", "euro"]}}]}
{"id": "simple_318", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u4eac\u65c5\u884c'. Expected one of ['Germany']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_318", "question": [[{"role": "user", "content": "2021\u5e74\uff0c\u5fb7\u570b\u7537\u5b50\u8db3\u7403\u968a\u7684FIFA\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}]}, "model_result_raw": "[get_team_ranking(team_name=\"\\u4eac\\u65c5\\u884c\", year=2021)]", "model_result_decoded": [{"get_team_ranking": {"team_name": "\u4eac\u65c5\u884c", "year": 2021}}], "possible_answer": [{"get_team_ranking": {"team_name": ["Germany"], "year": [2021], "gender": ["men", ""]}}]}
{"id": "simple_319", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': '\u5c0a\u5fd1'. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_319", "question": [[{"role": "user", "content": "\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season '2023' if not specified."}}, "required": ["team", "league"]}}]}, "model_result_raw": "[sports_ranking(team=\"\\u5c0a\\u5fd1\", league=\"\\u8fd1\\u5fd1\\u4e48\\u6837\")]", "model_result_decoded": [{"sports_ranking": {"team": "\u5c0a\u5fd1", "league": "\u8fd1\u5fd1\u4e48\u6837"}}], "possible_answer": [{"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC"], "league": ["Premier League"], "season": ["", 2023]}}]}
{"id": "simple_320", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "\u53d6\u5f97\u7c43\u7403\u806f\u8cfd\u7684\u6392\u540d"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "The query does not provide the required arguments for the function `sports_ranking.get_team_position`. Specifically, it lacks the `team` and `season` parameters. Please provide the name of the team and the season for which you want to retrieve the ranking.", "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": "simple_321", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': '\u4e0a\u8a9e\u4e48\u6837'. Expected one of ['Barcelona', 'FC Barcelona']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_321", "question": [[{"role": "user", "content": "\u57282021\u5e74\u897f\u7532\u8cfd\u5b63\uff0c\u5df4\u585e\u7f85\u90a3\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Get the ranking of a team in a given sports league and season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the sports league."}, "season": {"type": "string", "description": "The season for which ranking needs to be obtained."}}, "required": ["team", "league", "season"]}}]}, "model_result_raw": "[sports_ranking(team=\"\\u4e0a\\u8a9e\\u4e48\\u6837\", league=\"\\u4e16\\u754c\", season=\"2021\")]", "model_result_decoded": [{"sports_ranking": {"team": "\u4e0a\u8a9e\u4e48\u6837", "league": "\u4e16\u754c", "season": "2021"}}], "possible_answer": [{"sports_ranking": {"team": ["Barcelona", "FC Barcelona"], "league": ["La Liga"], "season": ["2021"]}}]}
{"id": "simple_324", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': '\u6d1b\u6749\u78ef\u6e56\u4eba\u968a'. Expected one of ['Los Angeles Lakers', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_324", "question": [[{"role": "user", "content": "\u627e\u5230\u5305\u62ec\u5c0d\u624b\u540d\u7a31\u5728\u5167\u7684\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u7684\u6700\u5f8c\u4e00\u5834\u6bd4\u8cfd\u5f97\u5206\u3002"}]], "function": [{"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": false}}, "required": ["team"]}}]}, "model_result_raw": "[team_score.get_latest(team=\"\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\", include_opponent=True)]", "model_result_decoded": [{"team_score.get_latest": {"team": "\u6d1b\u6749\u78ef\u6e56\u4eba\u968a", "include_opponent": true}}], "possible_answer": [{"team_score.get_latest": {"team": ["Los Angeles Lakers", "Lakers"], "include_opponent": [true]}}]}
{"id": "simple_326", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u8c8c\u5fd1\u4e48\u6837'. Expected one of ['Los Angeles Lakers', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_326", "question": [[{"role": "user", "content": "\u7372\u5f97NBA\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u7684\u6700\u65b0\u6bd4\u8cfd\u5f97\u5206\u548c\u7d71\u8a08\u6578\u64da\u3002"}]], "function": [{"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "[get_team_score(team_name=\"\\u8c8c\\u5fd1\\u4e48\\u6837\", league=\"NBA\")]", "model_result_decoded": [{"get_team_score": {"team_name": "\u8c8c\u5fd1\u4e48\u6837", "league": "NBA"}}], "possible_answer": [{"get_team_score": {"team_name": ["Los Angeles Lakers", "Lakers"], "league": ["NBA"], "include_player_stats": ["", true, false]}}]}
{"id": "simple_327", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u5c0a\u5fd1'. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "\u7d66\u6211\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u63a5\u4e0b\u4f86\u76846\u5834\u6bd4\u8cfd\u4e2d\u7684\u65e5\u7a0b\u5b89\u6392\u3002"}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "[sports_team.get_schedule(team_name=\"\\u5c0a\\u5fd1\", num_of_games=6, league=\"Premier League\")]", "model_result_decoded": [{"sports_team.get_schedule": {"team_name": "\u5c0a\u5fd1", "num_of_games": 6, "league": "Premier League"}}], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': '\u8fd1\u8fd1\u8fd1\u8fd1\u8fd1'. Expected one of ['Ticket to Ride']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "\u627e\u5230\u68cb\u76e4\u904a\u6232\u201c\u9a0e\u8eca\u7968\u201d\u7684\u8a55\u5206\u548c\u73a9\u5bb6\u6578\u91cf\u3002"}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "[boardgame.get_info(name=\"\\u8fd1\\u8fd1\\u8fd1\\u8fd1\\u8fd1\", parameters=[\"rating\", \"player count\"])]", "model_result_decoded": [{"boardgame.get_info": {"name": "\u8fd1\u8fd1\u8fd1\u8fd1\u8fd1", "parameters": ["rating", "player count"]}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_330", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': '\u8c48\u6837\u884c'. Expected one of ['Catan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "\u68cb\u76e4\u904a\u6232\u201c Catan\u201d\u7684\u5e73\u5747\u8a55\u4f30\u8a55\u7d1a\u548c\u5e74\u9f61\u7bc4\u570d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "[board_game_info(game_name=\"\\u8c48\\u6837\\u884c\", info_required=[\"average_review_rating\", \"age_range\"])]", "model_result_decoded": [{"board_game_info": {"game_name": "\u8c48\u6837\u884c", "info_required": ["average_review_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_331", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u5d0c\u4e0a'. Expected one of ['New York', 'New York City', 'New York City, NY', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_331", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u627e\u5230\u9802\u7d1a\u570b\u969b\u8c61\u68cb\u7403\u54e1\uff0c\u5176\u8a55\u5206\u8d85\u904e2300\u3002"}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}]}, "model_result_raw": "[board_game.chess.get_top_players(location=\"\\u5d0c\\u4e0a\", minimum_rating=2300)]", "model_result_decoded": [{"board_game.chess.get_top_players": {"location": "\u5d0c\u4e0a", "minimum_rating": 2300}}], "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": "simple_332", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_332", "question": [[{"role": "user", "content": "\u99ac\u683c\u52aa\u65af\u00b7\u5361\u723e\u68ee\uff08Magnus Carlsen\uff09\u7684\u570b\u969b\u8c61\u68cb\u7d93\u5178\u8a55\u7d1a\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}]}, "model_result_raw": "[chess.rating(player_name=\"\\u5c3e\\u5b57\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u5c0e\\u5c0a\\u5c3b\\u", "possible_answer": [{"chess.rating": {"player_name": ["Magnus Carlsen"], "variant": ["classical", ""]}}]}
{"id": "simple_335", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_335", "question": [[{"role": "user", "content": "\u5728\u7532\u677f\u4e0a\u627e\u5230\u4e00\u5f35\u201c\u7687\u540e\u201d\u548c\u201c\u7687\u540e\u201d\u7684\u5361\u7247\u3002"}]], "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}, "required": ["rank", "suit"]}}]}, "model_result_raw": "[find_card_in_deck(rank=\"Queen\", suit=\"Hearts\"), find_card_in_deck(rank=\"Queen\", suit=\"Spades\")]", "model_result_decoded": [{"find_card_in_deck": {"rank": "Queen", "suit": "Hearts"}}, {"find_card_in_deck": {"rank": "Queen", "suit": "Spades"}}], "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}
{"id": "simple_337", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'Alex': ['5', '3', '7', '9']. Expected one of [['A of spades', 'K of spades']]."], "error_type": "value_error:dict_value", "prompt": {"id": "simple_337", "question": [[{"role": "user", "content": "\u5728\u5fb7\u514b\u85a9\u65af\u5dde\u7684\u4e00\u5834\u970d\u723e\u5fb7\u59c6\u904a\u6232\u4e2d\uff0c\u4ed6\u8207\u7403\u54e1\u4e9e\u6b77\u514b\u65af\uff0c\u5c71\u59c6\uff0c\u7f85\u4f2f\u7279\u548c\u53f2\u8482\u592b\u5728\u64b2\u514b\u904a\u6232\u4e2d\u7372\u52dd\uff0c\u7d66\u4e86\u4e9e\u6b77\u514b\u65af\u7684\u5361\u7247\uff1a"}]], "function": [{"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "[poker_game_winner(players=[\"Alex\", \"Sam\", \"Robert\", \"Steve\"], cards={\"Alex\": [\"5\", \"3\", \"7\", \"9\"], \"Sam\": [\"2\", \"8\", \"4\", \"1\"], \"Robert\": [\"6\", \"7\", \"2\", \"3\"], \"Steve\": [\"4\", \"1\", \"9\", \"5\"]}, type=\"Texas Holdem\")]", "model_result_decoded": [{"poker_game_winner": {"players": ["Alex", "Sam", "Robert", "Steve"], "cards": {"Alex": ["5", "3", "7", "9"], "Sam": ["2", "8", "4", "1"], "Robert": ["6", "7", "2", "3"], "Steve": ["4", "1", "9", "5"]}, "type": "Texas Holdem"}}], "possible_answer": [{"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}]}
{"id": "simple_340", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hand1': ['8\\\\\u2665', '10\\\\\u2665', 'J\\\\\u2665', 'Q\\\\\u2665', 'K\\\\\u2665']. Expected one of [['8\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "\u78ba\u5b9a\u64b2\u514b\u904a\u6232\u4e2d\u7684\u7372\u52dd\u8005\uff0c\u7d04\u7ff0\u7684\u624b\u64c1\u67098\u2665\uff0c10\u2665\uff0cJ\u2665\uff0cQ\u2665\uff0cK\u2665\u548cMike\u7684\u624b\u67099\u2660\uff0cJ\u2660\uff0c10\u2660\uff0cQ\u2660\uff0cK\u2660\u3002"}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "[card_games.poker_determine_winner(player1=\"John\", hand1=[\"8\\\u2665\", \"10\\\u2665\", \"J\\\u2665\", \"Q\\\u2665\", \"K\\\u2665\"], player2=\"Mike\", hand2=[\"9\\\u2660\", \"J\\\u2660\", \"10\\\u2660\", \"Q\\\u2660\", \"K\\\u2660\"])]", "model_result_decoded": [{"card_games.poker_determine_winner": {"player1": "John", "hand1": ["8\\\u2665", "10\\\u2665", "J\\\u2665", "Q\\\u2665", "K\\\u2665"], "player2": "Mike", "hand2": ["9\\\u2660", "J\\\u2660", "10\\\u2660", "Q\\\u2660", "K\\\u2660"]}}], "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": "simple_342", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ESRB_rating': 'E for Everyone'. Expected one of ['Everyone']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_342", "question": [[{"role": "user", "content": "\u67e5\u627e2019\u5e74\u767c\u884c\u7684\u6240\u6709\u591a\u4eba\u904a\u6232\uff0c\u4e26\u7372\u5f97\u4e86\u201c\u6240\u6709\u4eba\u201d\u7684ESRB\u8a55\u7d1a"}]], "function": [{"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "dict", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}]}, "model_result_raw": "[game_list.get_games(release_year=2019, multiplayer=True, ESRB_rating=\"E for Everyone\")]", "model_result_decoded": [{"game_list.get_games": {"release_year": 2019, "multiplayer": true, "ESRB_rating": "E for Everyone"}}], "possible_answer": [{"game_list.get_games": {"release_year": [2019], "multiplayer": [true], "ESRB_rating": ["Everyone"]}}]}
{"id": "simple_343", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'platform' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_343", "question": [[{"role": "user", "content": "\u7372\u53d6\u201c Zelda\u201d\u7684\u64ad\u653e\u5668\u7d71\u8a08\u4fe1\u606f\u5728\u7528\u6236\u201c SAM\u201d\u4e0a\u3002"}]], "function": [{"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "[game_stats.fetch_player_statistics(game=\"Zelda\", username=\"SAM\")]", "model_result_decoded": [{"game_stats.fetch_player_statistics": {"game": "Zelda", "username": "SAM"}}], "possible_answer": [{"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch"]}}]}
{"id": "simple_344", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_344", "question": [[{"role": "user", "content": "\u6b66\u5668\u201c Guardian Sword+\u201d\u904a\u6232\u4e2d\u7684\u201c Zelda\u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438\u201d\u7684\u529f\u7387\u8a55\u7d1a\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}]}, "model_result_raw": "[get_game_item_stats(game=\"\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u5b57\\u", "possible_answer": [{"get_game_item_stats": {"game": ["Legend of Zelda: Breath of the Wild"], "item": ["Guardian Sword+"], "stat": ["Power", "power", "power rating"]}}]}
{"id": "simple_345", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': '\u8bf7\u4e48\u6837\u5fd1\u4e48\u6837'. Expected one of ['Super Mario Bros.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_345", "question": [[{"role": "user", "content": "\u627e\u52301985\u5e74\u7684\u8001\u5f0f\u8d85\u7d1a\u99ac\u91cc\u5967\u5144\u5f1f\u904a\u6232\u7684\u50f9\u503c\u3002"}]], "function": [{"name": "game_valuation", "description": "Get the current market value of a vintage video game.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "release_year": {"type": "integer", "description": "The year the game was released."}, "condition": {"type": "string", "enum": ["New", "Like New", "Used", "Fair", "Poor"], "description": "The condition of the game. Default is 'Used'."}}, "required": ["game_name", "release_year"]}}]}, "model_result_raw": "[game_valuation(game_name=\"\\u8bf7\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\", release_year=1985)]", "model_result_decoded": [{"game_valuation": {"game_name": "\u8bf7\u4e48\u6837\u5fd1\u4e48\u6837", "release_year": 1985}}], "possible_answer": [{"game_valuation": {"game_name": ["Super Mario Bros."], "release_year": [1985], "condition": ["Like New", "New"]}}]}
{"id": "simple_346", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game_name': '\u8a9f\u5c3e\u4e48\u6837\uff1a\u6700\u8fd1\u600e\u4e48\u6837'. Expected one of ['Animal Crossing: New Horizons']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_346", "question": [[{"role": "user", "content": "\u5728\u6625\u5b63\uff0c\u5f9e\u904a\u6232\u201c\u52d5\u7269\u4ea4\u53c9\uff1a\u65b0\u8996\u91ce\u201d\u4e2d\u7372\u53d6\u6240\u6709\u53ef\u6536\u96c6\u7269\u54c1\u3002"}]], "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}]}, "model_result_raw": "[get_collectables_in_season(game_name=\"\\u8a9f\\u5c3e\\u4e48\\u6837\\uff1a\\u6700\\u8fd1\\u600e\\u4e48\\u6837\", season=\"\\u6700\\u8fd1\")]", "model_result_decoded": [{"get_collectables_in_season": {"game_name": "\u8a9f\u5c3e\u4e48\u6837\uff1a\u6700\u8fd1\u600e\u4e48\u6837", "season": "\u6700\u8fd1"}}], "possible_answer": [{"get_collectables_in_season": {"game_name": ["Animal Crossing: New Horizons"], "season": ["Spring"], "item_type": ["", "all"]}}]}
{"id": "simple_347", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u5229\u7269\u6d66F.C.'. Expected one of ['Liverpool F.C.', 'Liverpool']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_347", "question": [[{"role": "user", "content": "\u8b93\u6211\u7372\u5f97\u5229\u7269\u6d66F.C.\u4e0a\u4e00\u5834\u6bd4\u8cfd\u7684\u8a73\u7d30\u4fe1\u606f\u3002\u5305\u62ec\u5176\u7d71\u8a08\u6578\u64da\u3002"}]], "function": [{"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "[soccer.get_last_match(team_name=\"\u5229\u7269\u6d66F.C.\", include_stats=True)]", "model_result_decoded": [{"soccer.get_last_match": {"team_name": "\u5229\u7269\u6d66F.C.", "include_stats": true}}], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": "simple_348", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter '_class': '\u6837\u5fd1'. Expected one of ['Mage']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_348", "question": [[{"role": "user", "content": "\u4f7f\u7528\u540d\u7a31\u70ba\u201c Starplayer\u201d\u548c\u5b57\u7b26\u985e\u201c\u6cd5\u5e2b\u201d\u70ba\u904a\u6232\u5275\u5efa\u4e00\u500b\u65b0\u7684\u73a9\u5bb6\u914d\u7f6e\u6587\u4ef6\uff0c\u5c07\u8d77\u59cb\u7d1a\u5225\u8a2d\u7f6e\u70ba5\u3002"}]], "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}]}, "model_result_raw": "[create_player_profile(player_name=\"Starplayer\", _class=\"\\u6837\\u5fd1\", starting_level=5)]", "model_result_decoded": [{"create_player_profile": {"player_name": "Starplayer", "_class": "\u6837\u5fd1", "starting_level": 5}}], "possible_answer": [{"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}]}
{"id": "simple_349", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'any'. Expected one of ['Overwatch']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_349", "question": [[{"role": "user", "content": "\u5728\u5168\u7403PC\u4e0a\u627e\u5230\u4efb\u4f55\u73a9\u5bb6\u5728\u7dda\u904a\u6232\u4e2d\u4efb\u4f55\u73a9\u5bb6\u6240\u7372\u5f97\u7684\u6700\u9ad8\u5206\u6578\u3002"}]], "function": [{"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}]}, "model_result_raw": "[game_score.highest(game=\"any\", platform=\"PC\", region=\"Global\")]", "model_result_decoded": [{"game_score.highest": {"game": "any", "platform": "PC", "region": "Global"}}], "possible_answer": [{"game_score.highest": {"game": ["Overwatch"], "platform": ["PC"], "region": ["Global", ""]}}]}
{"id": "simple_350", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'Valort'. Expected one of ['Valorant']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_350", "question": [[{"role": "user", "content": "\u57282022\u8cfd\u5b63\u7372\u5f97\u904a\u6232\u201c Valort\u201d\u7684\u5f97\u5206\u6700\u9ad8\u7684\u7403\u54e1\u3002"}]], "function": [{"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}}, "required": ["game", "season"]}}]}, "model_result_raw": "[get_highest_scoring_player(game=\"Valort\", season=\"2022\")]", "model_result_decoded": [{"get_highest_scoring_player": {"game": "Valort", "season": "2022"}}], "possible_answer": [{"get_highest_scoring_player": {"game": ["Valorant"], "season": ["2022", "2022 season"]}}]}
{"id": "simple_352", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. (unicode error) 'unicodeescape' codec can't decode bytes in position 47-51: truncated \\uXXXX escape (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "\u5f9eGamespot\u7372\u53d6\u904a\u6232\u201c Zelda\u7684\u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438\u201d\u7684\u5e73\u5747\u7528\u6236\u5f97\u5206\u3002"}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "[gamespot.getAverageUserScore(game_name=\"\\u5b57\\u4e16\\u754c\\uff08Zelda\\u5b57\\uff09\\uff1a\\u8e7\\u4e16\\u754c\\uff08Wild Breath\\uff09\", platform=\"all platforms\")]", "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_355", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': '\u8a3d\u5f97\u6837\u5fd1\u4e48\u6837'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": [[{"role": "user", "content": "Foodnetwork.com\u7684\u725b\u8089\u70e4\u5bec\u9eb5\u689d\u98df\u8b5c\u4e2d\u6709\u591a\u5c11\u5361\u8def\u91cc\uff1f"}]], "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "[recipe_info.get_calories(website=\"Foodnetwork.com\", recipe=\"\\u8a3d\\u5f97\\u6837\\u5fd1\\u4e48\\u6837\")]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "\u8a3d\u5f97\u6837\u5fd1\u4e48\u6837"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}]}
{"id": "simple_356", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'diet': 'vegetarian'. Expected one of ['vegan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_356", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u500b\u70ba2\u500b\u4eba\u670d\u52d9\uff0c\u662f\u7d20\u98df\u4e3b\u7fa9\u8005\uff0c\u9700\u8981\u4e0d\u523030\u5206\u9418\u6e96\u5099\u7684\u98df\u8b5c\u3002"}]], "function": [{"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}]}, "model_result_raw": "[recipe_finder.find(servings=2, diet=\"vegetarian\", prep_time=30)]", "model_result_decoded": [{"recipe_finder.find": {"servings": 2, "diet": "vegetarian", "prep_time": 30}}], "possible_answer": [{"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}]}
{"id": "simple_357", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish_name': '\u5b9e\u5b57\u4e0a\u5fd1\u5b9e'. Expected one of ['chocolate cake', 'vegan chocolate cake']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_357", "question": [[{"role": "user", "content": "\u7372\u53d6\u7d20\u98df\u5de7\u514b\u529b\u86cb\u7cd5\u7684\u98df\u8b5c\uff0c\u5305\u62ec\u6e96\u5099\u6b65\u9a5f\u3002"}]], "function": [{"name": "get_recipe", "description": "Fetch the recipe for a specific dish along with preparation steps.", "parameters": {"type": "dict", "properties": {"dish_name": {"type": "string", "description": "Name of the dish whose recipe needs to be fetched."}, "diet_preference": {"type": "string", "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.", "default": "none"}}, "required": ["dish_name"]}}]}, "model_result_raw": "[get_recipe(dish_name=\"\\u5b9e\\u5b57\\u4e0a\\u5fd1\\u5b9e\", diet_preference=\"vegetarian\")]", "model_result_decoded": [{"get_recipe": {"dish_name": "\u5b9e\u5b57\u4e0a\u5fd1\u5b9e", "diet_preference": "vegetarian"}}], "possible_answer": [{"get_recipe": {"dish_name": ["chocolate cake", "vegan chocolate cake"], "diet_preference": ["vegan"]}}]}
{"id": "simple_358", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish': '\u9905\u4e7e'. Expected one of ['cookie']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u500b\u7121\u9ea9\u8cea\u9905\u4e7e\u98df\u8b5c\uff0c\u9700\u8981\u4e0d\u523030\u5206\u9418\u624d\u80fd\u6e96\u5099\u3002"}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "[recipe_search(dish=\"\u9905\u4e7e\", diet=[\"Gluten Free\"], time_limit=30)]", "model_result_decoded": [{"recipe_search": {"dish": "\u9905\u4e7e", "diet": ["Gluten Free"], "time_limit": 30}}], "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": "simple_359", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['\u9762\u98df', '\u5976\u916a']. Expected one of [['pasta', 'cheese']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "\u7d66\u6211\u4e00\u500b\u914d\u4ee5\u5169\u4efd\u5976\u916a\u7684\u7d20\u98df\u9eb5\u98df\u7684\u98df\u8b5c\u3002"}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": "[recipe_search(dietary_restriction=\"Vegetarian\", ingredients=[\"\u9762\u98df\", \"\u5976\u916a\"], servings=2)]", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["\u9762\u98df", "\u5976\u916a"], "servings": 2}}], "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": "simple_360", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': '\u5b57\u5b57\u4e48\u6837'. Expected one of ['pasta carbonara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "\u67e5\u627e\u9eb5\u98dfCarbonara\u7684\u98df\u8b5c\uff0c\u5176\u4e2d\u50c5\u5305\u542b\u5c11\u65bc500\u5361\u8def\u91cc\u7684\u5361\u8def\u91cc\u3002"}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "[find_recipe(recipeName=\"\\u5b57\\u5b57\\u4e48\\u6837\", maxCalories=500)]", "model_result_decoded": [{"find_recipe": {"recipeName": "\u5b57\u5b57\u4e48\u6837", "maxCalories": 500}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_362", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': '\u6771\u4eac\u65c5\u884c'. Expected one of ['Tokyo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_362", "question": [[{"role": "user", "content": "\u5728\u6771\u4eac4/5\u4ee5\u4e0a\u7684\u58fd\u53f8\u9910\u5ef3\u7684\u524d\u4e94\u5bb6\u58fd\u53f8\u9910\u5ef3\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}]}, "model_result_raw": "[get_best_sushi_places(city=\"\\u6771\\u4eac\\u65c5\\u884c\", top=5, review_rate=4.0)]", "model_result_decoded": [{"get_best_sushi_places": {"city": "\u6771\u4eac\u65c5\u884c", "top": 5, "review_rate": 4.0}}], "possible_answer": [{"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}]}
{"id": "simple_363", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'amenities' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "\u5728\u6ce2\u58eb\u9813\u627e\u5230\u6700\u63a5\u8fd1\u7684\u58fd\u53f8\u9910\u5ef3\u3002"}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "[restaurant_search.find_closest(location=\"Boston, MA\", cuisine=\"Sushi\")]", "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": "Sushi"}}], "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": "simple_365", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'from_unit': '\u6771'. Expected one of ['pound', 'pounds', 'lb', 'lbs']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_365", "question": [[{"role": "user", "content": "2\u78c5\u9ec3\u6cb9\u4e2d\u6709\u591a\u5c11\u76ce\u53f8\uff1f"}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}]}, "model_result_raw": "[cooking_conversion.convert(quantity=2, from_unit=\"\\u6771\", to_unit=\"cup\", item=\"\\u4e0f\\u597d\")]", "model_result_decoded": [{"cooking_conversion.convert": {"quantity": 2, "from_unit": "\u6771", "to_unit": "cup", "item": "\u4e0f\u597d"}}], "possible_answer": [{"cooking_conversion.convert": {"quantity": [2], "from_unit": ["pound", "pounds", "lb", "lbs"], "to_unit": ["ounce", "ounces", "oz"], "item": ["butter"]}}]}
{"id": "simple_367", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dietary_restrictions': 'vegetarian'. Expected one of ['vegan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "\u70ba\u6211\u627e\u5230\u4e00\u500b\u7d20\u98df\u98df\u8b5c\uff0c\u7528\u65bc\u5e03\u6717\u5c3c\uff0c\u6e96\u5099\u6642\u9593\u4e0d\u523030\u5206\u9418\u3002"}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "[find_recipe(dietary_restrictions=\"vegetarian\", recipe_type=\"dessert\", time=30)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegetarian", "recipe_type": "dessert", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": "simple_369", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['Fruits', 'Vegetables']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "\u5728\u4f11\u65af\u6566\uff0c\u5728\u6211\u9644\u8fd1\u627e\u5230\u6709\u6a5f\u6c34\u679c\u548c\u852c\u83dc\u7684\u96dc\u8ca8\u5e97\u3002"}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "[grocery_store.find_nearby(location=\"Houston, TX\", categories=[\"Fruits\", \"Vegetables\"])]", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["Fruits", "Vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "\u5f9e\u5e15\u6d1b\u963f\u723e\u6258\uff08Palo Alto\uff09\u7684Safeway\u8a02\u8cfc\u4e09\u74f6\u6a44\u6b16\u6cb9\u548c\u4e00\u888b\u4e94\u78c5\u7684\u7c73\u98ef\u3002"}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location=\"Palo Alto\", items=[\"olive oil\", \"rice\"], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_372", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product': 'banana'. Expected one of ['bananas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "\u6839\u64daWhole Foods\u5546\u5e97\u7684\u8a55\u7d1a\uff0c\u627e\u5230\u524d\u4e94\u540d\u6709\u6a5f\u9999\u8549\u54c1\u724c\u3002"}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "[whole_foods.find_top_brands(product=\"banana\", number=5, organic=True)]", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "banana", "number": 5, "organic": true}}], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": "simple_373", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'loc': '\u4e16\u754c'. Expected one of ['San Jose', 'San Jose, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "\u6211\u60f3\u5f9e\u8056\u4f55\u585e\u9644\u8fd1\u7684\u6c83\u723e\u746a\u8cfc\u8cb7\u860b\u679c\uff0c\u5927\u7c73\u548c12\u5305\u74f6\u88dd\u6c34\u3002\u5411\u6211\u5c55\u793a\u7522\u54c1\u4fe1\u606f\u548c\u5eab\u5b58\u53ef\u7528\u6027\u3002"}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "[walmart.purchase(loc=\"\\u4e16\\u754c\", product_list=[\"apple\", \"rice\", \"water\"], pack_size=[1, 1, 12])]", "model_result_decoded": [{"walmart.purchase": {"loc": "\u4e16\u754c", "product_list": ["apple", "rice", "water"], "pack_size": [1, 1, 12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'food': 'dragon fruit'. Expected one of ['avocado', 'Avocado']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "\u6aa2\u67e5\u6c83\u723e\u746a\u7684\u9c77\u68a8\u4e2d\u7684\u86cb\u767d\u8cea\uff0c\u5361\u8def\u91cc\u548c\u78b3\u6c34\u5316\u5408\u7269\u7684\u91cf\u3002"}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "[grocery_info.nutritional_info(store=\"Walmart\", food=\"dragon fruit\", information=[\"Protein\", \"Calories\", \"Carbohydrates\"])]", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "dragon fruit", "information": ["Protein", "Calories", "Carbohydrates"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'egg']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "\u6aa2\u67e5\u6c83\u723e\u746a\u7684\u4e09\u500b\u5357\u74dc\u548c\u4e8c\u5341\u500b\u96de\u86cb\u7684\u7e3d\u50f9\u3002"}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[walmart.check_price(items=[\"pumpkin\", \"egg\"], quantities=[3, 20])]", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "egg"], "quantities": [3, 20]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_380", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "\u5f9e2023\u5e743\u670810\u65e5\u958b\u59cb\uff0c\u5728\u7d10\u7d04\u66fc\u54c8\u9813\u9644\u8fd1\u7684\u4e00\u5bb6\u5bf5\u7269\u53cb\u597d\u9152\u5e97\u9810\u8a02\u4e00\u9593\u55ae\u4eba\u9593\u3002"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "[hotel_booking(location=\"New York Manhattan\", room_type=\"single\", duration=1, start_date=\"2023-03-10\", preferences=[\"pet_friendly\"])]", "model_result_decoded": [{"hotel_booking": {"location": "New York Manhattan", "room_type": "single", "duration": 1, "start_date": "2023-03-10", "preferences": ["pet_friendly"]}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_381", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'check_in_date': '2022-04-04'. Expected one of ['2023-04-04']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_381", "question": [[{"role": "user", "content": "\u5f9e4\u67084\u65e5\u81f34\u67088\u65e5\uff0c\u6aa2\u67e5\u5df4\u9ece\u7684\u5169\u540d\u6210\u5e74\u4eba\u662f\u5426\u6709\u5e0c\u723e\u9813\u9152\u5e97\uff1f"}]], "function": [{"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}]}, "model_result_raw": "[hilton_hotel.check_availability(location=\"Paris\", check_in_date=\"2022-04-04\", check_out_date=\"2022-04-08\", no_of_adults=2)]", "model_result_decoded": [{"hilton_hotel.check_availability": {"location": "Paris", "check_in_date": "2022-04-04", "check_out_date": "2022-04-08", "no_of_adults": 2}}], "possible_answer": [{"hilton_hotel.check_availability": {"location": ["Paris"], "check_in_date": ["2023-04-04"], "check_out_date": ["2023-04-08"], "no_of_adults": [2], "hotel_chain": ["Hilton", ""]}}]}
{"id": "simple_383", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': '\u5a0e\u8bf7\u884c\u5fd1'. Expected one of ['The Plaza']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_383", "question": [[{"role": "user", "content": "\u6211\u60f3\u5728\u5ee3\u5834\u9152\u5e97\u9810\u8a02\u4e00\u500b\u55ae\u4eba\u9593\u5169\u665a\u3002"}]], "function": [{"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}]}, "model_result_raw": "[book_room(hotel_name=\"\\u5a0e\\u8bf7\\u884c\\u5fd1\", room_type=\"single\", num_nights=2)]", "model_result_decoded": [{"book_room": {"hotel_name": "\u5a0e\u8bf7\u884c\u5fd1", "room_type": "single", "num_nights": 2}}], "possible_answer": [{"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}]}
{"id": "simple_386", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Las Vegas Hotel'. Expected one of ['Hotel Paradise']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_386", "question": [[{"role": "user", "content": "\u5f9e2022\u5e745\u670812\u65e5\u958b\u59cb\uff0c\u5728\u62c9\u65af\u7dad\u52a0\u65af\u9152\u5e97\u7684\u9152\u5e97\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u623f\u9593\uff0c\u4eab\u67093\u5929\u7684\u57ce\u5e02\u666f\u89c0\u3002"}]], "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Las Vegas Hotel\", location=\"Las Vegas\", room_type=\"Luxury\", start_date=\"05-12-2022\", stay_duration=3, view=\"City view\")]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Las Vegas Hotel", "location": "Las Vegas", "room_type": "Luxury", "start_date": "05-12-2022", "stay_duration": 3, "view": "City view"}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}]}
{"id": "simple_387", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': '\u5f60\u597d\u4e0a\u8a9e'. Expected one of ['Plaza Hotel']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "\u5f9e2022\u5e746\u67081\u65e5\u958b\u59cb\u5728\u7d10\u7d04\u5ee3\u5834\u9152\u5e97\u9810\u8a02\u9152\u5e97\u623f\u95933\u665a"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"\\u5f60\\u597d\\u4e0a\\u8a9e\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-04\", rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "\u5f60\u597d\u4e0a\u8a9e", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": "simple_393", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': '\u4e16\u754c'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "20000\u5e74\u65e5\u5143\u5728\u7f8e\u570b\u7f8e\u5143\u591a\u5c11\u9322\uff1f"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[convert_currency(base_currency=\"\\u4e16\\u754c\", target_currency=\"USD\", amount=20000)]", "model_result_decoded": [{"convert_currency": {"base_currency": "\u4e16\u754c", "target_currency": "USD", "amount": 20000}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}
{"id": "simple_398", "model_name": "uiuc-convai_CoALM-8B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum_name': '\u5df4\u597d\u4eac\u65c5\u884c\u5fd1'. Expected one of ['Metropolitan Museum of Art', 'The Met']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_398", "question": [[{"role": "user", "content": "\u9031\u516d\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "required": ["museum_name", "day"]}}]}, "model_result_raw": "[get_museum_hours(museum_name=\"\\u5df4\\u597d\\u4eac\\u65c5\\u884c\\u5fd1\", day=\"Saturday\")]", "model_result_decoded": [{"get_museum_hours": {"museum_name": "\u5df4\u597d\u4eac\u65c5\u884c\u5fd1", "day": "Saturday"}}], "possible_answer": [{"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met"], "day": ["Saturday"]}}]}