{"accuracy": 0.645, "correct_count": 129, "total_count": 200}
{"id": "multiple_2", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'country': '\u4eac\u65c5\u884c'. Expected one of ['Brazil']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_2", "question": [[{"role": "user", "content": "\u5df4\u897f\u7684\u9996\u90fd\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "country_info.largest_city", "description": "Fetch the largest city of a specified country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.capital", "description": "Fetch the capital city of a specified country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}, {"name": "country_info.population", "description": "Fetch the current population of a specified country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Name of the country."}}, "required": ["country"]}}]}, "model_result_raw": "[country_info.capital(country=\"\\u4eac\\u65c5\\u884c\")]", "model_result_decoded": [{"country_info.capital": {"country": "\u4eac\u65c5\u884c"}}], "possible_answer": [{"country_info.capital": {"country": ["Brazil"]}}]}
{"id": "multiple_5", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'coordinates': [46.603354, 1.88888334]. Expected one of [[46.603354, 1.888334]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_5", "question": [[{"role": "user", "content": "2019\u5e7412\u670813\u65e5\uff0c\u5750\u6a1946.603354,1.888883340\u7684\u98a8\u901f\u548c\u6eab\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "weather.get_by_city_date", "description": "Retrieves the historical weather data based on city and date.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city for which to retrieve the weather."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["city", "date"]}}, {"name": "weather.get_forecast_by_coordinates", "description": "Get the weather forecast for a specific geographical coordinates.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "tuple", "items": {"type": "float"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "days_ahead": {"type": "integer", "description": "Number of days to forecast from current date (optional, default is 7)."}}, "required": ["coordinates"]}}, {"name": "weather.get_by_coordinates_date", "description": "Retrieves the historical weather data based on coordinates and date.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "tuple", "items": {"type": "float"}, "description": "The geographical coordinates for which to retrieve the weather. The first element of the tuple is the latitude and the second is the longitude."}, "date": {"type": "string", "format": "date", "description": "The date for which to retrieve the historical weather data in the format YYYY-MM-DD."}}, "required": ["coordinates", "date"]}}]}, "model_result_raw": "[weather.get_by_coordinates_date(coordinates=(46.603354, 1.88888334), date=\"2019-12-13\")]", "model_result_decoded": [{"weather.get_by_coordinates_date": {"coordinates": [46.603354, 1.88888334], "date": "2019-12-13"}}], "possible_answer": [{"weather.get_by_coordinates_date": {"coordinates": [[46.603354, 1.888334]], "date": ["2019-12-13"]}}]}
{"id": "multiple_7", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "\u5982\u4f55\u8a55\u4f30\u904e\u53bb\u5341\u5e74\u4f86\u9e7f\u7684\u4eba\u53e3\u589e\u9577\u53ca\u5176\u5c0d\u83ef\u76db\u9813\u5dde\u6797\u5730\u7684\u5f71\u97ff\uff1f"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "[wildlife_population.assess_growth(species=\"deer\", location=\"Washington state\", duration=10), ecological_impact.analyze(species=\"deer\", ecosystem=\"forest\", location=\"Washington state\", timeframe=10)]", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "forest", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_9", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Unexpected dict key parameter: '\u6578\u5b78'.", "Missing dict key parameter: 'math'."], "error_type": "value_error:dict_key", "prompt": {"id": "multiple_9", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5177\u6709\u9019\u4e9b\u5206\u6578\u7684\u5b78\u751f\u7d04\u7ff0\u7684\u5e73\u5747\u6210\u7e3e{'\u6578\u5b78'\uff1a90\uff0c'\u79d1\u5b78'\uff1a75\uff0c'\u6b77\u53f2'\uff1a82\uff0c'\u97f3\u6a02'\uff1a89}\u904d\u5e03\u4e0d\u540c\u7684\u4e3b\u984c\u3002"}]], "function": [{"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}]}, "model_result_raw": "[calculate_average(gradeDict={'\u6578\u5b78': 90, '\u79d1\u5b78': 75, '\u6b77\u53f2': 82, '\u97f3\u6a02': 89})]", "model_result_decoded": [{"calculate_average": {"gradeDict": {"\u6578\u5b78": 90, "\u79d1\u5b78": 75, "\u6b77\u53f2": 82, "\u97f3\u6a02": 89}}}], "possible_answer": [{"calculate_average": {"gradeDict": [{"math": [90], "science": [75], "history": [82], "music": [89]}]}}]}
{"id": "multiple_10", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'db_name': 'personal_DATA'. Expected one of ['employees']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_10", "question": [[{"role": "user", "content": "\u6211\u9700\u8981\u5f9e\u500b\u4eba_DATA\u8868\u4e0a\u7684\u54e1\u5de5\u6578\u64da\u5eab\u4e2d\u522a\u9664\u4e00\u4e9b\u5217\u3002\u6211\u60f3\u522a\u9664\u4ed6\u5011\u7684\u96fb\u5b50\u90f5\u4ef6\u5730\u5740\u548c\u793e\u6703\u4fdd\u96aa\u865f\uff0c\u4ee5\u5c0a\u91cd\u96b1\u79c1\u3002"}]], "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "[database.modify_columns(db_name=\"personal_DATA\", table=\"employees\", operation=\"delete\", columns=[\"email\", \"social_security_number\"])]", "model_result_decoded": [{"database.modify_columns": {"db_name": "personal_DATA", "table": "employees", "operation": "delete", "columns": ["email", "social_security_number"]}}], "possible_answer": [{"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}]}
{"id": "multiple_12", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'year1_revenue': 100000. Expected one of [1000000]."], "error_type": "value_error:others", "prompt": {"id": "multiple_12", "question": [[{"role": "user", "content": "\u516c\u53f8\u201c Tech Inc\u201d\u7684\u5e74\u5ea6\u589e\u9577\u7387\u662f\u591a\u5c11\uff0c2019\u5e74\u6536\u5165\u70ba100\u842c\u7f8e\u5143\uff0c2020\u5e74\u7684\u6536\u5165\u70ba120\u842c\u7f8e\u5143\uff1f"}]], "function": [{"name": "corporate_finance.calculate_YOY_growth_rate", "description": "Calculate the year over year (YOY) growth rate for a company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company for which to calculate the YOY growth rate."}, "year1": {"type": "integer", "description": "The initial year."}, "year1_revenue": {"type": "integer", "description": "The revenue for the initial year."}, "year2": {"type": "integer", "description": "The subsequent year."}, "year2_revenue": {"type": "integer", "description": "The revenue for the subsequent year."}}, "required": ["company_name", "year1", "year1_revenue", "year2", "year2_revenue"]}}, {"name": "financial_ratios.calculate_ROE", "description": "Calculate the return on equity (ROE) for a company.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "float", "description": "Net income for the period."}, "shareholder_equity": {"type": "float", "description": "Average shareholder equity for the period."}}, "required": ["net_income", "shareholder_equity"]}}, {"name": "financial_ratios.calculate_ROA", "description": "Calculate the return on assets (ROA) for a company.", "parameters": {"type": "dict", "properties": {"net_income": {"type": "float", "description": "Net income for the period."}, "total_assets": {"type": "float", "description": "Total average assets for the period."}}, "required": ["net_income", "total_assets"]}}]}, "model_result_raw": "[corporate_finance.calculate_YOY_growth_rate(company_name=\"Tech Inc\", year1=2019, year1_revenue=100000, year2=2020, year2_revenue=120000)]", "model_result_decoded": [{"corporate_finance.calculate_YOY_growth_rate": {"company_name": "Tech Inc", "year1": 2019, "year1_revenue": 100000, "year2": 2020, "year2_revenue": 120000}}], "possible_answer": [{"corporate_finance.calculate_YOY_growth_rate": {"company_name": ["Tech Inc"], "year1": [2019], "year1_revenue": [1000000], "year2": [2020], "year2_revenue": [1200000]}}]}
{"id": "multiple_15", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'coordinates': [40.7128, -74.006]. Expected one of [[43.653225, -79.383186]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_15", "question": [[{"role": "user", "content": "\u9451\u65bc\u5b83\u7684\u592a\u967d\u80fd\u96fb\u6c60\u677f\u9762\u7a4d\u70ba80000\u5e73\u65b9\u82f1\u5c3a\uff0c\u572812\u6708\uff0c\u592a\u967d\u80fd\u8fb2\u5834\u7684\u4f4d\u7f6e\u592a\u967d\u80fd\u8fb2\u5834\u7684\u6f5b\u529b\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "solarFarm.potential", "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates of the location of the solar farm."}, "panelArea": {"type": "integer", "description": "The total solar panel area in square feet at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output. Default to January", "optional": true}}, "required": ["coordinates", "panelArea"]}}, {"name": "windFarm.potential", "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates of the location of the wind farm."}, "turbineCount": {"type": "integer", "description": "The total number of wind turbines at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output. Default to January", "optional": true}}, "required": ["coordinates", "turbineCount"]}}]}, "model_result_raw": "[solarFarm.potential(coordinates=[40.7128, -74.006], panelArea=80000, month=\"December\")]", "model_result_decoded": [{"solarFarm.potential": {"coordinates": [40.7128, -74.006], "panelArea": 80000, "month": "December"}}], "possible_answer": [{"solarFarm.potential": {"coordinates": [[43.653225, -79.383186]], "panelArea": [80000], "month": ["December", "Dec"]}}]}
{"id": "multiple_16", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'probability': 0.5. Expected one of [0.95]."], "error_type": "value_error:others", "prompt": {"id": "multiple_16", "question": [[{"role": "user", "content": "\u5728\u63a5\u4e0b\u4f86\u7684100\u4ee3\u4e2d\uff0c\u7dad\u6301\u91ce\u751f\u8001\u864e\u7a2e\u7fa4\u7684\u907a\u50b3\u591a\u6a23\u6027\u7684\u6700\u5c0f\u4eba\u53e3\u898f\u6a21\uff08NE\uff09\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "species_distribution_modeling.project_range_shift", "description": "Predict the potential future geographic distribution of a species under a specified climate change scenario.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species of animal."}, "climate_scenario": {"type": "string", "description": "The name of the climate change scenario."}, "future_time": {"type": "integer", "description": "The future time in years for the prediction.", "default": 100}}, "required": ["species", "climate_scenario"]}}, {"name": "population_genetics.calculate_ne", "description": "Calculate the effective population size necessary to maintain genetic diversity in a wild animal population for a specified number of generations with a given probability.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species of wild animal."}, "generations": {"type": "integer", "description": "The number of generations for which to maintain the genetic diversity."}, "probability": {"type": "float", "description": "The probability of maintaining genetic diversity."}}, "required": ["species", "generations", "probability"]}}, {"name": "ecology.calculate_carrying_capacity", "description": "Calculate the maximum population size of the species that the environment can sustain indefinitely.", "parameters": {"type": "dict", "properties": {"habitat_area": {"type": "float", "description": "The area of the habitat in square kilometers."}, "species": {"type": "string", "description": "The species of animal."}, "productivity": {"type": "float", "description": "The biological productivity of the habitat in animals per square kilometer per year."}}, "required": ["habitat_area", "species", "productivity"]}}]}, "model_result_raw": "[population_genetics.calculate_ne(species=\"tiger\", generations=100, probability=0.5)]", "model_result_decoded": [{"population_genetics.calculate_ne": {"species": "tiger", "generations": 100, "probability": 0.5}}], "possible_answer": [{"population_genetics.calculate_ne": {"species": ["wild tiger", "tiger"], "generations": [100], "probability": [0.95]}}]}
{"id": "multiple_18", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_18", "question": [[{"role": "user", "content": "\u8ab0\u662f\u4e3b\u8981\u53c3\u8207\u8005\uff1f\u65af\u5927\u6797\u683c\u52d2\u6230\u5f79\u7684\u4f4d\u7f6e\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "european_history.war_details", "description": "Get details of a specific historical European war.", "parameters": {"type": "dict", "properties": {"war": {"type": "string", "description": "Name of the war"}}, "required": ["war"]}}, {"name": "european_history.leader_info", "description": "Get information about a specific historical leader in European history.", "parameters": {"type": "dict", "properties": {"leader": {"type": "string", "description": "Name of the leader"}}, "required": ["leader"]}}, {"name": "european_history.battle_details", "description": "Get details of a specific historical European battle.", "parameters": {"type": "dict", "properties": {"battle": {"type": "string", "description": "Name of the battle"}}, "required": ["battle"]}}]}, "model_result_raw": "The query does not provide sufficient information to call any of the functions. Specifically, it lacks the required arguments for the functions:\n\n1. **european_history.war_details**: The query does not provide the name of the war.\n2. **european_history.leader_info**: The query does not provide the name of the leader.\n3. **european_history.battle_details**: The query does not provide the name of the battle.\n\nTherefore, I cannot proceed with the function calls.", "possible_answer": [{"european_history.battle_details": {"battle": ["Battle of Stalingrad", "Stalingrad"]}}]}
{"id": "multiple_19", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'religion': '\u57fa\u7763\u6559'. Expected one of ['Christianity']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_19", "question": [[{"role": "user", "content": "\u57fa\u7763\u6559\u6b77\u53f2\u4e0a\u7684\u4e09\u500b\u5049\u5927\u5206\u88c2\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "religion_history.get_councils", "description": "Retrieves a list of major councils in a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the councils."}, "count": {"type": "integer", "description": "Number of top councils to retrieve.", "default": 3}}, "required": ["religion", "count"]}}, {"name": "religion_history.get_reformations", "description": "Retrieves a list of major reformations in a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the reformations."}, "count": {"type": "integer", "description": "Number of top reformations to retrieve.", "default": 3}}, "required": ["religion", "count"]}}, {"name": "religion_history.get_schisms", "description": "Retrieves a list of major schisms in a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the schisms."}, "count": {"type": "integer", "description": "Number of top schisms to retrieve."}}, "required": ["religion", "count"]}}]}, "model_result_raw": "[religion_history.get_schisms(religion=\"\u57fa\u7763\u6559\", count=3)]", "model_result_decoded": [{"religion_history.get_schisms": {"religion": "\u57fa\u7763\u6559", "count": 3}}], "possible_answer": [{"religion_history.get_schisms": {"religion": ["Christianity"], "count": [3]}}]}
{"id": "multiple_22", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Function name 'sports_data.basketball.most_points_single_game' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_22", "question": [[{"role": "user", "content": "\u55ae\u4eba\u5728NBA\u6bd4\u8cfd\u4e2d\u5f97\u5206\u6700\u591a\u7684\u8a18\u9304\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "sports_data.basketball.most_points_single_season", "description": "Returns the record for the most points scored by a single player in one season of NBA, including the player name, points scored, and season.", "parameters": {"type": "dict", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_career", "description": "Returns the record for the most points scored by a player in his career in NBA, including the player name, total points scored, and career span.", "parameters": {"type": "dict", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}, {"name": "sports_data.basketball.most_points_single_game", "description": "Returns the record for the most points scored by a single player in one game of NBA, including the player name, points scored, and game date.", "parameters": {"type": "dict", "properties": {"league": {"type": "string", "description": "The specific basketball league for which to fetch the record. In this case, 'NBA'."}}, "required": ["league"]}}]}, "model_result_raw": "[sports_data.basketball.most_points_single_season(league=\"NBA\")]", "model_result_decoded": [{"sports_data.basketball.most_points_single_season": {"league": "NBA"}}], "possible_answer": [{"sports_data.basketball.most_points_single_game": {"league": ["NBA"]}}]}
{"id": "multiple_23", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'stats_fields': ['assists', 'rebounds', 'minutes']. Expected one of [['points per game', 'assists', 'minutes per game'], ['points per game', 'minutes per game', 'assists'], ['assists', 'points per game', 'minutes per game'], ['assists', 'minutes per game', 'points per game'], ['minutes per game', 'points per game', 'assists'], ['minutes per game', 'assists', 'points per game'], ['points', 'assists', 'minutes'], ['points', 'minutes', 'assists'], ['assists', 'points', 'minutes'], ['assists', 'minutes', 'points'], ['minutes', 'points', 'assists'], ['minutes', 'assists', 'points'], ['points_per_game', 'assists', 'minutes_per_game'], ['points_per_game', 'minutes_per_game', 'assists'], ['assists', 'points_per_game', 'minutes_per_game'], ['assists', 'minutes_per_game', 'points_per_game'], ['minutes_per_game', 'points_per_game', 'assists'], ['minutes_per_game', 'assists', 'points_per_game']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_23", "question": [[{"role": "user", "content": "\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\uff08Lebron James\uff09\u7684\u76ee\u524d\u7d71\u8a08\u6578\u64da\u662f\u4ec0\u9ebc\uff0c\u5305\u62ec\u5834\u5747\u52a9\u653b\uff0c\u52a9\u653b\u548c\u6bcf\u5834\u6bd4\u8cfd\u5206\u9418\u3002"}]], "function": [{"name": "basketball.player_stats.get", "description": "Get current statistics for a specified basketball player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes.", "items": {"type": "string"}}}, "required": ["player_name", "stats_fields"]}}, {"name": "basketball.game_stats.get", "description": "Get the detailed statistical data from a specific basketball game", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "One of the competing teams in the game."}, "team2": {"type": "string", "description": "One of the competing teams in the game."}, "date": {"type": "string", "description": "The date when the game occurred."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers. Default to empty list", "items": {"type": "string"}}}, "required": ["team1", "team2", "date"]}}, {"name": "basketball.team_stats.get", "description": "Get current statistics for a specific basketball team", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate.", "items": {"type": "string"}}}, "required": ["team_name", "stats_fields"]}}]}, "model_result_raw": "[basketball.player_stats.get(player_name=\"Lebron James\", stats_fields=[\"assists\", \"rebounds\", \"minutes\"])]", "model_result_decoded": [{"basketball.player_stats.get": {"player_name": "Lebron James", "stats_fields": ["assists", "rebounds", "minutes"]}}], "possible_answer": [{"basketball.player_stats.get": {"player_name": ["LeBron James"], "stats_fields": [["points per game", "assists", "minutes per game"], ["points per game", "minutes per game", "assists"], ["assists", "points per game", "minutes per game"], ["assists", "minutes per game", "points per game"], ["minutes per game", "points per game", "assists"], ["minutes per game", "assists", "points per game"], ["points", "assists", "minutes"], ["points", "minutes", "assists"], ["assists", "points", "minutes"], ["assists", "minutes", "points"], ["minutes", "points", "assists"], ["minutes", "assists", "points"], ["points_per_game", "assists", "minutes_per_game"], ["points_per_game", "minutes_per_game", "assists"], ["assists", "points_per_game", "minutes_per_game"], ["assists", "minutes_per_game", "points_per_game"], ["minutes_per_game", "points_per_game", "assists"], ["minutes_per_game", "assists", "points_per_game"]]}}]}
{"id": "multiple_25", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'game_title': '\u5d0e\u4e48\u6837\u5fd1\u597d'. Expected one of ['Assassins Creed Valhalla']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_25", "question": [[{"role": "user", "content": "\u5728\u7f8e\u570bPlaystation\u5546\u5e97\u4e2d\uff0c\u904a\u6232\u201c\u523a\u5ba2\u4fe1\u689d\u74e6\u723e\u54c8\u62c9\u201d\u904a\u6232\u6700\u4fbf\u5b9c\u7684\u50f9\u683c\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "video_games.store_currency", "description": "Fetches the currency used in a specific region in a gaming platform store.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan", "default": "True"}}, "required": ["platform"]}}, {"name": "video_games.on_sale", "description": "Checks if a particular game is currently on sale in a specific gaming platform store and in a specific region.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan. Default United States", "optional": "True"}}, "required": ["game_title", "platform"]}}, {"name": "video_games.store_price", "description": "Fetches the selling price of a specified game in a particular gaming platform store and in a specific region.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game"}, "platform": {"type": "string", "description": "The gaming platform e.g. PlayStation, Xbox, Nintendo Switch"}, "region": {"type": "string", "description": "The region e.g. United States, United Kingdom, Japan. Default to United States"}}, "required": ["game_title", "platform"]}}]}, "model_result_raw": "[video_games.store_price(game_title=\"\\u5d0e\\u4e48\\u6837\\u5fd1\\u597d\", platform=\"Playstation\", region=\"United States\")]", "model_result_decoded": [{"video_games.store_price": {"game_title": "\u5d0e\u4e48\u6837\u5fd1\u597d", "platform": "Playstation", "region": "United States"}}], "possible_answer": [{"video_games.store_price": {"game_title": ["Assassins Creed Valhalla"], "platform": ["PlayStation", "PS"], "region": ["United States", "US", ""]}}]}
{"id": "multiple_27", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'start_location': 'France Paris'. Expected one of ['Paris, France', 'Paris']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_27", "question": [[{"role": "user", "content": "\u901a\u904e\u4f7f\u7528\u516c\u5171\u4ea4\u901a\u5de5\u5177\u5f9e\u6cd5\u570b\u5df4\u9ece\u5230\u610f\u5927\u5229\u7f85\u99ac\u7684\u6700\u77ed\u9053\u8def\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "maps.route_times", "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.", "parameters": {"type": "dict", "properties": {"route": {"type": "string", "description": "The string representation of the route."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["route"]}}, {"name": "maps.shortest_path", "description": "Find the shortest path from one location to another by using a specific mode of transportation.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The name or coordinates of the start location."}, "end_location": {"type": "string", "description": "The name or coordinates of the end location."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[maps.shortest_path(start_location=\"France Paris\", end_location=\"Italy Rome\", mode=\"transit\")]", "model_result_decoded": [{"maps.shortest_path": {"start_location": "France Paris", "end_location": "Italy Rome", "mode": "transit"}}], "possible_answer": [{"maps.shortest_path": {"start_location": ["Paris, France", "Paris"], "end_location": ["Rome, Italy", "Rome"], "mode": ["transit"]}}]}
{"id": "multiple_38", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_38", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u5e02\u7684\u5716\u66f8\u9928\u5206\u652f\u6a5f\u69cb\u4e2d\u627e\u5230\u4e00\u672c\u66f8\u201c\u7149\u91d1\u8853\u58eb\u201d\u3002"}]], "function": [{"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "dict", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional). Default is ''"}}, "required": ["book_id", "branch_id"]}}, {"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "dict", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default is false"}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional). Default is ''"}}, "required": ["book_name", "city"]}}]}, "model_result_raw": "[library.search_book(book_name=\"\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u5a38\\u", "possible_answer": [{"library.search_book": {"book_name": ["The Alchemist"], "city": ["New York", "New York, NY", "New York City", "NYC", "NY"], "availability": ["", false], "genre": [""]}}]}
{"id": "multiple_44", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'planet': '\u706b\u661f'. Expected one of ['Mars']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_44", "question": [[{"role": "user", "content": "\u5982\u679c\u6211\u5728\u5730\u7403\u4e0a\u7684\u9ad4\u91cd\u662f70\u516c\u65a4\uff0c\u6211\u5c07\u5c0d\u706b\u661f\u9032\u884c\u591a\u5c11\u6b0a\u8861\uff1f"}]], "function": [{"name": "unit_conversion.convert", "description": "Convert a value from one unit to another.", "parameters": {"type": "dict", "properties": {"value": {"type": "float", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}, {"name": "currency_conversion", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "float", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "calculate.weight_in_space", "description": "Calculate your weight on different planets given your weight on earth", "parameters": {"type": "dict", "properties": {"weight_earth_kg": {"type": "integer", "description": "Your weight on Earth in Kilograms."}, "planet": {"type": "string", "description": "The planet you want to know your weight on."}}, "required": ["weight_earth_kg", "planet"]}}]}, "model_result_raw": "[calculate.weight_in_space(weight_earth_kg=70, planet=\"\u706b\u661f\")]", "model_result_decoded": [{"calculate.weight_in_space": {"weight_earth_kg": 70, "planet": "\u706b\u661f"}}], "possible_answer": [{"calculate.weight_in_space": {"weight_earth_kg": [70], "planet": ["Mars"]}}]}
{"id": "multiple_49", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'principle_amount': 1000. Expected one of [1500]."], "error_type": "value_error:others", "prompt": {"id": "multiple_49", "question": [[{"role": "user", "content": "\u57282\u5e74\u7684\u6642\u9593\u5167\u8a08\u7b971500\u6b21\u7684\u8907\u5408\u5229\u606f\uff0c\u6bcf\u5e74\u5229\u7387\u70ba2.5\uff05\u3002"}]], "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "integer", "description": "The principle amount that is invested."}, "duration": {"type": "integer", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "float", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}]}, "model_result_raw": "[calc_Compound_Interest(principle_amount=1000, duration=2, annual_rate=2.5, compound_freq=1500)]", "model_result_decoded": [{"calc_Compound_Interest": {"principle_amount": 1000, "duration": 2, "annual_rate": 2.5, "compound_freq": 1500}}], "possible_answer": [{"calc_Compound_Interest": {"principle_amount": [1500], "duration": [2], "annual_rate": [2.5], "compound_freq": ["", 1]}}]}
{"id": "multiple_51", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5728\u5169\u500b\u9ab0\u5b50\u4e0a\u6efe\u52d57\u7e3d\u548c\u7684\u6982\u7387\u3002"}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "[dice_roll_probability(desired_sum=7, sides_per_die=6)]", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_58", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'expertise': 'Marriage'. Expected one of ['Divorce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_58", "question": [[{"role": "user", "content": "\u5728\u6d1b\u6749\u78ef\u5c0b\u627e\u96e2\u5a5a\u6cd5\u5f8b\u5c08\u5bb6"}]], "function": [{"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}, {"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Marriage', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}]}, "model_result_raw": "[lawyer.search(location=\"Los Angeles, CA\", expertise=\"Marriage\")]", "model_result_decoded": [{"lawyer.search": {"location": "Los Angeles, CA", "expertise": "Marriage"}}], "possible_answer": [{"lawyer.search": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "expertise": ["Divorce"]}}]}
{"id": "multiple_60", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_60", "question": [[{"role": "user", "content": "7\u5929\u540e\uff0c\u7d10\u7d04\u5e02\u7684\u6fd5\u5ea6\u548c\u6eab\u5ea6\u5c07\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "event_search", "description": "Search for events happening in a specific location for a future date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the event information for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the event information."}}, "required": ["location", "days"]}}, {"name": "movie_showtimes", "description": "Retrieve movie showtimes for a specific location and for a future date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the movie showtimes for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the showtimes."}}, "required": ["location", "days"]}}, {"name": "humidity_temperature_forecast", "description": "Retrieve forecast of humidity and temperature for a specific location and for a future date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity and temperature forecast for."}, "days": {"type": "integer", "description": "Number of future days for which to retrieve the forecast."}}, "required": ["location", "days"]}}]}, "model_result_raw": "[humidity_temperature_forecast(location=\"New York\", days=7)]", "model_result_decoded": [{"humidity_temperature_forecast": {"location": "New York", "days": 7}}], "possible_answer": [{"humidity_temperature_forecast": {"location": ["New York City", "NYC"], "days": [7]}}]}
{"id": "multiple_61", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'specialization': 'space garden design'. Expected one of ['small space garden design']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_61", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u4f4d\u5728\u6ce2\u7279\u862d\u7684\u5c0f\u592a\u7a7a\u82b1\u5712\u8a2d\u8a08\u4e2d\u7d93\u6b77\u4e865\u5e74\u7684\u666f\u89c0\u8a2d\u8a08\u5e2b"}]], "function": [{"name": "home_renovation_expert.find_specialty", "description": "Search for a home renovation expert based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise, such as kitchen or bathroom renovation."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}, {"name": "landscape_architect.find_specialty", "description": "Search for a landscape architect based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "[landscape_architect.find_specialty(location=\"Portland, OR\", specialization=\"space garden design\", years_experience=5)]", "model_result_decoded": [{"landscape_architect.find_specialty": {"location": "Portland, OR", "specialization": "space garden design", "years_experience": 5}}], "possible_answer": [{"landscape_architect.find_specialty": {"location": ["Portland", "Portland, OR"], "specialization": ["small space garden design"], "years_experience": [5]}}]}
{"id": "multiple_64", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': '\u6771\u4eac\u65c5\u884c'. Expected one of ['Tokyo']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_64", "question": [[{"role": "user", "content": "\u7d66\u62112023\u5e746\u67081\u65e5\u660e\u5929\u6771\u4eac\u7684UV\u7d22\u5f15\u3002"}]], "function": [{"name": "uv_index.get_future", "description": "Retrieve UV index data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the UV index for."}, "date": {"type": "string", "description": "The date for the UV index, in the format mm-dd-yyyy."}}, "required": ["location", "date"]}}, {"name": "rainfall_prediction", "description": "Retrieve rainfall data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the rainfall prediction for."}, "date": {"type": "string", "description": "The date for the rainfall prediction, in the format mm/dd/yyyy.'"}}, "required": ["location", "date"]}}, {"name": "snowfall_prediction", "description": "Retrieve snowfall data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the snowfall prediction for."}, "date": {"type": "string", "description": "The date for the snowfall prediction, in the format mm-dd-yyyy."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[uv_index.get_future(location=\"\\u6771\\u4eac\\u65c5\\u884c\", date=\"06-01-2023\")]", "model_result_decoded": [{"uv_index.get_future": {"location": "\u6771\u4eac\u65c5\u884c", "date": "06-01-2023"}}], "possible_answer": [{"uv_index.get_future": {"location": ["Tokyo"], "date": ["06-01-2023"]}}]}
{"id": "multiple_65", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'origin': 'New York'. Expected one of ['New York City', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_65", "question": [[{"role": "user", "content": "\u627e\u5230\u7d10\u7d04\u5e02\u548c\u6d1b\u6749\u78ef\u4e4b\u9593\u7684\u8ddd\u96e2\u3002"}]], "function": [{"name": "timezones.get_difference", "description": "Find the time difference between two cities.", "parameters": {"type": "dict", "properties": {"city1": {"type": "string", "description": "The first city."}, "city2": {"type": "string", "description": "The second city."}}, "required": ["city1", "city2"]}}, {"name": "geodistance.find", "description": "Find the distance between two cities on the globe.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "The originating city for the distance calculation."}, "destination": {"type": "string", "description": "The destination city for the distance calculation."}, "unit": {"type": "string", "default": "miles", "description": "The unit of measure for the distance calculation."}}, "required": ["origin", "destination"]}}, {"name": "flights.search", "description": "Find flights between two cities.", "parameters": {"type": "dict", "properties": {"from_city": {"type": "string", "description": "The city to depart from."}, "to_city": {"type": "string", "description": "The city to arrive at."}, "date": {"type": "string", "default": "next monday", "description": "The date to fly."}}, "required": ["from_city", "to_city"]}}]}, "model_result_raw": "[geodistance.find(origin=\"New York\", destination=\"Los Angeles\")]", "model_result_decoded": [{"geodistance.find": {"origin": "New York", "destination": "Los Angeles"}}], "possible_answer": [{"geodistance.find": {"origin": ["New York City", "NYC"], "destination": ["Los Angeles", "LA"], "unit": ["miles", ""]}}]}
{"id": "multiple_67", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'text': '\u4f60\u597d\uff0c\u4f60\u597d\u4e48\u6837\uff1f'. Expected one of ['Hello, how are you?']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_67", "question": [[{"role": "user", "content": "\u7ffb\u8b6f\u4f60\u597d\uff0c\u4f60\u597d\u55ce\uff1f\u5f9e\u82f1\u8a9e\u5230\u6cd5\u8a9e\u3002"}]], "function": [{"name": "translate", "description": "Translate text from a specified source language to a specified target language.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text to be translated."}, "source_language": {"type": "string", "description": "The language the text is currently in."}, "target_language": {"type": "string", "description": "The language the text will be translated to."}}, "required": ["text", "source_language", "target_language"]}}, {"name": "sentiment_analysis", "description": "Analyze the sentiment of a specified text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text whose sentiment is to be analyzed."}}, "required": ["text"]}}, {"name": "word_count", "description": "Count the number of words in the given text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text that the number of words is to be calculated."}}, "required": ["text"]}}]}, "model_result_raw": "[translate(text=\"\\u4f60\\u597d\\uff0c\\u4f60\\u597d\\u4e48\\u6837\\uff1f\", source_language=\"en\", target_language=\"fr\")]", "model_result_decoded": [{"translate": {"text": "\u4f60\u597d\uff0c\u4f60\u597d\u4e48\u6837\uff1f", "source_language": "en", "target_language": "fr"}}], "possible_answer": [{"translate": {"text": ["Hello, how are you?"], "source_language": ["English"], "target_language": ["French"]}}]}
{"id": "multiple_68", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'genre': 'history'. Expected one of ['Historical Fiction', 'historical fiction']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_68", "question": [[{"role": "user", "content": "\u6211\u53ef\u4ee5\u5728\u7d10\u7d04\u516c\u5171\u5716\u66f8\u9928\u627e\u5230\u4e00\u672c\u6b77\u53f2\u5c0f\u8aaa\u55ce\uff1f"}]], "function": [{"name": "library.search_books", "description": "Search for a book in a given library with optional parameters", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name or city of library"}, "genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["location", "genre"]}}, {"name": "google.books_search", "description": "Search for a book in the Google Books library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}, {"name": "openlibrary.books_search", "description": "Search for a book in the Open Library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}]}, "model_result_raw": "[library.search_books(location=\"New York Public Library\", genre=\"history\")]", "model_result_decoded": [{"library.search_books": {"location": "New York Public Library", "genre": "history"}}], "possible_answer": [{"library.search_books": {"location": ["New York", "New York, NY", "New York City", "New York City, NY", "NYC", "New York public library"], "genre": ["Historical Fiction", "historical fiction"], "title": [""]}}]}
{"id": "multiple_78", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'museum': '\u8a00\u5fd1\u6700\u8fd1\u5fd1\u6700\u8fd1'. Expected one of ['Natural History Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_78", "question": [[{"role": "user", "content": "\u8b93\u6211\u4e86\u89e3\u6709\u95dc\u502b\u6566\u81ea\u7136\u6b77\u53f2\u535a\u7269\u9928\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u6642\u9593\uff0c\u5c55\u89bd\u548c\u53ef\u8a2a\u554f\u6027\u3002"}]], "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "[museum_info(museum=\"\\u8a00\\u5fd1\\u6700\\u8fd1\\u5fd1\\u6700\\u8fd1\", city=\"\\u4e0a\\u597d\")]", "model_result_decoded": [{"museum_info": {"museum": "\u8a00\u5fd1\u6700\u8fd1\u5fd1\u6700\u8fd1", "city": "\u4e0a\u597d"}}], "possible_answer": [{"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}]}
{"id": "multiple_79", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'museum_name': '\u5f8e\u4eac\u65c5\u884c\u5fd1\u4e48\u6837'. Expected one of ['Museum of Modern Art', 'MOMA', 'Museum of Modern Art, New York']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_79", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u73fe\u4ee3\u85dd\u8853\u535a\u7269\u9928\u4e2d\u627e\u5230\u5373\u5c07\u5230\u4f86\u7684\u6708\u4efd\u7684\u85dd\u8853\u5c55\u89bd\u3002"}]], "function": [{"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants. Default 'any'", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}, {"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details. Default 1"}}, "required": ["museum_name"]}}]}, "model_result_raw": "[exhibition_info(museum_name=\"\\u5f8e\\u4eac\\u65c5\\u884c\\u5fd1\\u4e48\\u6837\", month=1)]", "model_result_decoded": [{"exhibition_info": {"museum_name": "\u5f8e\u4eac\u65c5\u884c\u5fd1\u4e48\u6837", "month": 1}}], "possible_answer": [{"exhibition_info": {"museum_name": ["Museum of Modern Art", "MOMA", "Museum of Modern Art, New York"], "month": ["", 1]}}]}
{"id": "multiple_80", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u5bb6\u7576\u5730\u7684\u5409\u4ed6\u5e97\uff0c\u8a72\u5546\u5e97\u9084\u5728\u7d0d\u4ec0\u7dad\u723e\u63d0\u4f9b\u5c0f\u63d0\u7434\u8ab2\u3002"}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[music_shop.find_nearby(location=\"Nashville, TN\", services=[\"Guitar Lessons\", \"Violin Lessons\"])]", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_81", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_81", "question": [[{"role": "user", "content": "\u9810\u8a02\u5373\u5c07\u8209\u884c\u7684\u7d10\u7d04Eminem\u97f3\u6a02\u6703\u7684\u9580\u7968\uff0c\u6211\u60f3\u8b93\u90a3\u4e00\u5f35\u5f8c\u53f0\u9032\u5165\u3002"}]], "function": [{"name": "concert.book_ticket", "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist for the concert."}, "location": {"type": "string", "description": "City where the concert will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Backstage Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the concert. Default empty array"}}, "required": ["artist", "location"]}}, {"name": "festival.book_ticket", "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.", "parameters": {"type": "dict", "properties": {"festival": {"type": "string", "description": "Name of the festival."}, "location": {"type": "string", "description": "City where the festival will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Camping Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the festival. Default empty array"}}, "required": ["festival", "location"]}}]}, "model_result_raw": "[concert.book_ticket(artist=\"Eminem\", location=\"New York\", add_ons=[\"Backstage Pass\"])]", "model_result_decoded": [{"concert.book_ticket": {"artist": "Eminem", "location": "New York", "add_ons": ["Backstage Pass"]}}], "possible_answer": [{"concert.book_ticket": {"artist": ["Eminem"], "location": ["New York City", "NYC"], "add_ons": [["Backstage Pass"]]}}]}
{"id": "multiple_83", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'player_name': '\u4eac\u5fd1\u597d'. Expected one of ['Lionel Messi']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_83", "question": [[{"role": "user", "content": "\u8fc4\u4eca\u70ba\u6b62\uff0c\u840a\u6602\u5167\u723e\u00b7\u6885\u897f\uff08Lionel Messi\uff09\u70ba\u5df4\u585e\u7f85\u90a3\u9032\u7403\u6709\u591a\u5c11\u500b\u9032\u7403\uff1f"}]], "function": [{"name": "team_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the football team."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["team_name"]}}, {"name": "league_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football league.", "parameters": {"type": "dict", "properties": {"league_name": {"type": "string", "description": "The name of the football league."}, "season": {"type": "string", "description": "Season for which to fetch stats (optional). Default ''"}}, "required": ["league_name"]}}, {"name": "player_stats.get_all_time_goals", "description": "Fetch all-time goals scored by a particular football player for a specified team.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the football player."}, "team_name": {"type": "string", "description": "The name of the team for which player has played."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["player_name", "team_name"]}}]}, "model_result_raw": "[player_stats.get_all_time_goals(player_name=\"\\u4eac\\u5fd1\\u597d\", team_name=\"\\u5b98\\u4e16\\u754c\")]", "model_result_decoded": [{"player_stats.get_all_time_goals": {"player_name": "\u4eac\u5fd1\u597d", "team_name": "\u5b98\u4e16\u754c"}}], "possible_answer": [{"player_stats.get_all_time_goals": {"player_name": ["Lionel Messi"], "team_name": ["Barcelona"], "competition": [""]}}]}
{"id": "multiple_85", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'team': '\u8bfa\u5fd1\u4e48\u6837'. Expected one of ['Real Madrid']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_85", "question": [[{"role": "user", "content": "\u5728\u904e\u53bb\u76845\u8f2a\u6bd4\u8cfd\u4e2d\uff0c\u5728\u897f\u7532\u7684\u7687\u5bb6\u99ac\u5fb7\u91cc\u6bd4\u8cfd\u4e2d\u7372\u5f97\u8db3\u7403\u5f97\u5206\u3002"}]], "function": [{"name": "basketball_scores.get_scores", "description": "Retrieve basketball scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The basketball team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}, {"name": "soccer_scores.get_scores", "description": "Retrieve soccer scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The soccer team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}]}, "model_result_raw": "[soccer_scores.get_scores(team=\"\\u8bfa\\u5fd1\\u4e48\\u6837\", league=\"\\u4eac\\u5fd1\\u8cbe\", rounds=5)]", "model_result_decoded": [{"soccer_scores.get_scores": {"team": "\u8bfa\u5fd1\u4e48\u6837", "league": "\u4eac\u5fd1\u8cbe", "rounds": 5}}], "possible_answer": [{"soccer_scores.get_scores": {"team": ["Real Madrid"], "league": ["La Liga"], "rounds": [5]}}]}
{"id": "multiple_88", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'game_title': '\u8bf7\u5b57\u4e16\u754c'. Expected one of ['World of Warcraft']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_88", "question": [[{"role": "user", "content": "\u57282020\u5e74\u201c\u9b54\u7378\u4e16\u754c\u201d\u904a\u6232\u4e2d\u627e\u5230\u6d3b\u8e8d\u73a9\u5bb6\u7684\u6578\u91cf\u3002"}]], "function": [{"name": "video_games.get_player_count", "description": "Retrieves the number of active players for a specified video game and year.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''"}}, "required": ["game_title", "year"]}}, {"name": "video_games.get_sales", "description": "Retrieves the sales figures for a specified video game and year.", "parameters": {"type": "dict", "properties": {"game_title": {"type": "string", "description": "The title of the video game."}, "year": {"type": "integer", "description": "The year in question."}, "platform": {"type": "string", "optional": true, "description": "The gaming platform (e.g. 'PC', 'Xbox', 'Playstation'). Default ''"}}, "required": ["game_title", "year"]}}]}, "model_result_raw": "[video_games.get_player_count(game_title=\"\\u8bf7\\u5b57\\u4e16\\u754c\", year=2020)]", "model_result_decoded": [{"video_games.get_player_count": {"game_title": "\u8bf7\u5b57\u4e16\u754c", "year": 2020}}], "possible_answer": [{"video_games.get_player_count": {"game_title": ["World of Warcraft"], "year": [2020], "platform": ["", "PC"]}}]}
{"id": "multiple_91", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'mainIngredient': 'apples'. Expected one of ['apple pie', 'apple']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "\u6211\u53ef\u4ee5\u627e\u5230\u4f7f\u7528\u5c11\u65bc5\u7a2e\u6210\u5206\u7684\u860b\u679c\u6d3e\u7684\u597d\u70f9\u98ea\u98df\u8b5c\u55ce\uff1f"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "[recipe.find(mainIngredient=\"apples\", ingredientLimit=5)]", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apples", "ingredientLimit": 5}}], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'categories' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "\u5728\u4e39\u4f5b\u9644\u8fd1\u7684\u6c83\u723e\u746a\uff08Walmart\uff09\uff0c\u7d66\u6211\u5217\u51fa\u4e86\u53ef\u7528\u7684\u7d20\u98df\u548c\u7121\u9ea9\u8cea\u98df\u54c1\u3002"}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[walmart.vegan_products(location=\"Denver, CO\")]", "model_result_decoded": [{"walmart.vegan_products": {"location": "Denver, CO"}}], "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_93", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'roomType': 'Luxury'. Expected one of ['deluxe', 'Deluxe']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_93", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u7684\u842c\u8c6a\u9152\u5e97\u9810\u8a022\u665a\u7684\u8c6a\u83ef\u5ba4\uff0c\u4e26\u6dfb\u52a0\u65e9\u9910\u4f5c\u70ba\u984d\u5916\u670d\u52d9"}]], "function": [{"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car. Default ''"}}, "required": ["location", "days", "car_type"]}}, {"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked.", "enum": ["breakfast", "parking", "spa"]}, "description": "Additional services to be added. Default empty array"}}, "required": ["location", "roomType", "nights"]}}]}, "model_result_raw": "[hotel.book(location=\"New York\", roomType=\"Luxury\", nights=2, additional_services=[\"breakfast\"])]", "model_result_decoded": [{"hotel.book": {"location": "New York", "roomType": "Luxury", "nights": 2, "additional_services": ["breakfast"]}}], "possible_answer": [{"hotel.book": {"location": ["New York", "New York, NY", "NYC"], "roomType": ["deluxe", "Deluxe"], "nights": [2], "additional_services": [["breakfast"]]}}]}
{"id": "multiple_94", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'roomType': 'suite'. Expected one of ['suite with queen size bed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_94", "question": [[{"role": "user", "content": "\u6211\u60f3\u5728\u7d10\u7d04\u5e0c\u723e\u9813\u9810\u8a02\u4e00\u9593\u5e36\u5927\u865f\u5e8a3\u665a\u7684\u5957\u623f\u3002\u4f60\u80fd\u627e\u5230\u7d66\u6211\u7684\u5b9a\u50f9\u55ce\uff1f"}]], "function": [{"name": "hotel_room_pricing.get", "description": "Get pricing for a specific type of hotel room for specified number of nights.", "parameters": {"type": "dict", "properties": {"hotelName": {"type": "string", "description": "The name of the hotel e.g. Hilton New York"}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}}, "required": ["hotelName", "roomType", "nights"]}}, {"name": "car_rental_pricing.get", "description": "Get pricing for a specific type of rental car for a specified number of days.", "parameters": {"type": "dict", "properties": {"rentalCompany": {"type": "string", "description": "The name of the rental company."}, "carType": {"type": "string", "description": "Type of the car to be rented."}, "days": {"type": "integer", "description": "Number of days to rent the car."}}, "required": ["rentalCompany", "carType", "days"]}}, {"name": "flight_ticket_pricing.get", "description": "Get pricing for a specific type of flight ticket for specified number of passengers.", "parameters": {"type": "dict", "properties": {"airline": {"type": "string", "description": "The name of the airline."}, "flightClass": {"type": "string", "description": "Class of the flight."}, "passengers": {"type": "integer", "description": "Number of passengers."}}, "required": ["airline", "flightClass", "passengers"]}}]}, "model_result_raw": "[hotel_room_pricing.get(hotelName=\"Hilton New York\", roomType=\"suite\", nights=3)]", "model_result_decoded": [{"hotel_room_pricing.get": {"hotelName": "Hilton New York", "roomType": "suite", "nights": 3}}], "possible_answer": [{"hotel_room_pricing.get": {"hotelName": ["Hilton New York"], "roomType": ["suite with queen size bed"], "nights": [3]}}]}
{"id": "multiple_109", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_109", "question": [[{"role": "user", "content": "\u8cea\u819c\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u540d\u7a31\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'high'"}}, "required": ["location", "art_form"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "The query does not provide the required argument for the function `cellbio.get_proteins`, which is the `cell_compartment` parameter. Therefore, I cannot directly call the function.\n\nYou need to specify the cell compartment where the proteins were found.", "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": [false, ""]}}]}
{"id": "multiple_112", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': '\u9ad4\u5fd1\u4e48\u6837\u884c'. Expected one of ['Yellowstone National Park']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_112", "question": [[{"role": "user", "content": "\u9810\u6e2c\u672a\u4f865\u5e74\u9ec3\u77f3\u570b\u5bb6\u516c\u5712\u7684\u68ee\u6797\u589e\u9577\uff0c\u5305\u62ec\u4eba\u985e\u5f71\u97ff\u3002"}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}]}, "model_result_raw": "[forest_growth_forecast(location=\"\\u9ad4\\u5fd1\\u4e48\\u6837\\u884c\", years=5, include_human_impact=True)]", "model_result_decoded": [{"forest_growth_forecast": {"location": "\u9ad4\u5fd1\u4e48\u6837\u884c", "years": 5, "include_human_impact": true}}], "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone National Park"], "years": [5], "include_human_impact": [true]}}]}
{"id": "multiple_113", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Nested type checking failed for parameter 'trait_contributions'. Expected outer type array with inner type <class 'float'>. Parameter value: [40, 60]."], "error_type": "type_error:nested", "prompt": {"id": "multiple_113", "question": [[{"role": "user", "content": "\u8a08\u7b97\u4e00\u500b\u751f\u7269\u7684\u9810\u671f\u9032\u5316\u9069\u61c9\u6027\uff0c\u5982\u679c\u7279\u5fb5a\u7684\u503c\u70ba0.8\uff0c\u4e26\u4e14\u7279\u8ceaB\u503c\u70ba0.7\uff0c\u5247\u7279\u5fb5a\u4f54\u5065\u8eab\u548c\u7279\u5fb5B\u768440\uff05\u8ca2\u737b60\uff05\u3002"}]], "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is empty array."}}, "required": ["loc", "product_list"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[calculate_fitness(trait_values=[0.8, 0.7], trait_contributions=[40, 60])]", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.8, 0.7], "trait_contributions": [40, 60]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "multiple_115", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_115", "question": [[{"role": "user", "content": "\u6211\u60f3\u5728\u6211\u7684\u4f4d\u7f6e\u9644\u8fd1\u627e\u52305\u5bb6\u9910\u5ef3\uff0c\u66fc\u54c8\u9813\uff0c\u63d0\u4f9b\u6cf0\u570b\u7f8e\u98df\u548c\u7d20\u98df\u83dc\u55ae\u3002"}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is 'all'"}}, "required": ["budget", "type"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default 'all'"}}, "required": ["team_name", "num_matches"]}}]}, "model_result_raw": "[find_restaurants(location=\"\u66fc\u54c8\u9813\", food_type=\"\u6cf0\u570b\u7f8e\u98df\", number=5), find_restaurants(location=\"\u66fc\u54c8\u9813\", food_type=\"\u7d20\u98df\", number=5)]", "model_result_decoded": [{"find_restaurants": {"location": "\u66fc\u54c8\u9813", "food_type": "\u6cf0\u570b\u7f8e\u98df", "number": 5}}, {"find_restaurants": {"location": "\u66fc\u54c8\u9813", "food_type": "\u7d20\u98df", "number": 5}}], "possible_answer": [{"find_restaurants": {"location": ["Manhattan"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"]]}}]}
{"id": "multiple_119", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'field': 'occupation'. Expected one of ['job']."], "error_type": "value_error:dict_value", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "\u5728\u7528\u6236\u8868\u4e2d\u7684\u6578\u64da\u5eab\u4e2d\u67e5\u627e\u5e74\u9f61\u5927\u65bc25\u6b72\u7684\u8a18\u9304\uff0c\u800c\u4f5c\u696d\u70ba\u201c\u5de5\u7a0b\u5e2b\u201d\u3002"}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "[database.query(table=\"user\", conditions=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"occupation\", \"operation\": \"=\", \"value\": \"engineer\"}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "occupation", "operation": "=", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_122", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'target': 'publice_amount'. Expected one of ['Purchase_Amount']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_122", "question": [[{"role": "user", "content": "\u904b\u884c\u5177\u6709\u9810\u6e2c\u8b8a\u91cf\u201c\u5e74\u9f61\u201d\uff0c\u201c\u6536\u5165\u201d\u548c\u201c\u6559\u80b2\u201d\u7684\u7dda\u6027\u56de\u6b78\u6a21\u578b\uff0c\u4ee5\u53ca\u76ee\u6a19\u8b8a\u91cf'publice_amount'\u3002\u9084\u63a1\u7528\u6a19\u6e96\u5316\u3002"}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "float", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}]}, "model_result_raw": "[run_linear_regression(predictors=[\"age\", \"income\", \"education\"], target=\"publice_amount\", standardize=True)]", "model_result_decoded": [{"run_linear_regression": {"predictors": ["age", "income", "education"], "target": "publice_amount", "standardize": true}}], "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"], ["Age", "Education", "Income"], ["Income", "Age", "Education"], ["Income", "Education", "Age"], ["Education", "Age", "Income"], ["Education", "Income", "Age"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "multiple_123", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_123", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5f9e\u724c\u7532\u677f\u4e0a\u7e6a\u88fd\u570b\u738b\u7684\u6982\u7387\u3002"}]], "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "dict", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}]}, "model_result_raw": "The given question lacks the parameters required by the function \"calculate_probability\". Specifically, it does not provide the total number of possible outcomes or the number of favorable outcomes. Please provide these details to proceed.", "possible_answer": [{"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}]}
{"id": "multiple_127", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'total_payout': 5000000. Expected one of [50000000]."], "error_type": "value_error:others", "prompt": {"id": "multiple_127", "question": [[{"role": "user", "content": "\u4e00\u5bb6\u516c\u53f8\u7684\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u662f\u4ec0\u9ebc\uff0c\u67091\u5104\u80a1\u6d41\u901a\u80a1\uff0c\u7e3d\u80a1\u606f\u652f\u51fa\u70ba5000\u842c\u7f8e\u5143\uff1f"}]], "function": [{"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"]}}, {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "[finance.calculate_quarterly_dividend_per_share(total_payout=5000000, outstanding_shares=10000000000)]", "model_result_decoded": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": 5000000, "outstanding_shares": 10000000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": "multiple_134", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_134", "question": [[{"role": "user", "content": "\u67e5\u627e\u8056\u5730\u4e9e\u54e5\u7e23\u6848\u4ef6\u7de8\u865fCA123456\u7684\u91cd\u7f6a\u72af\u7f6a\u8a18\u9304\u7684\u8a73\u7d30\u4fe1\u606f"}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "[crime_record.get_record(case_number=\"CA123456\", county=\"San Diego\")]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "multiple_139", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'company_name': '\u8a66\u4e48\u6837\u5fd1'. Expected one of ['Apple Inc.']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_139", "question": [[{"role": "user", "content": "\u67e5\u627e\u6d89\u53ca\u201c\u860b\u679c\u516c\u53f8\u201d\u7684\u5c08\u5229\u8a34\u8a1f\u7684\u8a73\u7d30\u4fe1\u606f\u3002\u5f9e2010\u5e74\u958b\u59cb\u3002"}]], "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}, {"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. This is an optional parameter. Default is 'all'."}}, "required": ["company_name", "year"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}]}, "model_result_raw": "[lawsuit_details.find(company_name=\"\\u8a66\\u4e48\\u6837\\u5fd1\", year=2010, case_type=\"Patent\")]", "model_result_decoded": [{"lawsuit_details.find": {"company_name": "\u8a66\u4e48\u6837\u5fd1", "year": 2010, "case_type": "Patent"}}], "possible_answer": [{"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent"]}}]}
{"id": "multiple_144", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4e0a\u597d'. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_144", "question": [[{"role": "user", "content": "\u502b\u65662022/08/16\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[air_quality(location=\"\\u4e0a\\u597d\", date=\"2022-08-16\")]", "model_result_decoded": [{"air_quality": {"location": "\u4e0a\u597d", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["2022-08-16", "16/08/2022", "Aug.16,2022", "2022/08/16", "16\\08\\2022"]}}]}
{"id": "multiple_149", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'text': '\u6211\u597d\u4e0e\u8fd1\u600e\u4e48\u6837\uff01\u8fd1\u6700\u8fd1\u600e\u4e48\u6837\uff01'. Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "\u5206\u6790\u5ba2\u6236\u8a55\u8ad6\u7684\u60c5\u611f\u201c\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002'\u3002"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "[sentiment_analysis(text=\"\\u6211\\u597d\\u4e0e\\u8fd1\\u600e\\u4e48\\u6837\\uff01\\u8fd1\\u6700\\u8fd1\\u600e\\u4e48\\u6837\\uff01\", language=\"zh\")]", "model_result_decoded": [{"sentiment_analysis": {"text": "\u6211\u597d\u4e0e\u8fd1\u600e\u4e48\u6837\uff01\u8fd1\u6700\u8fd1\u600e\u4e48\u6837\uff01", "language": "zh"}}], "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_151", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_151", "question": [[{"role": "user", "content": "\u5728Twitter\u4e0a\u627e\u5230\u6700\u53d7\u95dc\u6ce8\u7684\u4eba\uff0c\u4ed6\u767c\u63a8\u6587\u6709\u95dc\u8207\u884c\u70ba\u548c\u7fa4\u9ad4\u52d5\u614b\u6709\u95dc\u7684\u5fc3\u7406\u5b78\u3002"}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional. Default is an empty list."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional. Default is 'global'."}}, "required": ["topic"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "[social_media_analytics.most_followed(topic=\"\\u8a00\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837\\u5fd1\\u4e48\\u6837", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology", "Psychology"], "sub_topics": [["behaviour", "group dynamics"], ["group dynamics", "behaviour"]], "region": ["", "global"]}}]}
{"id": "multiple_153", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'event': '\u6771\u4eac\u65c5\u884c\u5b57\u5fd1'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_153", "question": [[{"role": "user", "content": "\u91cc\u65af\u672c\u689d\u7d04\u7684\u7c3d\u7f72\u662f\u4ec0\u9ebc\u6642\u5019\uff1f"}]], "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "float", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "float", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "float", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "float", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}]}, "model_result_raw": "[get_event_date(event=\"\\u6771\\u4eac\\u65c5\\u884c\\u5b57\\u5fd1\")]", "model_result_decoded": [{"get_event_date": {"event": "\u6771\u4eac\u65c5\u884c\u5b57\u5fd1"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon"], "location": ["", "global", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "multiple_156", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'scientist': '\u5b57\u5bf8\u4e16\u754c'. Expected one of ['Albert Einstein']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_156", "question": [[{"role": "user", "content": "1915\u5e743\u670817\u65e5\uff0c\u963f\u723e\u4f2f\u7279\u00b7\u611b\u56e0\u65af\u5766\uff08Albert Einstein\uff09\u5c0d\u79d1\u5b78\u7684\u8ca2\u737b\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "float", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "float", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[historical_contrib.get_contrib(scientist=\"\\u5b57\\u5bf8\\u4e16\\u754c\", date=\"1915-03-17\")]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "\u5b57\u5bf8\u4e16\u754c", "date": "1915-03-17"}}], "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "multiple_157", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'name': '\u79d1\u6280\u5fd1'. Expected one of ['Jesus Christ']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_157", "question": [[{"role": "user", "content": "\u6b77\u53f2\u8a18\u9304\u4e2d\uff0c\u8036\u7a4c\u57fa\u7763\u5728\u6b77\u53f2\u4e0a\u6700\u65e9\u7684\u53c3\u8003\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "[get_earliest_reference(name=\"\\u79d1\\u6280\\u5fd1\")]", "model_result_decoded": [{"get_earliest_reference": {"name": "\u79d1\u6280\u5fd1"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "multiple_162", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'floors': [1, 2, 3]. Expected one of [[2, 3, 4]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_162", "question": [[{"role": "user", "content": "\u5efa\u7bc9\u7269\u7684\u5efa\u7bc9\u7269ID B1004\u7684\u7d50\u69cb\u52d5\u614b\u5206\u6790\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default is 'all'"}}, "required": ["player_name", "year"]}}, {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "[analyze_structure(building_id=\"B1004\", floors=[1, 2, 3], mode=\"dynamic\")]", "model_result_decoded": [{"analyze_structure": {"building_id": "B1004", "floors": [1, 2, 3], "mode": "dynamic"}}], "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "multiple_165", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_165", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u5730\u5340\u627e\u5230\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002"}]], "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "[guitar_price.find(model=\"Gibson Les Paul\", condition=\"Good\", location=\"Chicago\")]", "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago area"]}}]}
{"id": "multiple_168", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'song_title': '\u6837\u5fd1\u5fd1\u4e48\u6837'. Expected one of ['Bohemian Rhapsody']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_168", "question": [[{"role": "user", "content": "\u627e\u5230\u7687\u540e\u6b4c\u66f2\u300a\u6ce2\u5e0c\u7c73\u4e9e\u72c2\u60f3\u66f2\u300b\u7684\u6b4c\u8a5e\u3002"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "[get_song_lyrics(song_title=\"\\u6837\\u5fd1\\u5fd1\\u4e48\\u6837\", artist_name=\"\\u6837\\u5fd1\\u5fd1\\u4e48\\u6837\")]", "model_result_decoded": [{"get_song_lyrics": {"song_title": "\u6837\u5fd1\u5fd1\u4e48\u6837", "artist_name": "\u6837\u5fd1\u5fd1\u4e48\u6837"}}], "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": "multiple_171", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'teams': ['\u6e56\u4eba', '\u5feb\u8239\u968a']. Expected one of [['Lakers', 'Clippers'], ['Clippers', 'Lakers']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_171", "question": [[{"role": "user", "content": "\u8ab0\u57282021\u5e741\u670828\u65e5\u8d0f\u5f97\u4e86\u6e56\u4eba\u548c\u5feb\u8239\u968a\u4e4b\u9593\u7684\u7c43\u7403\u6bd4\u8cfd\uff1f"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is ''"}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=[\"\u6e56\u4eba\", \"\u5feb\u8239\u968a\"], date=\"2021-01-28\")]", "model_result_decoded": [{"game_result.get_winner": {"teams": ["\u6e56\u4eba", "\u5feb\u8239\u968a"], "date": "2021-01-28"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": [""]}}]}
{"id": "multiple_172", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'name': '\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af'. Expected one of ['Lebron James']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_172", "question": [[{"role": "user", "content": "\u627e\u5230\u6211\u7684\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u7684\u8a73\u7d30\u8cc7\u6599"}]], "function": [{"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belong to. Default is ''"}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "[sports_db.find_athlete(name=\"\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\", sport=\"Basketball\")]", "model_result_decoded": [{"sports_db.find_athlete": {"name": "\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af", "sport": "Basketball"}}], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": "multiple_174", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'team': '\u5c0e\u597d'. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_174", "question": [[{"role": "user", "content": "\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season, 2024"}}, "required": ["team", "league"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "[sports_ranking(team=\"\\u5c0e\\u597d\", league=\"\\u8fd1\\u4e48\\u6837\\u5fd1\")]", "model_result_decoded": [{"sports_ranking": {"team": "\u5c0e\u597d", "league": "\u8fd1\u4e48\u6837\u5fd1"}}], "possible_answer": [{"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC"], "league": ["Premier League"], "season": ["", 2024]}}]}
{"id": "multiple_176", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u5c0a\u5fd1'. Expected one of ['Manchester United', 'Man United', 'Man U', 'MUFC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_176", "question": [[{"role": "user", "content": "\u7d66\u6211\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u63a5\u4e0b\u4f86\u76846\u5834\u6bd4\u8cfd\u4e2d\u7684\u65e5\u7a0b\u5b89\u6392\u3002"}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 9."}}, "required": ["location"]}}, {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default is empty array"}}, "required": ["location", "room_type", "duration", "start_date"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered. Default to ''."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "[sports_team.get_schedule(team_name=\"\\u5c0a\\u5fd1\", num_of_games=6, league=\"Premier League\")]", "model_result_decoded": [{"sports_team.get_schedule": {"team_name": "\u5c0a\u5fd1", "num_of_games": 6, "league": "Premier League"}}], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League", "PL"], "location": [""]}}]}
{"id": "multiple_178", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_178", "question": [[{"role": "user", "content": "\u5728\u7532\u677f\u4e0a\u627e\u5230\u4e00\u5f35\u201c\u7687\u540e\u201d\u548c\u201c\u7687\u540e\u201d\u7684\u5361\u7247\u3002"}]], "function": [{"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "float", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "[find_card_in_deck(rank=\"Queen\", suit=\"Hearts\"), find_card_in_deck(rank=\"Queen\", suit=\"Spades\")]", "model_result_decoded": [{"find_card_in_deck": {"rank": "Queen", "suit": "Hearts"}}, {"find_card_in_deck": {"rank": "Queen", "suit": "Spades"}}], "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}
{"id": "multiple_180", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'platform' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_180", "question": [[{"role": "user", "content": "\u7372\u53d6\u201c Zelda\u201d\u7684\u64ad\u653e\u5668\u7d71\u8a08\u4fe1\u606f\u5728\u7528\u6236\u201c SAM\u201d\u4e0a\u3002"}]], "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is ''"}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}, {"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "[game_stats.fetch_player_statistics(game=\"Zelda\", username=\"SAM\")]", "model_result_decoded": [{"game_stats.fetch_player_statistics": {"game": "Zelda", "username": "SAM"}}], "possible_answer": [{"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch", "Nintendo Switch"]}}]}
{"id": "multiple_181", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'team_name': '\u5229\u7269\u6d66F.C.'. Expected one of ['Liverpool F.C.', 'Liverpool']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_181", "question": [[{"role": "user", "content": "\u8b93\u6211\u7372\u5f97\u5229\u7269\u6d66F.C.\u4e0a\u4e00\u5834\u6bd4\u8cfd\u7684\u8a73\u7d30\u4fe1\u606f\u3002\u5305\u62ec\u5176\u7d71\u8a08\u6578\u64da\u3002"}]], "function": [{"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}, {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "float", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "float", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "float", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "any", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "[soccer.get_last_match(team_name=\"\u5229\u7269\u6d66F.C.\", include_stats=True)]", "model_result_decoded": [{"soccer.get_last_match": {"team_name": "\u5229\u7269\u6d66F.C.", "include_stats": true}}], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": "multiple_183", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'recipe': '\u6971\u5fd1\u5c3e\u4e48\u6837'. Expected one of ['Beef Lasagna', 'Beef Lasagna Recipe']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_183", "question": [[{"role": "user", "content": "Foodnetwork.com\u7684\u725b\u8089\u70e4\u5bec\u9eb5\u689d\u98df\u8b5c\u4e2d\u6709\u591a\u5c11\u5361\u8def\u91cc\uff1f"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}, {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner') Default is ''"}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "[recipe_info.get_calories(website=\"Foodnetwork.com\", recipe=\"\\u6971\\u5fd1\\u5c3e\\u4e48\\u6837\")]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "\u6971\u5fd1\u5c3e\u4e48\u6837"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna", "Beef Lasagna Recipe"], "optional_meal_time": [""]}}]}
{"id": "multiple_184", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['\u9762', '\u5976\u916a']. Expected one of [['pasta', 'cheese'], ['cheese', 'pasta']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_184", "question": [[{"role": "user", "content": "\u7d66\u6211\u4e00\u500b\u914d\u4ee5\u5169\u4efd\u5976\u916a\u7684\u7d20\u98df\u9eb5\u98df\u7684\u98df\u8b5c\u3002"}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}, {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}]}, "model_result_raw": "[recipe_search(dietary_restriction=\"Vegetarian\", ingredients=[\"\u9762\", \"\u5976\u916a\"], servings=2)]", "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["\u9762", "\u5976\u916a"], "servings": 2}}], "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"], ["cheese", "pasta"]], "servings": [2]}}]}
{"id": "multiple_185", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'amenities' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_185", "question": [[{"role": "user", "content": "\u5728\u6ce2\u58eb\u9813\u627e\u5230\u6700\u63a5\u8fd1\u7684\u58fd\u53f8\u9910\u5ef3\u3002"}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default is empty array."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "[restaurant_search.find_closest(location=\"Boston, MA\", cuisine=\"Sushi\")]", "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": "Sushi"}}], "possible_answer": [{"restaurant_search.find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi"], "amenities": [["Patio"]]}}]}
{"id": "multiple_186", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'dietary_restrictions': 'vegetarian'. Expected one of ['vegan']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_186", "question": [[{"role": "user", "content": "\u70ba\u6211\u627e\u5230\u4e00\u500b\u7d20\u98df\u98df\u8b5c\uff0c\u7528\u65bc\u5e03\u6717\u5c3c\uff0c\u6e96\u5099\u6642\u9593\u4e0d\u523030\u5206\u9418\u3002"}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}, {"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}]}, "model_result_raw": "[find_recipe(dietary_restrictions=\"vegetarian\", recipe_type=\"dessert\", time=30)]", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegetarian", "recipe_type": "dessert", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": "multiple_188", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'my_location': '\u4f2f\u514b\u5229'. Expected one of ['Berkeley', 'Berkeley,California', 'Berkeley,CA', 'Berkeley, CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_188", "question": [[{"role": "user", "content": "\u627e\u5230\u6700\u63a5\u8fd1\u4f2f\u514b\u5229\u7684\u96dc\u8ca8\u5e97\uff0c\u8a72\u5546\u5e97\u81f3\u5c11\u5177\u67094.5\u661f\u8a55\u7d1a\uff0c\u51fa\u552e\u897f\u7d05\u67ff\u548c\u5bf5\u7269\u98df\u54c1\u3002"}]], "function": [{"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "dict", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating. Default is 0.0."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}]}, "model_result_raw": "[grocery_store.find_best(my_location=\"\u4f2f\u514b\u5229\", rating=4.5, products=[\"\u897f\u7d05\u67ff\", \"\u5bf5\u7269\u98df\u54c1\"])]", "model_result_decoded": [{"grocery_store.find_best": {"my_location": "\u4f2f\u514b\u5229", "rating": 4.5, "products": ["\u897f\u7d05\u67ff", "\u5bf5\u7269\u98df\u54c1"]}}], "possible_answer": [{"grocery_store.find_best": {"my_location": ["Berkeley", "Berkeley,California", "Berkeley,CA", "Berkeley, CA"], "rating": [4.5], "products": [["tomatoes", "pet food"], ["pet food", "tomatoes"], ["Tomatoes", "Pet food"], ["Pet food", "Tomatoes"]]}}]}
{"id": "multiple_191", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': 'Las Vegas Hotel'. Expected one of ['Hotel Paradise']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_191", "question": [[{"role": "user", "content": "\u5f9e2022\u5e745\u670812\u65e5\u958b\u59cb\uff0c\u5728\u62c9\u65af\u7dad\u52a0\u65af\u9152\u5e97\u7684\u9152\u5e97\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u623f\u9593\uff0c\u4eab\u67093\u5929\u7684\u57ce\u5e02\u666f\u89c0\u3002"}]], "function": [{"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "dict", "properties": {"mu": {"type": "float", "description": "Mean of the normal distribution."}, "sigma": {"type": "float", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}, {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}, {"name": "elephant_population_estimate", "description": "Estimate future population of elephants given current population and growth rate.", "parameters": {"type": "dict", "properties": {"current_population": {"type": "integer", "description": "The current number of elephants."}, "growth_rate": {"type": "float", "description": "The annual population growth rate of elephants."}, "years": {"type": "integer", "description": "The number of years to project the population."}}, "required": ["current_population", "growth_rate", "years"]}}, {"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Las Vegas Hotel\", location=\"Las Vegas\", room_type=\"Luxury\", start_date=\"05-12-2022\", stay_duration=3, view=\"City view\")]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Las Vegas Hotel", "location": "Las Vegas", "room_type": "Luxury", "start_date": "05-12-2022", "stay_duration": 3, "view": "City view"}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "Las Vegas, NV", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city", "city view"]}}]}
{"id": "multiple_194", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'museum_name': '\u6771\u4eac\u65c5\u884c\u5fd1\u4e48\u6837\u884c'. Expected one of ['Metropolitan Museum of Art', 'The Met', 'Met Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_194", "question": [[{"role": "user", "content": "\u9031\u516d\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default is 0."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}, {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}, {"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "required": ["museum_name", "day"]}}, {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}]}, "model_result_raw": "[get_museum_hours(museum_name=\"\\u6771\\u4eac\\u65c5\\u884c\\u5fd1\\u4e48\\u6837\\u884c\", day=\"Saturday\")]", "model_result_decoded": [{"get_museum_hours": {"museum_name": "\u6771\u4eac\u65c5\u884c\u5fd1\u4e48\u6837\u884c", "day": "Saturday"}}], "possible_answer": [{"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met", "Met Museum"], "day": ["Saturday"]}}]}
{"id": "multiple_196", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_196", "question": [[{"role": "user", "content": "\u8cea\u819c\u4e2d\u767c\u73fe\u7684\u86cb\u767d\u8cea\u540d\u7a31\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "float", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "float", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "float", "description": "Permitivity of the space where field is being calculated, default is for vacuum."}}, "required": ["charge", "distance"]}}, {"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "dict", "properties": {"allele_frequency": {"type": "float", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "The query does not provide sufficient information to call the function `cellbio.get_proteins` because it lacks the required argument `cell_compartment`.\n\nThe query does not specify the cell compartment where the proteins were found.", "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": ["", false]}}]}
{"id": "multiple_199", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4e16\u754c'. Expected one of ['Yellowstone', 'yellowstone']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_199", "question": [[{"role": "user", "content": "\u5728\u672a\u4f865\u5e74\u5167\u9810\u6e2c\u9ec3\u77f3\u68ee\u6797\u7684\u751f\u9577\uff0c\u5305\u62ec\u4eba\u985e\u5f71\u97ff\u3002"}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional) Default is 0."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "[forest_growth_forecast(location=\"\\u4e16\\u754c\", years=5, include_human_impact=True)]", "model_result_decoded": [{"forest_growth_forecast": {"location": "\u4e16\u754c", "years": 5, "include_human_impact": true}}], "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone", "yellowstone"], "years": [5], "include_human_impact": [true]}}]}