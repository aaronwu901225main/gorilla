{"accuracy": 0.625, "correct_count": 10, "total_count": 16}
{"id": "live_parallel_3-0-3", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'location': 'Cancun, QR'. Expected one of ['Canc\u00fan, QR', 'Canc\\\\u00fan, QR']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_current_weather": {"location": "Cancun, QR"}}, "possible_answer_item": {"get_current_weather": {"location": ["Canc\u00fan, QR", "Canc\\u00fan, QR"], "unit": ["", "fahrenheit"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': 'Playa del Carmen, QR'. Expected one of ['Canc\u00fan, QR', 'Canc\\\\u00fan, QR']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_current_weather": {"location": "Playa del Carmen, QR"}}, "possible_answer_item": {"get_current_weather": {"location": ["Canc\u00fan, QR", "Canc\\u00fan, QR"], "unit": ["", "fahrenheit"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'location': 'Tulum, QR'. Expected one of ['Canc\u00fan, QR', 'Canc\\\\u00fan, QR']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"get_current_weather": {"location": "Tulum, QR"}}, "possible_answer_item": {"get_current_weather": {"location": ["Canc\u00fan, QR", "Canc\\u00fan, QR"], "unit": ["", "fahrenheit"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "live_parallel_3-0-3", "question": [[{"role": "system", "content": "Eres un Ancistente ia\u3002\u6709Sido capacitado con Una\u8d85\u7d1a\u7e96\u7dad\u5316\uff0c\u5f37\u5927\u7684para comunicar con usuarios enespa\u00f1ol\uff0c\u89e3\u91cb\u6027sus necesidades y actuar a travez de ellos\u3002"}, {"role": "user", "content": "\ufffdPodr\u00edasDermelas condiciones\u5be6\u969bDel Clima enCanc\u00fan\uff0cQr\uff0cPlaya del Carmen\uff0cQr y Tulum\uff0cQr\uff1f"}]], "function": [{"name": "get_current_weather", "description": "Retrieves the current weather conditions for a specified city and state.", "parameters": {"type": "dict", "required": ["location"], "properties": {"location": {"type": "string", "description": "The location for which to get the weather, in the format of 'City, State', such as 'San Francisco, CA' if State for the city exists. 'City, Country' if State for the city doesn't exist. Use short form if using state name"}, "unit": {"type": "string", "description": "The unit of temperature for the weather report.", "enum": ["celsius", "fahrenheit"], "default": "fahrenheit"}}}}]}, "model_result_raw": "[get_current_weather(location=\"Cancun, QR\"), get_current_weather(location=\"Playa del Carmen, QR\"), get_current_weather(location=\"Tulum, QR\")]", "model_result_decoded": [{"get_current_weather": {"location": "Cancun, QR"}}, {"get_current_weather": {"location": "Playa del Carmen, QR"}}, {"get_current_weather": {"location": "Tulum, QR"}}], "possible_answer": [{"get_current_weather": {"location": ["Canc\u00fan, QR", "Canc\\u00fan, QR"], "unit": ["", "fahrenheit"]}}, {"get_current_weather": {"location": ["Playa del Carmen, QR"], "unit": ["", "fahrenheit"]}}, {"get_current_weather": {"location": ["Tulum, QR"], "unit": ["", "fahrenheit"]}}]}
{"id": "live_parallel_8-4-0", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'content': '\u8cbe\u5fd1\u6280\u8bf7\u4e8b\u5fd1\u6280\u8bf7\u4e8b'. Expected one of ['Machine Learning Study Session']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"todo": {"type": "add", "content": "\u8cbe\u5fd1\u6280\u8bf7\u4e8b\u5fd1\u6280\u8bf7\u4e8b"}}, "possible_answer_item": {"todo": {"type": ["add"], "content": ["Machine Learning Study Session"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'type': 'delete'. Expected one of ['add']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"todo": {"type": "delete", "content": "\u8bf7\u4e8b\u5fd1\u6280\u8bf7\u4e8b"}}, "possible_answer_item": {"todo": {"type": ["add"], "content": ["Machine Learning Study Session"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "live_parallel_8-4-0", "question": [[{"role": "user", "content": "\u4f60\u597d\u5440\uff01\u60a8\u80fd\u5e6b\u6211\u7ba1\u7406\u6211\u7684\u4efb\u52d9\u55ce\uff1f\u6211\u9700\u8981\u6dfb\u52a0\u4e00\u500b\u540d\u70ba\u201c\u6a5f\u5668\u5b78\u7fd2\u7814\u7a76\u8ab2\u7a0b\u201d\u7684\u4efb\u52d9\u3002\u53e6\u5916\uff0c\u6211\u5df2\u7d93\u5b8c\u6210\u4e86\u4e00\u500b\u540d\u70ba\u201c\u96a8\u6a5ftodo Random\u201d\u7684\u4efb\u52d9\uff0c\u6211\u60f3\u5f9e\u5217\u8868\u4e2d\u522a\u9664\u5b83\u3002"}]], "function": [{"name": "todo", "description": "Manages a todo list allowing the user to add, delete, or update items.", "parameters": {"type": "dict", "required": ["type", "content"], "properties": {"type": {"type": "string", "description": "The action to be performed on the todo list.", "enum": ["add", "delete", "update"]}, "content": {"type": "string", "description": "The details of the todo item relevant to the action being performed."}}}}]}, "model_result_raw": "[todo(type=\"add\", content=\"\\u8cbe\\u5fd1\\u6280\\u8bf7\\u4e8b\\u5fd1\\u6280\\u8bf7\\u4e8b\"), todo(type=\"delete\", content=\"\\u8bf7\\u4e8b\\u5fd1\\u6280\\u8bf7\\u4e8b\")]", "model_result_decoded": [{"todo": {"type": "add", "content": "\u8cbe\u5fd1\u6280\u8bf7\u4e8b\u5fd1\u6280\u8bf7\u4e8b"}}, {"todo": {"type": "delete", "content": "\u8bf7\u4e8b\u5fd1\u6280\u8bf7\u4e8b"}}], "possible_answer": [{"todo": {"type": ["add"], "content": ["Machine Learning Study Session"]}}, {"todo": {"type": ["delete"], "content": ["todo random"]}}]}
{"id": "live_parallel_10-6-0", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Could not find a matching function among index [1] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'hotel_name': 'Marriott Hotel'. Expected one of ['Marriott']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"hotel_booking_book": {"hotel_name": "Marriott Hotel", "location": "Los Angeles, CA", "check_in": "2022-06-01", "check_out": "2022-06-10", "adults": 1, "children": 2}}, "possible_answer_item": {"hotel_booking_book": {"hotel_name": ["Marriott"], "location": ["Los Angeles, CA"], "check_in": ["2022-06-01"], "check_out": ["2022-06-10"], "adults": [1], "children": [2]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "live_parallel_10-6-0", "question": [[{"role": "user", "content": "\u6211\u9700\u8981\u9032\u884c\u5e7e\u500b\u9152\u5e97\u9810\u8a02\u3002\u9996\u5148\uff0c\u57282022\u5e745\u67081\u65e5\u5728\u7d10\u7d04\u7684Sheraton Hotel\uff0c\u5728\u7d10\u7d04\u7684Sheraton Hotel\u4e0a\u70ba2\u500b\u6210\u5e74\u4eba\u548c1\u500b\u5b69\u5b50\u56fa\u5b9a\u623f\u9593\uff0c\u4e26\u65bc2022\u5e745\u67085\u65e5\u5165\u4f4f\u3002\u7136\u5f8c\uff0c\u57282022\u5e746\u67081\u65e5\u5728\u6d1b\u6749\u78ef\u842c\u8c6a\u4fdd\u75591\u500b\u6210\u4eba\u548c2\u500b\u5b69\u5b50\u7684\u623f\u9593\uff0c\u4e26\u57282022\u5e746\u670810\u65e5\u57282022\u5e746\u670810\u65e5\u9000\u623f\u3002"}]], "function": [{"name": "hotel_booking_book", "description": "Book a hotel room at the specified location for the specified number of adults and children, ensuring the accommodation dates are available.", "parameters": {"type": "dict", "required": ["hotel_name", "location", "check_in", "check_out", "adults", "children"], "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel to book."}, "location": {"type": "string", "description": "The location of the hotel, in the format of 'City, State', such as 'San Francisco, CA' or 'New York, NY'."}, "check_in": {"type": "string", "description": "The check-in date for the booking, in the format 'YYYY-MM-DD'."}, "check_out": {"type": "string", "description": "The check-out date for the booking, in the format 'YYYY-MM-DD'."}, "adults": {"type": "integer", "description": "The number of adults included in the booking."}, "children": {"type": "integer", "description": "The number of children included in the booking."}}}}]}, "model_result_raw": "[hotel_booking_book(hotel_name=\"Sheraton Hotel\", location=\"New York, NY\", check_in=\"2022-05-01\", check_out=\"2022-05-05\", adults=2, children=1), hotel_booking_book(hotel_name=\"Marriott Hotel\", location=\"Los Angeles, CA\", check_in=\"2022-06-01\", check_out=\"2022-06-10\", adults=1, children=2)]", "model_result_decoded": [{"hotel_booking_book": {"hotel_name": "Sheraton Hotel", "location": "New York, NY", "check_in": "2022-05-01", "check_out": "2022-05-05", "adults": 2, "children": 1}}, {"hotel_booking_book": {"hotel_name": "Marriott Hotel", "location": "Los Angeles, CA", "check_in": "2022-06-01", "check_out": "2022-06-10", "adults": 1, "children": 2}}], "possible_answer": [{"hotel_booking_book": {"hotel_name": ["Sheraton Hotel", "Sheraton", "Hotel Sheraton"], "location": ["New York, NY"], "check_in": ["2022-05-01"], "check_out": ["2022-05-05"], "adults": [2], "children": [1]}}, {"hotel_booking_book": {"hotel_name": ["Marriott"], "location": ["Los Angeles, CA"], "check_in": ["2022-06-01"], "check_out": ["2022-06-10"], "adults": [1], "children": [2]}}]}
{"id": "live_parallel_11-7-0", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "live_parallel_11-7-0", "question": [[{"role": "user", "content": "\u6211\u67098\u584a\u51b7\u51cd\u8292\u679c\u548c\u67f4\u8336\u3002\n\n\u65e9\u4e9b\u6642\u5019\uff0c\u6211\u6709\u5169\u7247\u610f\u5927\u5229\u8fa3\u9999\u8178\u6bd4\u85a9\u9905\u548c\u4e00\u676f\u5496\u5561"}]], "function": [{"name": "log_food", "description": "Logs a food item with a given portion size to track dietary intake.", "parameters": {"type": "dict", "required": ["food_name", "portion_amount", "portion_unit"], "properties": {"food_name": {"type": "string", "description": "The name of the food to log, such as 'apple', 'bread', or 'chicken breast'."}, "portion_amount": {"type": "float", "description": "The amount of the food item that was consumed, specified in the unit given by portion_unit."}, "portion_unit": {"type": "string", "description": "The unit of measure for the portion amount, such as 'cup', 'grams', or 'slice'.", "enum": ["cup", "grams", "slice", "piece", "tablespoon"]}, "meal_type": {"type": "string", "description": "The type of meal or snack this food item is being logged for.", "enum": ["breakfast", "lunch", "dinner", "snack"], "default": "snack"}, "log_date": {"type": "string", "description": "The date and time when the food was consumed, in ISO 8601 format such as 'YYYY-MM-DDTHH:MM:SSZ'.", "default": null}}}}]}, "model_result_raw": "[log_food(food_name=\"frozen mango\", portion_amount=8.0, portion_unit=\"piece\", meal_type=\"snack\"), log_food(food_name=\"sausage pizza\", portion_amount=2.0, portion_unit=\"piece\", meal_type=\"snack\"), log_food(food_name=\"coffee\", portion_amount=1.0, portion_unit=\"cup\", meal_type=\"snack\")]", "model_result_decoded": [{"log_food": {"food_name": "frozen mango", "portion_amount": 8.0, "portion_unit": "piece", "meal_type": "snack"}}, {"log_food": {"food_name": "sausage pizza", "portion_amount": 2.0, "portion_unit": "piece", "meal_type": "snack"}}, {"log_food": {"food_name": "coffee", "portion_amount": 1.0, "portion_unit": "cup", "meal_type": "snack"}}], "possible_answer": [{"log_food": {"food_name": ["frozen mango"], "portion_amount": [8.0], "portion_unit": ["piece"], "meal_type": ["", "snack"]}}, {"log_food": {"food_name": ["chai tea"], "portion_amount": [1.0], "portion_unit": ["cup"], "meal_type": ["", "snack"]}}, {"log_food": {"food_name": ["pepperoni pizza"], "portion_amount": [2.0], "portion_unit": ["slice"], "meal_type": ["", "snack"]}}, {"log_food": {"food_name": ["coffee"], "portion_amount": [1.0], "portion_unit": ["cup"], "meal_type": ["", "snack"]}}]}
{"id": "live_parallel_12-8-0", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Could not find a matching function among index [0, 1, 2, 3, 4, 5] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'food_name': 'banana'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "banana", "portion_amount": 1.0, "meal_name": "breakfast"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'food_name': 'ice coffee'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "ice coffee", "portion_amount": 12.0, "meal_name": "breakfast"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'food_name': 'cornbread'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "cornbread", "portion_amount": 1.0, "meal_name": "lunch"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}, {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'food_name': 'bamboo shoots'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "bamboo shoots", "portion_amount": 4.0, "meal_name": "breakfast"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}, {"Model Result Index 4": {"sub_error": ["Invalid value for parameter 'food_name': 'eggs'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "eggs", "portion_amount": 2.0, "meal_name": "breakfast"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}, {"Model Result Index 5": {"sub_error": ["Invalid value for parameter 'food_name': 'bread'. Expected one of ['iced coffee']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"log_food": {"food_name": "bread", "portion_amount": 1.0, "meal_name": "breakfast"}}, "possible_answer_item": {"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "live_parallel_12-8-0", "question": [[{"role": "user", "content": "\u65e9\u9910\u6642\uff0c\u6211\u559d\u4e8612\u76ce\u53f8\u51b0\u5496\u5561\u548c\u9999\u8549\u3002\n\n\u5348\u9910\u6211\u5403\u4e86\u7389\u7c73\u9905\n\n\u65e9\u9910\u56db\u76ce\u53f8\u7684\u8606\u7b4d\uff0c\u5169\u500b\u96de\u86cb\uff0c\u4e00\u584a\u7121\u9ea9\u8cea\u9eb5\u5305\u3002"}]], "function": [{"name": "log_food", "description": "Logs a food item with details about the portion size and the meal it is associated with.", "parameters": {"type": "dict", "required": ["food_name", "portion_amount", "meal_name"], "properties": {"food_name": {"type": "string", "description": "The name of the food to log."}, "portion_amount": {"type": "float", "description": "The amount of the food item that was consumed, in specified units."}, "portion_unit": {"type": "string", "description": "The unit of measure for the portion amount. Choose a unit such as 'grams', 'ounces', 'pieces', 'cups', or 'tablespoons'.", "enum": ["grams", "ounces", "pieces", "cups", "tablespoons"], "default": "grams"}, "meal_name": {"type": "string", "description": "The name of the meal with which the food item is associated. Options include 'breakfast', 'lunch', 'dinner', or 'snack'."}}}}]}, "model_result_raw": "[log_food(food_name=\"banana\", portion_amount=1.0, meal_name=\"breakfast\"), log_food(food_name=\"ice coffee\", portion_amount=12.0, meal_name=\"breakfast\"), log_food(food_name=\"cornbread\", portion_amount=1.0, meal_name=\"lunch\"), log_food(food_name=\"bamboo shoots\", portion_amount=4.0, meal_name=\"breakfast\"), log_food(food_name=\"eggs\", portion_amount=2.0, meal_name=\"breakfast\"), log_food(food_name=\"bread\", portion_amount=1.0, meal_name=\"breakfast\")]", "model_result_decoded": [{"log_food": {"food_name": "banana", "portion_amount": 1.0, "meal_name": "breakfast"}}, {"log_food": {"food_name": "ice coffee", "portion_amount": 12.0, "meal_name": "breakfast"}}, {"log_food": {"food_name": "cornbread", "portion_amount": 1.0, "meal_name": "lunch"}}, {"log_food": {"food_name": "bamboo shoots", "portion_amount": 4.0, "meal_name": "breakfast"}}, {"log_food": {"food_name": "eggs", "portion_amount": 2.0, "meal_name": "breakfast"}}, {"log_food": {"food_name": "bread", "portion_amount": 1.0, "meal_name": "breakfast"}}], "possible_answer": [{"log_food": {"food_name": ["iced coffee"], "portion_amount": [12.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}, {"log_food": {"food_name": ["banana"], "portion_amount": [1.0], "portion_unit": ["pieces"], "meal_name": ["breakfast"]}}, {"log_food": {"food_name": ["quesadilla"], "portion_amount": [1.0], "portion_unit": ["pieces"], "meal_name": ["lunch"]}}, {"log_food": {"food_name": ["asparagus"], "portion_amount": [4.0], "portion_unit": ["ounces"], "meal_name": ["breakfast"]}}, {"log_food": {"food_name": ["eggs"], "portion_amount": [2.0], "portion_unit": ["pieces"], "meal_name": ["breakfast"]}}, {"log_food": {"food_name": ["gluten free bread"], "portion_amount": [1.0], "portion_unit": ["pieces"], "meal_name": ["breakfast"]}}]}
{"id": "live_parallel_15-11-0", "model_name": "uiuc-convai_CoALM-8B", "test_category": "live_parallel", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "live_parallel_15-11-0", "question": [[{"role": "user", "content": "\u5728C\u9a45\u52d5\u5668\u4e2d\u5217\u51fa\u6587\u4ef6\uff0c\u7136\u5f8c\u88fd\u4f5c\u7a31\u70batesting.txt\u7684\u6587\u4ef6"}]], "function": [{"name": "cmd_controller.execute", "description": "Executes a specified command in the Windows operating system using the os.system() function.", "parameters": {"type": "dict", "required": ["command"], "properties": {"command": {"type": "string", "description": "The command line instruction to be passed to os.system() for execution, formatted as a Windows command prompt statement."}, "unit": {"type": "string", "description": "The unit of measurement for the command execution time, such as 'seconds' or 'milliseconds'", "enum": ["seconds", "milliseconds"], "default": "N/A"}}}}]}, "model_result_raw": "The given question lacks the parameters required by the function. The function provided only supports executing a specified command in the Windows operating system, but it does not support listing files or creating a new file.", "possible_answer": [{"cmd_controller.execute": {"command": ["dir c:\\", "dir c:\\\\"]}}, {"cmd_controller.execute": {"command": ["echo.>C:\\testing.txt", "echo.>C:\\\\testing.txt"], "unit": ["", "N/A"]}}]}