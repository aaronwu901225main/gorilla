{"accuracy": 0.3775, "correct_count": 151, "total_count": 400}
{"id": "simple_1", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_1", "question": [[{"role": "user", "content": "\u4f7f\u7528\u6578\u5b78\u51fd\u6578\u8a08\u7b975\u7684\u968e\u4e58\u3002"}]], "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}]}, "model_result_raw": "[math.factorial(number=5)]", "model_result_decoded": [], "possible_answer": [{"math.factorial": {"number": [5]}}]}
{"id": "simple_4", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_4", "question": [[{"role": "user", "content": "\u6c42\u89e3\u4e00\u500b\u4e8c\u6b21\u65b9\u7a0b\uff0c\u5176\u4e2da = 2\uff0cb = 6\u548cc = 5"}]], "function": [{"name": "solve_quadratic_equation", "description": "Function solves the quadratic equation and returns its roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x squared"}, "b": {"type": "integer", "description": "Coefficient of x"}, "c": {"type": "integer", "description": "Constant term in the quadratic equation."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic_equation(a=2, b=6, c=5)]", "model_result_decoded": [], "possible_answer": [{"solve_quadratic_equation": {"a": [2], "b": [6], "c": [5]}}]}
{"id": "simple_5", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "\u627e\u5230\u7d66\u5b9a\u4fc2\u6578a = 3\uff0cb = -11\u548cc = -4\u7684\u4e8c\u6b21\u65b9\u7a0b\u7684\u6240\u6709\u6839\u3002"}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic(a=3, b=-11, c=-4)]", "model_result_decoded": [], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_6", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_6", "question": [[{"role": "user", "content": "a = 2\uff0cb = 5\u548cc = 3\u7684\u4e8c\u6b21\u65b9\u7a0b\u7684\u6839\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "solve_quadratic", "description": "Find the roots of a quadratic equation. Returns both roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x\u00b2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic(a=2, b=5, c=3)]", "model_result_decoded": [], "possible_answer": [{"solve_quadratic": {"a": [2], "b": [5], "c": [3]}}]}
{"id": "simple_13", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "\u5f9ex = 1\u5230x = 3\u8a08\u7b97\u66f2\u7dda\u4e0b\u7684\u9762\u7a4dy = x^2\u3002"}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_20", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_20", "question": [[{"role": "user", "content": "\u627e\u523036\u548c24\u7684\u6700\u9ad8\u516c\u5171\u56e0\u7d20\u3002"}]], "function": [{"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[math.hcf(number1=36, number2=24)]", "model_result_decoded": [], "possible_answer": [{"math.hcf": {"number1": [36], "number2": [24]}}]}
{"id": "simple_24", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_24", "question": [[{"role": "user", "content": "\u627e\u523012\u548c18\u7684\u6700\u5927\u5171\u540c\u9664\u6578\uff08GCD\uff09"}]], "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[math.gcd(num1=12, num2=18)]", "model_result_decoded": [], "possible_answer": [{"math.gcd": {"num1": [12], "num2": [18]}}]}
{"id": "simple_30", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_30", "question": [[{"role": "user", "content": "\u5f9e\u4f11\u606f\u958b\u59cb\u4e26\u4ee54 m/s^2\u52a0\u901f\u7684\u8eca\u8f1b\u7684\u6700\u7d42\u901f\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}]}, "model_result_raw": "[kinematics.final_velocity_from_distance(acceleration=4, distance=100)]", "model_result_decoded": [], "possible_answer": [{"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}]}
{"id": "simple_33", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_33", "question": [[{"role": "user", "content": "\u4f7f\u7528\u6700\u5feb\u7684\u8def\u7dda\u5f9e\u6089\u5c3c\u7372\u53d6\u5f9e\u6089\u5c3c\u5230\u58a8\u723e\u672c\u7684\u8def\u7dda\u3002"}]], "function": [{"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[get_directions(start_location=\"Sydney\", end_location=\"Melbourne\", route_type=\"fastest\")]", "model_result_decoded": [], "possible_answer": [{"get_directions": {"start_location": ["Sydney"], "end_location": ["Melbourne"], "route_type": ["fastest", ""]}}]}
{"id": "simple_34", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_34", "question": [[{"role": "user", "content": "\u5275\u5efa\u4e00\u500b\u884c\u7a0b\uff0c\u9032\u884c7\u5929\u7684\u6771\u4eac\u65c5\u884c\uff0c\u6bcf\u5929\u7684\u9810\u7b97\u4e0d\u8d85\u904e100\u7f8e\u5143\uff0c\u4e26\u4e14\u66f4\u559c\u6b61\u63a2\u7d22\u6027\u8cea\u3002"}]], "function": [{"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "integer", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}]}, "model_result_raw": "[travel_itinerary_generator(destination=\"Tokyo\", days=7, daily_budget=100, exploration_type=\"nature\")]", "model_result_decoded": [], "possible_answer": [{"travel_itinerary_generator": {"destination": ["Tokyo"], "days": [7], "daily_budget": [100], "exploration_type": ["nature"]}}]}
{"id": "simple_35", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_35", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u627e\u5230\u4e00\u5bb6\u5168\u7d20\u98df\u9910\u5ef3\uff0c\u76f4\u5230\u81f3\u5c11\u665a\u4e0a11\u9ede\u958b\u653e\u3002"}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}]}, "model_result_raw": "[vegan_restaurant.find_nearby(location=\"New York, NY\", operating_hours=23)]", "model_result_decoded": [], "possible_answer": [{"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}]}
{"id": "simple_36", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_36", "question": [[{"role": "user", "content": "\u627e\u5230\u7d10\u7d04\u5e02\u548c\u83ef\u76db\u9813\u7279\u5340\u4e4b\u9593\u7684\u6700\u77ed\u99d5\u99db\u8ddd\u96e2"}]], "function": [{"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey. You should format it as city name like Boston."}, "destination": {"type": "string", "description": "End point of the journey. You should format it as city name like Boston."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is 'km')."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "[get_shortest_driving_distance(origin=\"New York\", destination=\"Washington D.C.\")]", "model_result_decoded": [], "possible_answer": [{"get_shortest_driving_distance": {"origin": ["New York City"], "destination": ["Washington D.C."], "unit": ["km", ""]}}]}
{"id": "simple_37", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '\u65e7\u91d1\u5c71'. Expected one of ['San Francisco']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_37", "question": [[{"role": "user", "content": "\u5728\u8056\u5854\u82ad\u82ad\u62c9\u548c\u8499\u7279\u96f7\u505c\u4e0b\u4f86\uff0c\u627e\u5230\u5f9e\u820a\u91d1\u5c71\u5230\u6d1b\u6749\u78ef\u7684\u6c7d\u8eca\u4f30\u8a08\u65c5\u884c\u6642\u9593\u3002"}]], "function": [{"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": [{"route.estimate_time": {"start_location": "\u65e7\u91d1\u5c71", "end_location": "\u6d1b\u6749\u78ef", "stops": ["\u5723\u5854\u82ad\u82ad\u62c9", "\u8499\u7279\u96f7"]}}], "model_result_decoded": [{"route.estimate_time": {"start_location": "\u65e7\u91d1\u5c71", "end_location": "\u6d1b\u6749\u78ef", "stops": ["\u5723\u5854\u82ad\u82ad\u62c9", "\u8499\u7279\u96f7"]}}], "possible_answer": [{"route.estimate_time": {"start_location": ["San Francisco"], "end_location": ["Los Angeles"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"]]}}]}
{"id": "simple_38", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge1': 1.0. Expected one of [1e-09]."], "error_type": "value_error:others", "prompt": {"id": "simple_38", "question": [[{"role": "user", "content": "\u8ddd\u96e2\u70ba0.05\u7684\u5169\u500b\u5e36\u96fb\u7269\u9ad4\u7684\u975c\u96fb\u96fb\u52e2\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}]}, "model_result_raw": [{"calculate_electrostatic_potential": {"charge1": 1.0, "charge2": -1.0, "distance": 0.05}}], "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1.0, "charge2": -1.0, "distance": 0.05}}], "possible_answer": [{"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}]}
{"id": "simple_39", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge': 1. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"id": "simple_39", "question": [[{"role": "user", "content": "\u5728\u8ddd2\u7c73\u76842\u7c73\u8655\u7684\u9ede\u8655\u8a08\u7b97\u96fb\u5834\u3002"}]], "function": [{"name": "calculate_electric_field", "description": "Calculate the electric field produced by a charge at a certain distance.", "parameters": {"type": "dict", "properties": {"charge": {"type": "integer", "description": "Charge in coulombs producing the electric field."}, "distance": {"type": "integer", "description": "Distance from the charge in meters where the field is being measured."}, "permitivity": {"type": "float", "description": "Permitivity of the space where field is being calculated, default is 8.854e-12."}}, "required": ["charge", "distance"]}}]}, "model_result_raw": [{"calculate_electric_field": {"charge": 1, "distance": 2}}], "model_result_decoded": [{"calculate_electric_field": {"charge": 1, "distance": 2}}], "possible_answer": [{"calculate_electric_field": {"charge": [2], "distance": [3], "permitivity": ["", 8.854e-12]}}]}
{"id": "simple_42", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'inductance': 5e-05. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_42", "question": [[{"role": "user", "content": "\u8a08\u7b97LC\u96fb\u8def\u7684\u8ae7\u632f\u983b\u7387\u7d66\u5b9a100\u00b5F\u7684\u96fb\u5bb9\u548c50MH\u7684\u96fb\u611f\u3002"}]], "function": [{"name": "calculate_resonant_frequency", "description": "Calculate the resonant frequency of an LC (inductor-capacitor) circuit.", "parameters": {"type": "dict", "properties": {"inductance": {"type": "float", "description": "The inductance (L) in henries (H)."}, "capacitance": {"type": "float", "description": "The capacitance (C) in farads (F)."}, "round_off": {"type": "integer", "description": "Rounding off the result to a certain decimal places, default is 2."}}, "required": ["inductance", "capacitance"]}}]}, "model_result_raw": [{"calculate_resonant_frequency": {"inductance": 5e-05, "capacitance": 0.0001}}], "model_result_decoded": [{"calculate_resonant_frequency": {"inductance": 5e-05, "capacitance": 0.0001}}], "possible_answer": [{"calculate_resonant_frequency": {"inductance": [0.05], "capacitance": [0.0001], "round_off": ["", 2]}}]}
{"id": "simple_45", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_45", "question": [[{"role": "user", "content": "\u8a08\u7b97100\u514b\u6c34\u5f9e\u6db2\u9ad4\u8b8a\u70ba\u84b8\u6c7d\u7684\u76f8\u8b8a\u6642\uff08\u5728\u7126\u8033\u4e2d\uff09\u5438\u6536\u6216\u91cb\u653e\u7684\u80fd\u91cf\u3002"}]], "function": [{"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}]}, "model_result_raw": "[thermo.calculate_energy(mass=100, phase_transition='vaporization', substance='water')]", "model_result_decoded": [], "possible_answer": [{"thermo.calculate_energy": {"mass": [100], "phase_transition": ["vaporization"], "substance": ["water", ""]}}]}
{"id": "simple_47", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_47", "question": [[{"role": "user", "content": "\u57285000m\u7684\u6d77\u5e73\u9762\u4e0b\u627e\u5230\u6c34\u7684\u6cb8\u9ede\u548c\u7194\u9ede\u3002"}]], "function": [{"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}]}, "model_result_raw": "[get_boiling_melting_points(substance=\"\u6c34\", sea_level=5000)]", "model_result_decoded": [], "possible_answer": [{"get_boiling_melting_points": {"substance": ["water"], "sea_level": [5000]}}]}
{"id": "simple_50", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "\u5982\u679c\u57281\u500b\u58d3\u529b\u5927\u6c23\u4e0b\u5c07\u5176\u52a0\u71b1\u5230100\u00b0C\uff0c\u5247\u57280\u00b0C\u4e0b\uff0c\u6bcf\u958b\u723e\u6587\u7684\u71b5\u8b8a\u5316\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "[entropy_change.calculate(substance=\"water\", mass=1, initial_temperature=0, final_temperature=100)]", "model_result_decoded": [], "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": "simple_53", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_53", "question": [[{"role": "user", "content": "\u7528ID`DNA123`\u6aa2\u7d22DNA\u5206\u5b50\u7684\u5e8f\u5217\u3002"}]], "function": [{"name": "fetch_DNA_sequence", "description": "Retrieve the sequence of a DNA molecule with the given id from a public database.", "parameters": {"type": "dict", "properties": {"DNA_id": {"type": "string", "description": "Unique ID of the DNA molecule in the database."}, "format": {"type": "string", "description": "Optional parameter to get sequence in specific format (default to 'fasta')."}, "upstream": {"type": "integer", "description": "Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0)."}}, "required": ["DNA_id"]}}]}, "model_result_raw": "[fetch_DNA_sequence(DNA_id='DNA123')]", "model_result_decoded": [], "possible_answer": [{"fetch_DNA_sequence": {"DNA_id": ["DNA123"], "format": ["", "fasta"], "upstream": ["", 0]}}]}
{"id": "simple_54", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_54", "question": [[{"role": "user", "content": "\u78ba\u5b9a\u7d66\u5b9a\u4eba\u57fa\u56e0\u201c BRCA1\u201d\u7684\u86cb\u767d\u8cea\u5e8f\u5217\u3002"}]], "function": [{"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}]}, "model_result_raw": "[get_protein_sequence(gene=\"BRCA1\")]", "model_result_decoded": [], "possible_answer": [{"get_protein_sequence": {"gene": ["BRCA1"], "species": ["Homo sapiens", ""]}}]}
{"id": "simple_55", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "\u627e\u5230\u6709\u95dc\u4eba\u985e\u7d30\u80de\u7d50\u69cb\u7684\u8a73\u7d30\u4fe1\u606f"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "[biology.get_cell_info(cell_type=\"human\", detailed=True)]", "model_result_decoded": [], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_58", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "ATP\u5408\u9176\u5728\u7dda\u7c92\u9ad4\u4e2d\u7684\u529f\u80fd\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "[cell_biology.function_lookup(molecule=\"ATP\", organelle=\"\u7dda\u7c92\u9ad4\", specific_function=True)]", "model_result_decoded": [], "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_61", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'activity_level': 'sedentary'. Expected one of ['lightly active']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_61", "question": [[{"role": "user", "content": "\u9810\u6e2c\u9ad4\u91cd\u70ba150\u78c5\u548c\u8eab\u9ad85\u82f1\u5c3a10\u82f1\u5bf8\u7684\u4eba\u662f\u5426\u6703\u60a3\u67092\u578b\u7cd6\u5c3f\u75c5\u3002"}]], "function": [{"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in lbs."}, "height": {"type": "integer", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}]}, "model_result_raw": [{"diabetes_prediction": {"weight": 150, "height": 70, "activity_level": "sedentary"}}], "model_result_decoded": [{"diabetes_prediction": {"weight": 150, "height": 70, "activity_level": "sedentary"}}], "possible_answer": [{"diabetes_prediction": {"weight": [150], "height": [70], "activity_level": ["lightly active"]}}]}
{"id": "simple_63", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_63", "question": [[{"role": "user", "content": "\u627e\u51fa\u4eba\u985e\u548c\u9ed1\u7329\u7329\u5728\u907a\u50b3\u4e0a\u7684\u767e\u5206\u6bd4\u4e2d\u7684\u76f8\u4f3c\u4e4b\u8655\u3002"}]], "function": [{"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}]}, "model_result_raw": "[genetics.calculate_similarity(species1=\"\u4eba\u985e\", species2=\"\u9ed1\u7329\u7329\", format=\"percentage\")]", "model_result_decoded": [], "possible_answer": [{"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}]}
{"id": "simple_65", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'country': '\u5df4\u897f'. Expected one of ['Brazil']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_65", "question": [[{"role": "user", "content": "\u5982\u679c\u4eba\u53e3\u70ba2.13\u5104\uff0c\u571f\u5730\u9762\u7a4d\u70ba850\u842c\u5e73\u65b9\u516c\u91cc\uff0c\u5247\u8a08\u7b972022\u5e74\u5df4\u897f\u7684\u4eba\u53e3\u5bc6\u5ea6\u3002"}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}]}, "model_result_raw": [{"calculate_density": {"country": "\u5df4\u897f", "year": "2022", "population": 213000000, "land_area": 8500000}}], "model_result_decoded": [{"calculate_density": {"country": "\u5df4\u897f", "year": "2022", "population": 213000000, "land_area": 8500000}}], "possible_answer": [{"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}]}
{"id": "simple_67", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_67", "question": [[{"role": "user", "content": "\u5728\u68ee\u6797\u4e2d\u8b58\u5225\u4e00\u96bb\u7da0\u8272\u7684\u5c0f\u9ce5\u3002"}]], "function": [{"name": "identify_bird", "description": "Identify a bird species based on certain characteristics.", "parameters": {"type": "dict", "properties": {"color": {"type": "string", "description": "Color of the bird."}, "habitat": {"type": "string", "description": "Habitat of the bird."}, "size": {"type": "string", "enum": ["small", "medium", "large"], "description": "Size of the bird. Default is 'small'"}}, "required": ["color", "habitat"]}}]}, "model_result_raw": "[identify_bird(color=\"green\", habitat=\"forest\", size=\"small\")]", "model_result_decoded": [], "possible_answer": [{"identify_bird": {"color": ["green"], "habitat": ["forest"], "size": ["small"]}}]}
{"id": "simple_69", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u5bc6\u897f\u897f\u6bd4\u6cb3'. Expected one of ['Mississippi river']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_69", "question": [[{"role": "user", "content": "\u767c\u73fe2020\u5e74\u5728\u5bc6\u897f\u897f\u6bd4\u6cb3\u4e2d\u627e\u51fa\u70cf\u9f9c\u7684\u7a2e\u7fa4\u548c\u7269\u7a2e\u3002"}]], "function": [{"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": [{"ecology.get_turtle_population": {"location": "\u5bc6\u897f\u897f\u6bd4\u6cb3", "year": 2020, "species": true}}], "model_result_decoded": [{"ecology.get_turtle_population": {"location": "\u5bc6\u897f\u897f\u6bd4\u6cb3", "year": 2020, "species": true}}], "possible_answer": [{"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}]}
{"id": "simple_73", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_73", "question": [[{"role": "user", "content": "\u672a\u4f8620\u5e74\uff0c\u7f8e\u570b\u9810\u8a08\u7684\u4eba\u53e3\u589e\u9577\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "population_projections", "description": "Calculates the projected population growth based on the current growth rate.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which to calculate the population projection."}, "years": {"type": "integer", "description": "Number of years for the projection."}, "growth_rate": {"type": "float", "description": "Optional parameter to specify the growth rate, in percentage. Default is 1.2."}}, "required": ["country", "years"]}}]}, "model_result_raw": "[population_projections(country=\"United States\", years=20)]", "model_result_decoded": [], "possible_answer": [{"population_projections": {"country": ["United States", "USA"], "years": [20], "growth_rate": ["", 1.2]}}]}
{"id": "simple_74", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'duplication_frequency': 6. Expected one of [1]."], "error_type": "value_error:others", "prompt": {"id": "simple_74", "question": [[{"role": "user", "content": "\u8a08\u7b97\u7d30\u83cc\u7a2e\u7fa4\u7684\u6f14\u5316\u901f\u7387\uff0c\u5f9e5000\u500b\u7d30\u83cc\u958b\u59cb\uff0c\u6bcf\u7a2e\u7d30\u83cc\u6bcf\u5c0f\u6642\u5fa9\u52366\u5c0f\u6642\u3002"}]], "function": [{"name": "calculate_bacteria_evolution_rate", "description": "Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration.", "parameters": {"type": "dict", "properties": {"start_population": {"type": "integer", "description": "The starting population of bacteria."}, "duplication_frequency": {"type": "integer", "description": "The frequency of bacteria duplication per hour."}, "duration": {"type": "integer", "description": "Total duration in hours."}, "generation_time": {"type": "integer", "description": "The average generation time of the bacteria in minutes. Default is 20 minutes"}}, "required": ["start_population", "duplication_frequency", "duration"]}}]}, "model_result_raw": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 6, "duration": 1}}], "model_result_decoded": [{"calculate_bacteria_evolution_rate": {"start_population": 5000, "duplication_frequency": 6, "duration": 1}}], "possible_answer": [{"calculate_bacteria_evolution_rate": {"start_population": [5000], "duplication_frequency": [1], "duration": [6], "generation_time": [20, ""]}}]}
{"id": "simple_76", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Optional parameter 'model' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_76", "question": [[{"role": "user", "content": "\u901a\u904e\u9054\u723e\u6587\u6a21\u578b\uff0c\u8b93\u6211\u9810\u6e2c\u63a5\u4e0b\u4f8650\u5e74\u7684Homo Sapiens\u7684\u9032\u5316\u7387"}]], "function": [{"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}]}, "model_result_raw": [{"prediction.evolution": {"species": "Homo Sapiens", "years": 50}}], "model_result_decoded": [{"prediction.evolution": {"species": "Homo Sapiens", "years": 50}}], "possible_answer": [{"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}]}
{"id": "simple_77", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "\u5728\u9644\u8fd1\u7684\u9910\u5ef3\u627e\u5230\u5728\u6d1b\u6749\u78ef\u63d0\u4f9b\u7d14\u7d20\u98df\u98df\u54c1\u7684\u9910\u5ef3\u3002"}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "[restaurant.find_nearby(location=\"Los Angeles, CA\", dietary_preference=[\"Vegan\"])]", "model_result_decoded": [], "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": "simple_81", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '\u820a\u91d1\u5c71'. Expected one of ['San Francisco', 'SF']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_81", "question": [[{"role": "user", "content": "\u907f\u514d\u4e86\u6536\u8cbb\u516c\u8def\uff0c\u627e\u5230\u5f9e\u820a\u91d1\u5c71\u5230\u6d1b\u6749\u78ef\u7684\u6700\u5feb\u8def\u7dda\u3002"}]], "function": [{"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": [{"map_routing.fastest_route": {"start_location": "\u820a\u91d1\u5c71", "end_location": "\u6d1b\u6749\u78ef", "avoid_tolls": true}}], "model_result_decoded": [{"map_routing.fastest_route": {"start_location": "\u820a\u91d1\u5c71", "end_location": "\u6d1b\u6749\u78ef", "avoid_tolls": true}}], "possible_answer": [{"map_routing.fastest_route": {"start_location": ["San Francisco", "SF"], "end_location": ["Los Angeles", "LA"], "avoid_tolls": [true]}}]}
{"id": "simple_82", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "\u8a08\u7b97\u6574\u6578\u5217\u8868\u7684\u5e73\u5747\u503c[12\u300115\u300118\u300120\u300121\u300126\u300130]\u3002"}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_83", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_83", "question": [[{"role": "user", "content": "\u8a08\u7b97\u5169\u500bGPS\u5750\u6a19\uff0833.4484 N\uff0c112.0740 W\uff09\u548c\uff0834.0522 N\uff0c118.2437 W\uff09\u7684\u8ddd\u96e2\u3002"}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}]}, "model_result_raw": "[{\"name\": \"calculate_distance\", \"arguments\": {\"coord1\": (33.4484, 112.0740), \"coord2\": (34.0522, 118.2437), \"unit\": \"miles\"}}]", "model_result_decoded": [], "possible_answer": [{"calculate_distance": {"coord1": [[33.4484, -112.074]], "coord2": [[34.0522, -118.2437]], "unit": ["miles"]}}]}
{"id": "simple_85", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_85", "question": [[{"role": "user", "content": "\u6ce2\u58eb\u9813\uff0c\u99ac\u85a9\u8af8\u585e\u5dde\u548c\u83ef\u76db\u9813\u7279\u5340\u4e4b\u9593\u7684\u5927\u7d04\u8ddd\u96e2\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation. Specify the location in the format of City, State."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation. Specify the location in the format of City, State."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[geo_distance.calculate(start_location=\"\u6ce2\u58eb\u9813\uff0c\u99ac\u85a9\u8af8\u585e\u5dde\", end_location=\"\u83ef\u76db\u9813\u7279\u5340\")]", "model_result_decoded": [], "possible_answer": [{"geo_distance.calculate": {"start_location": ["Boston, MA"], "end_location": ["Washington, D.C."], "units": ["miles", ""]}}]}
{"id": "simple_87", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "\u6309\u5347\u5e8f\u5c0d\u5217\u8868[5\uff0c3\uff0c4\uff0c1\uff0c2]\u9032\u884c\u6392\u5e8f\u3002"}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'school': '\u85cd\u9ce5\u9ad8\u4e2d'. Expected one of ['bluebirdhighschool', 'bluebirdhs']."], "error_type": "value_error:dict_value", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "\u5f9eStudentDB\u4e2d\u7372\u53d6\u6240\u6709\u5728\u201c\u85cd\u9ce5\u9ad8\u4e2d\u201d\u4e2d\u5b78\u7fd2\u79d1\u5b78\u7684\u5b78\u751f\u7684\u8a18\u9304\u3002"}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"school": "\u85cd\u9ce5\u9ad8\u4e2d", "department": "\u79d1\u5b78"}, "fetch_limit": 0}}], "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"school": "\u85cd\u9ce5\u9ad8\u4e2d", "department": "\u79d1\u5b78"}, "fetch_limit": 0}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_91", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "\u5728\u5468\u65e5\u958b\u653e\u7684\u6ce2\u58eb\u9813\uff0c\u7372\u5f97\u6700\u9ad8\u8a55\u50f9\u7684\u58fd\u53f8\u9910\u5ef3\u3002"}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"operating_days=Sunday\")]", "model_result_decoded": [], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_92", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_92", "question": [[{"role": "user", "content": "\u5f9eIMDB\u6578\u64da\u5eab\u4e2d\u627e\u52302010\u5e74Leonardo DiCaprio\u4e3b\u6f14\u7684\u6240\u6709\u96fb\u5f71\u3002"}]], "function": [{"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "dict", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). Default is 'all'"}}, "required": ["actor_name", "year"]}}]}, "model_result_raw": "[imdb.find_movies_by_actor(actor_name=\"Leonardo DiCaprio\", year=2010)]", "model_result_decoded": [], "possible_answer": [{"imdb.find_movies_by_actor": {"actor_name": ["Leonardo DiCaprio"], "year": [2010], "category": ["", "all"]}}]}
{"id": "simple_93", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_93", "question": [[{"role": "user", "content": "\u4e0b\u9031\u5728\u6d1b\u6749\u78ef\u9644\u8fd1\u7684\u5287\u9662\u4e2d\u7372\u53d6IMAX\u96fb\u5f71\u7684\u540d\u55ae\u3002"}]], "function": [{"name": "get_theater_movie_releases", "description": "Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the theaters."}, "timeframe": {"type": "integer", "description": "The number of days for which releases are required from current date."}, "format": {"type": "string", "description": "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, "required": ["location", "timeframe"]}}]}, "model_result_raw": "[get_theater_movie_releases(location=\"LA\", timeframe=7, format=\"IMAX\")]", "model_result_decoded": [], "possible_answer": [{"get_theater_movie_releases": {"location": ["LA"], "timeframe": [7], "format": ["IMAX"]}}]}
{"id": "simple_96", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table': 'users'. Expected one of ['user']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "\u5728\u7528\u6236\u8868\u4e2d\u7684\u6578\u64da\u5eab\u4e2d\u67e5\u627e\u5e74\u9f61\u5927\u65bc25\u6b72\u7684\u8a18\u9304\uff0c\u800c\u4f5c\u696d\u70ba\u201c\u5de5\u7a0b\u5e2b\u201d\u3002"}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": [{"database.query": {"table": "users", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "=", "value": "engineer"}]}}], "model_result_decoded": [{"database.query": {"table": "users", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "=", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_97", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_97", "question": [[{"role": "user", "content": "\u8a08\u7b97\u6578\u5b575\u7684\u968e\u4e58"}]], "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to compute factorial."}}, "required": ["number"]}}]}, "model_result_raw": "[math.factorial(number=5)]", "model_result_decoded": [], "possible_answer": [{"math.factorial": {"number": [5]}}]}
{"id": "simple_99", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "\u5c07\u6b63\u5f26\u6ce2\u5f9e0\u52302 pi\u7e6a\u88fd\u70ba5 Hz\u7684\u983b\u7387\u3002"}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2*pi, frequency=5)]", "model_result_decoded": [], "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": "simple_100", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_100", "question": [[{"role": "user", "content": "\u5149\u7dda\u5f9e4\u500b\u5149\u660e\u5e74\u7684\u6046\u661f\u5230\u9054\u5730\u7403\u9700\u8981\u591a\u5c11\u6642\u9593\uff1f"}]], "function": [{"name": "light_travel_time", "description": "Calculate the time taken for light to travel from a celestial body to another.", "parameters": {"type": "dict", "properties": {"distance_in_light_years": {"type": "integer", "description": "The distance between the two celestial bodies in light years."}, "speed_of_light": {"type": "integer", "description": "The speed of light in vacuum, in m/s. Default value is 299792458 m/s."}}, "required": ["distance_in_light_years"]}}]}, "model_result_raw": "[light_travel_time(distance_in_light_years=4)]", "model_result_decoded": [], "possible_answer": [{"light_travel_time": {"distance_in_light_years": [4], "speed_of_light": [299792458, ""]}}]}
{"id": "simple_101", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Optional parameter 'to_unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_101", "question": [[{"role": "user", "content": "\u5982\u679c\u7269\u9ad4\u572820\u79d2\u5167\u50b3\u64ad450\u7c73\uff0c\u5247\u8a08\u7b97\u7269\u9ad4\u7684\u901f\u5ea6\u3002"}]], "function": [{"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}]}, "model_result_raw": [{"calculate_speed": {"distance": 450, "time": 20}}], "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20}}], "possible_answer": [{"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}]}
{"id": "simple_102", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_102", "question": [[{"role": "user", "content": "\u5f9e\u5730\u7403\u5230\u6708\u7403\u5e7e\u82f1\u91cc\u7684\u8ddd\u96e2\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "dict", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'km'."}}, "required": ["body1", "body2"]}}]}, "model_result_raw": "[calculate_distance(body1=\"Earth\", body2=\"Moon\")]", "model_result_decoded": [], "possible_answer": [{"calculate_distance": {"body1": ["Earth"], "body2": ["Moon"], "unit": ["mi", "miles", "mile"]}}]}
{"id": "simple_103", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "\u8a08\u7b97\u66f2\u7dda\u4e0b\u7684\u9762\u7a4dy = 3x^2 + 2x -4\uff0c\u5728x = -1\u548cx = 2\u4e4b\u9593\u3002"}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_105", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "\u8a08\u7b97\u529f\u73874\u76843\u500b\u529f\u7387\u3002"}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "[math.power(base=4, exponent=3)]", "model_result_decoded": [], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_108", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_108", "question": [[{"role": "user", "content": "\u904b\u884c\u5177\u6709\u9810\u6e2c\u8b8a\u91cf\u201c\u5e74\u9f61\u201d\uff0c\u201c\u6536\u5165\u201d\u548c\u201c\u6559\u80b2\u201d\u7684\u7dda\u6027\u56de\u6b78\u6a21\u578b\uff0c\u4ee5\u53ca\u76ee\u6a19\u8b8a\u91cf'publice_amount'\u3002\u9084\u63a1\u7528\u6a19\u6e96\u5316\u3002"}]], "function": [{"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "simple_110", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_110", "question": [[{"role": "user", "content": "\u9810\u6e2c\u820a\u91d1\u5c71\u623f\u5c4b\u7684\u50f9\u683c\uff0c\u64c1\u67093\u9593\u81e5\u5ba4\uff0c2\u9593\u6d74\u5ba4\u548c1800\u5e73\u65b9\u82f1\u5c3a\u7684\u9762\u7a4d\u3002"}]], "function": [{"name": "predict_house_price", "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.", "parameters": {"type": "dict", "properties": {"bedrooms": {"type": "integer", "description": "The number of bedrooms in the house."}, "bathrooms": {"type": "integer", "description": "The number of bathrooms in the house."}, "area": {"type": "integer", "description": "The area of the house in square feet."}, "location": {"type": "string", "description": "The location of the house in the format of city name."}}, "required": ["bedrooms", "bathrooms", "area", "location"]}}]}, "model_result_raw": "[predict_house_price(bedrooms=3, bathrooms=2, area=1800, location=\"\u65e7\u91d1\u5c71\")]", "model_result_decoded": [], "possible_answer": [{"predict_house_price": {"bedrooms": [3], "bathrooms": [2], "area": [1800], "location": ["San Francisco", "San Francisco, CA"]}}]}
{"id": "simple_117", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'success_outcomes': 1. Expected one of [13]."], "error_type": "value_error:others", "prompt": {"id": "simple_117", "question": [[{"role": "user", "content": "\u5f9e52\u5f35\u5361\u7247\u7684\u6a19\u6e96\u7532\u677f\u4e0a\u62c9\u52d5\u5fc3\u81df\u897f\u88dd\u7684\u6a5f\u7387\u662f\u591a\u5c11\uff1f\u683c\u5f0f\u5316\u70ba\u6bd4\u7387\u3002"}]], "function": [{"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": [{"probability_of_event": {"success_outcomes": 1, "total_outcomes": 52, "format_as_ratio": true}}], "model_result_decoded": [{"probability_of_event": {"success_outcomes": 1, "total_outcomes": 52, "format_as_ratio": true}}], "possible_answer": [{"probability_of_event": {"success_outcomes": [13], "total_outcomes": [52], "format_as_ratio": [true]}}]}
{"id": "simple_119", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_119", "question": [[{"role": "user", "content": "\u5c0d\u5169\u500b\u7368\u7acb\u6a23\u672c\u9032\u884c\u6a23\u672c1\u7684\u7368\u7acb\u6a23\u672c\u9032\u884c\u5047\u8a2d\u6aa2\u9a57\uff1a[22,33,42,12,34]\u548c\u6837\u672c2\uff1a[23,45,44,44,14,38]\u7684\u986f\u8457\u6027\u6c34\u5e73\u70ba0.05\u3002"}]], "function": [{"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "dict", "properties": {"sample1": {"type": "array", "items": {"type": "integer"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "integer"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "float", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"hypothesis_testing.ttest_ind": {"sample1": [[22, 33, 42, 12, 34]], "sample2": [[23, 45, 44, 14, 38]], "significance_level": [0.05]}}]}
{"id": "simple_125", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u65e7\u91d1\u5c71'. Expected one of ['San Francisco', 'SF']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_125", "question": [[{"role": "user", "content": "\u6839\u64da\u5176\u9762\u7a4d\u70ba2500\u5e73\u65b9\u82f1\u5c3a\u7684\u9762\u7a4d\uff0c\u9810\u6e2c\u820a\u91d1\u5c71\u7684\u623f\u50f9\uff0c\u623f\u9593\u6578\u91cf\u70ba5\uff0c\u5efa\u7bc9\u5e74\u4efd\u70ba1990\u5e74\u3002"}]], "function": [{"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "dict", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}]}, "model_result_raw": [{"predict_house_price": {"area": 2500, "rooms": 5, "year": 1990, "location": "\u65e7\u91d1\u5c71"}}], "model_result_decoded": [{"predict_house_price": {"area": 2500, "rooms": 5, "year": 1990, "location": "\u65e7\u91d1\u5c71"}}], "possible_answer": [{"predict_house_price": {"area": [2500], "rooms": [5], "year": [1990], "location": ["San Francisco", "SF"]}}]}
{"id": "simple_126", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "\u4f7f\u7528\u767c\u52d5\u6a5f\u5c3a\u5bf8\u548c\u71c3\u6cb9\u7d93\u6fdf\u6027\u8b8a\u91cf\u7684\u6a21\u578b\u7684\u78ba\u5b9a\u4fc2\u6578\uff08R\u5e73\u65b9\uff09\u662f\u4ec0\u9ebc\uff0c\u53ef\u4ee5\u901a\u904ePATH C\uff1a/data/cars.csv\u4e2d\u7684\u6578\u64da\u96c6\u9810\u6e2cCAR_PRICE\uff1f"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "[linear_regression.get_r_squared(dataset_path=\"C:/data/cars.csv\", independent_variables=[\"engine_size\", \"fuel_efficiency\"], dependent_variable=\"car_price\")]", "model_result_decoded": [], "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_128", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "\u4e00\u5bb6\u516c\u53f8\u7684\u6bcf\u80a1\u5b63\u5ea6\u80a1\u606f\u662f\u4ec0\u9ebc\uff0c\u67091\u5104\u80a1\u6d41\u901a\u80a1\uff0c\u7e3d\u80a1\u606f\u652f\u51fa\u70ba5000\u842c\u7f8e\u5143\uff1f"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": "simple_133", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_133", "question": [[{"role": "user", "content": "\u9810\u6e2c5000\u7f8e\u5143\u6295\u8cc7\u7684\u672a\u4f86\u50f9\u503c\uff0c\u57283\u5e74\u5167\uff0c\u6bcf\u6708\u7684\u5229\u7387\u70ba5\uff05\uff0c\u6bcf\u6708\u5fa9\u5229\u3002"}]], "function": [{"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"finance.predict_future_value": {"present_value": [5000], "annual_interest_rate": [0.05], "compounding_periods_per_year": [12], "time_years": [3]}}]}
{"id": "simple_136", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "\u627e\u523010000\u7f8e\u5143\u6295\u8cc7\u7684\u8907\u5408\u5229\u606f\uff0c\u6bcf\u67085\uff05\u7684\u6bcf\u6708\u5229\u7387\u70ba5\u5e74\u3002"}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "simple_138", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_138", "question": [[{"role": "user", "content": "\u5982\u679c\u6211\u6295\u8cc75000\u7f8e\u5143\u7684\u80a1\u7968\u201c X\u201d\uff0c\u9810\u8a08\u5e74\u6536\u76ca\u70ba7\u5e74\uff0c\u5247\u8a08\u7b97\u6211\u7684\u6295\u8cc7\u7d44\u5408\u7684\u672a\u4f86\u50f9\u503c\u3002"}]], "function": [{"name": "portfolio_future_value", "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.", "parameters": {"type": "dict", "properties": {"stock": {"type": "string", "description": "The ticker symbol of the stock."}, "invested_amount": {"type": "integer", "description": "The invested amount in USD."}, "expected_annual_return": {"type": "float", "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"}, "years": {"type": "integer", "description": "The number of years for which the investment is made."}}, "required": ["stock", "invested_amount", "expected_annual_return", "years"]}}]}, "model_result_raw": "[portfolio_future_value(stock=\"X\", invested_amount=5000, expected_annual_return=0.07, years=7)]", "model_result_decoded": [], "possible_answer": [{"portfolio_future_value": {"stock": ["X"], "invested_amount": [5000], "expected_annual_return": [0.05], "years": [7]}}]}
{"id": "simple_141", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_141", "question": [[{"role": "user", "content": "\u7372\u5f97\u7576\u524d\u7684\u6bcf\u76ce\u53f8\u91d1\u50f9\u3002"}]], "function": [{"name": "get_metal_price", "description": "Retrieve the current price for a specified metal and measure.", "parameters": {"type": "dict", "properties": {"metal": {"type": "string", "description": "The metal whose price needs to be fetched."}, "measure": {"type": "string", "description": "The measure unit for price, like 'ounce' or 'kg'."}}, "required": ["metal", "measure"]}}]}, "model_result_raw": "[get_metal_price(metal=\"gold\", measure=\"ounce\")]", "model_result_decoded": [], "possible_answer": [{"get_metal_price": {"metal": ["Gold", "gold"], "measure": ["ounce"]}}]}
{"id": "simple_142", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_142", "question": [[{"role": "user", "content": "\u57282022\u5e743\u670811\u65e5\u6536\u76e4\u4e0a\u67e5\u627e\u4e9e\u99ac\u905c\u516c\u53f8\u7684\u7d0d\u65af\u9054\u514b\u80a1\u50f9\u3002"}]], "function": [{"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}]}, "model_result_raw": "[get_stock_price(company_name=\"Amazon\", date=\"2022-03-11\", exchange=\"NASDAQ\")]", "model_result_decoded": [], "possible_answer": [{"get_stock_price": {"company_name": ["Amazon", "AMZN"], "date": ["2022-03-11"], "exchange": ["NASDAQ", ""]}}]}
{"id": "simple_143", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_143", "question": [[{"role": "user", "content": "\u201c\u5728\u7d0d\u65af\u9054\u514b\u7372\u5f97\u860b\u679c\u7684\u80a1\u50f9\u3002\u201d"}]], "function": [{"name": "get_stock_price", "description": "Retrieve the stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The ticker symbol of the company."}, "days": {"type": "integer", "description": "Number of past days for which the stock price is required."}, "exchange": {"type": "string", "description": "The stock exchange where the company is listed, default is NYSE"}}, "required": ["company", "days"]}}]}, "model_result_raw": "[get_stock_price(company=\"AAPL\", days=1, exchange=\"NASDAQ\")]", "model_result_decoded": [], "possible_answer": [{"get_stock_price": {"company": ["AAPL"], "days": [5], "exchange": ["NASDAQ", ""]}}]}
{"id": "simple_144", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "\u5728\u904e\u53bb\u76845\u5929\u5167\u627e\u5230\u6a19\u6e96\u666e\u723e500\u6307\u6578\u548c\u9053\u74ca\u65af\u74ca\u65af\u7684\u5e02\u5834\u8868\u73fe\u3002"}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "[market_performance.get_data(indexes=[\"S&P 500\", \"Dow Jones\"], days=5)]", "model_result_decoded": [], "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_145", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'interest_rate': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "simple_145", "question": [[{"role": "user", "content": "\u8a08\u7b97\u521d\u59cb\u672c\u91d15000\u7f8e\u5143\u7684\u8907\u5408\u5229\u606f\uff0c\u5e74\u5229\u73875\uff05\uff0c\u8907\u5229\u671f\u70ba10\u5e74\u3002"}]], "function": [{"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given principal, interest rate, and period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial principal."}, "interest_rate": {"type": "float", "description": "The annual interest rate."}, "period": {"type": "integer", "description": "The period in years."}, "compounding_frequency": {"type": "string", "description": "The frequency of compounding per year. Defaults to 'Annually'.", "enum": ["Annually", "Semiannually", "Quarterly", "Monthly", "Daily"]}}, "required": ["principal", "interest_rate", "period"]}}]}, "model_result_raw": [{"calculate_compounded_interest": {"principal": 5000, "interest_rate": 5, "period": 10}}], "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "interest_rate": 5, "period": 10}}], "possible_answer": [{"calculate_compounded_interest": {"principal": [5000], "interest_rate": [0.05], "period": [10], "compounding_frequency": ["Annually", ""]}}]}
{"id": "simple_147", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_147", "question": [[{"role": "user", "content": "\u5728\u904e\u53bb2\u9031\u5167\u6aa2\u7d22Microsoft\u548cGoogle\u7684\u80a1\u7968\u50f9\u683c\u3002"}]], "function": [{"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}]}, "model_result_raw": "[get_stock_prices(companies=[\"Microsoft\", \"Google\"], duration=\"2 weeks\")]", "model_result_decoded": [], "possible_answer": [{"get_stock_prices": {"companies": [["Microsoft", "Google"]], "duration": ["2 weeks"]}}]}
{"id": "simple_149", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_149", "question": [[{"role": "user", "content": "\u860b\u679c\u548c\u5fae\u8edf\u76ee\u524d\u7684\u80a1\u50f9\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}]}, "model_result_raw": "[get_stock_price(company_names=[\"\u860b\u679c\", \"\u5fae\u8edf\"])]", "model_result_decoded": [], "possible_answer": [{"get_stock_price": {"company_names": [["Apple", "Microsoft"], [["Apple"], ["Microsoft"]], ["AAPL", "MSFT"]]}}]}
{"id": "simple_150", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": [[{"role": "user", "content": "\u8a08\u7b97\u9280\u884c\u5132\u84c4\u5e33\u6236\u7684\u6295\u8cc7\u56de\u5831\u7387\uff0c\u62bc\u91d1\u70ba1000\u7f8e\u5143\uff0c\u5e74\u5229\u7387\u70ba1\u5e743\uff05\u3002"}]], "function": [{"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}]}, "model_result_raw": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3.0, "years": 1}}], "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3.0, "years": 1}}], "possible_answer": [{"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}]}
{"id": "simple_151", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "\u627e\u52302020\u5e74\u7f8e\u570b\u7e3d\u7968\u623f\u6700\u9ad8\u7684\u9280\u884c\u3002"}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "[highest_grossing_banks(country=\"USA\", year=2020)]", "model_result_decoded": [], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": "simple_156", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_156", "question": [[{"role": "user", "content": "\u67e5\u627e\u8056\u5730\u4e9e\u54e5\u7e23\u6848\u4ef6\u7de8\u865fCA123456\u7684\u91cd\u7f6a\u72af\u7f6a\u8a18\u9304\u7684\u8a73\u7d30\u4fe1\u606f"}]], "function": [{"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}]}, "model_result_raw": "[crime_record.get_record(case_number=\"CA123456\", county=\"San Diego\", details=True)]", "model_result_decoded": [], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "simple_157", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'birth_date': '01-01-1990'. Expected one of ['01-01-1980']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_157", "question": [[{"role": "user", "content": "\u627e\u51fa\u4e00\u500b\u751f\u65e5\u7684\u7d04\u7ff0\u00b7\u591a\u4f0a\uff08John Doe\uff09\u662f\u5426\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6709\u4efb\u4f55\u91cd\u7f6a\u5b9a\u7f6a\u3002"}]], "function": [{"name": "criminal_history.check_felonies", "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.", "parameters": {"type": "dict", "properties": {"full_name": {"type": "string", "description": "The full name of the individual."}, "birth_date": {"type": "string", "description": "The birth date of the individual. Must be in MM-DD-YYYY format."}, "state": {"type": "string", "description": "The state to search the criminal record in. Default to 'None', which the function will search across all states."}}, "required": ["full_name", "birth_date"]}}]}, "model_result_raw": [{"criminal_history.check_felonies": {"full_name": "John Doe", "birth_date": "01-01-1990", "state": "California"}}], "model_result_decoded": [{"criminal_history.check_felonies": {"full_name": "John Doe", "birth_date": "01-01-1990", "state": "California"}}], "possible_answer": [{"criminal_history.check_felonies": {"full_name": ["John Doe"], "birth_date": ["01-01-1980"], "state": ["California", "CA"]}}]}
{"id": "simple_158", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "\u57282012\u5e74\u81f32015\u5e74\u9593\uff0c\u5728\u7d10\u7d04X\u5148\u751f\u5728\u7d10\u7d04\u627e\u5230\u5211\u4e8b\u6848\u4ef6\u7684\u4fe1\u606f\u3002"}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "[get_criminal_records(name=\"X\", location=\"New York, NY\", from_year=2012, to_year=2015)]", "model_result_decoded": [], "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": "simple_159", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_159", "question": [[{"role": "user", "content": "\u7d66\u62112013\u5e74\u7684\u5211\u6cd5\u4fee\u6b63\u6848\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}]}, "model_result_raw": "[get_act_details(act_name=\"\u5211\u6cd5\", amendment_year=2013)]", "model_result_decoded": [], "possible_answer": [{"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}]}
{"id": "simple_160", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'court': '\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde'. Expected one of ['California', 'CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_160", "question": [[{"role": "user", "content": "\u8ab0\u662f\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u67092022/AL2562\u7684\u6848\u4ef6\u4e2d\u7684\u53d7\u5bb3\u8005\uff1f"}]], "function": [{"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "dict", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}]}, "model_result_raw": [{"get_case_info": {"docket": "2022/AL2562", "court": "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde", "info_type": "victim"}}], "model_result_decoded": [{"get_case_info": {"docket": "2022/AL2562", "court": "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde", "info_type": "victim"}}], "possible_answer": [{"get_case_info": {"docket": ["2022/AL2562"], "court": ["California", "CA"], "info_type": ["victim"]}}]}
{"id": "simple_162", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'contract_type': 'lease'. Expected one of ['Rental Agreement', 'rental agreement']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u751f\u7522\u7d04\u7ff0\u548c\u611b\u9e97\u7d72\u4e4b\u9593\u7684\u79df\u8cc3\u5354\u8b70\u4e4b\u9593\u7684\u5b9a\u5236\u6cd5\u5f8b\u5408\u540c\u3002"}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "lease", "location": "California"}}], "model_result_decoded": [{"generate_law_contract": {"parties": ["John", "Alice"], "contract_type": "lease", "location": "California"}}], "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": "simple_163", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'address': 'Main Street 123'. Expected one of ['123 main street']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "\u70ba\u6211\u63d0\u4f9b\u4f4d\u65bcMain Street 123\u865f\u623f\u5c4b\u7684\u8ca1\u7522\u8a18\u9304\uff0c\u5728\u8056\u514b\u62c9\u62c9\u7e23\u7684\u5305\u88f9\u7de8\u865f\u70ba1234567890\u3002\u5728\u97ff\u61c9\u4e2d\u5305\u62ec\u6240\u6709\u8005\u4fe1\u606f\u3002"}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": [{"property_records.get": {"address": "Main Street 123", "parcel_number": "1234567890", "county": "Santa Clara", "include_owner": true}}], "model_result_decoded": [{"property_records.get": {"address": "Main Street 123", "parcel_number": "1234567890", "county": "Santa Clara", "include_owner": true}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": "simple_164", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_164", "question": [[{"role": "user", "content": "\u57282020\u5e74\u70ba\u6211\u63d0\u4f9b\u820a\u91d1\u5c71\u66b4\u529b\u72af\u7f6a\u7684\u5b98\u65b9\u72af\u7f6a\u7387\u3002"}]], "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default is 'violent'"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Default is year 2001."}}, "required": ["city", "state"]}}]}, "model_result_raw": "[get_crime_rate(city=\"San Francisco\", state=\"California\", year=2020)]", "model_result_decoded": [], "possible_answer": [{"get_crime_rate": {"city": ["San Francisco"], "state": ["California", "CA"], "type": ["violent", ""], "year": [2020]}}]}
{"id": "simple_165", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "\u5f9e2020\u5e74\u958b\u59cb\u95dc\u65bc\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6d1b\u6749\u78ef\u76dc\u7aca\u72af\u7f6a\u7684\u6848\u4ef6"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "[civil_cases.retrieve(year=2020, crime_type=\"theft\", location=\"Los Angeles\")]", "model_result_decoded": [], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_166", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u627e\u5230\u4e00\u540d\u5c08\u9580\u7814\u7a76\u96e2\u5a5a\u6848\u4ef6\u7684\u5f8b\u5e2b\uff0c\u6bcf\u5c0f\u6642\u8cbb\u7528\u4e0d\u5230400\u7f8e\u5143\u3002"}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city=\"Chicago, IL\", specialty=[\"Divorce\"], fee=399)]", "model_result_decoded": [], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_168", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_168", "question": [[{"role": "user", "content": "\u641c\u7d22\u82072021\u5e741\u67081\u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde1\u67081\u65e5\u4e4b\u5f8c\u63d0\u4ea4\u7684\u516c\u53f8\u201c Google\u201d\u6709\u95dc\u7684\u6301\u7e8c\u8a34\u8a1f\u3002"}]], "function": [{"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "[lawsuit_search(company=\"Google\", start_date=\"01-01-2021\", location=\"California\", status=\"ongoing\")]", "model_result_decoded": [], "possible_answer": [{"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}]}
{"id": "simple_171", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'case_number': 123456. Expected one of [43403]."], "error_type": "value_error:others", "prompt": {"id": "simple_171", "question": [[{"role": "user", "content": "2018\u5e74\uff0c\u5728\u7d10\u7d04\u6cd5\u9662\u7372\u53d6\u5f8b\u5e2b\u6848\u4ef6\u7684\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "fetch_law_case_details", "description": "Fetch details of a specific law case based on case number, year and court.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "integer", "description": "The specific number of the law case."}, "court": {"type": "string", "description": "The city name where the court takes place"}, "year": {"type": "integer", "description": "The year in which the law case took place."}}, "required": ["case_number", "court", "year"]}}]}, "model_result_raw": [{"fetch_law_case_details": {"case_number": 123456, "court": "New York", "year": 2018}}], "model_result_decoded": [{"fetch_law_case_details": {"case_number": 123456, "court": "New York", "year": 2018}}], "possible_answer": [{"fetch_law_case_details": {"case_number": [43403], "court": ["New York"], "year": [2018]}}]}
{"id": "simple_174", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_174", "question": [[{"role": "user", "content": "\u8b93\u6211\u6210\u70ba\u4e2d\u570b\u61b2\u6cd5\u4e2d\u5341\u5927\u7684\u91cc\u7a0b\u7891\u5f0f\u6848\u4ef6\u3002"}]], "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}]}, "model_result_raw": "[get_top_cases(field_of_law=\"constitutional law\", top_number=10, country=\"China\")]", "model_result_decoded": [], "possible_answer": [{"get_top_cases": {"field_of_law": ["constitutional law", "constitutional"], "top_number": [10], "country": ["China", "CN"]}}]}
{"id": "simple_175", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_175", "question": [[{"role": "user", "content": "\u5f8b\u5e2b\u7d04\u7ff0\u00b7\u591a\u4f0a\uff08John Doe\uff09\u5728\u8655\u7406\u7834\u7522\u6848\u4ef6\u65b9\u9762\u64c1\u6709\u591a\u5c11\u500b\u6708\u7684\u7d93\u9a57\u3002"}]], "function": [{"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}]}, "model_result_raw": "[lawyer.get_experience(name=\"John Doe\", law_type=\"Bankruptcy\")]", "model_result_decoded": [], "possible_answer": [{"lawyer.get_experience": {"name": ["John Doe"], "law_type": ["Bankruptcy"]}}]}
{"id": "simple_176", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_176", "question": [[{"role": "user", "content": "\u67e5\u627e\u6d89\u53ca\u201c\u860b\u679c\u516c\u53f8\u201d\u7684\u5c08\u5229\u8a34\u8a1f\u7684\u8a73\u7d30\u4fe1\u606f\u3002\u5f9e2010\u5e74\u958b\u59cb\u3002"}]], "function": [{"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "[lawsuit_details.find(company_name=\"\u860b\u679c\u516c\u53f8\", year=2010)]", "model_result_decoded": [], "possible_answer": [{"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}]}
{"id": "simple_177", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "\u57282018\u5e74\u67e5\u627eFacebook\u7684\u6240\u6709\u5c08\u5229\u8a34\u8a1f\u6848\u4ef6\u3002"}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "[get_lawsuit_cases(company_name=\"Facebook\", year=2018)]", "model_result_decoded": [], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_179", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_179", "question": [[{"role": "user", "content": "\u627e\u5230\u860b\u679c\u548c\u4e09\u661f\u4e4b\u9593\u7684\u6700\u65b0\u6cd5\u5ead\u6848\u4ef6\u767c\u751f\u5728\u7f8e\u570b\u3002"}]], "function": [{"name": "find_latest_court_case", "description": "Find the latest court case between two companies.", "parameters": {"type": "dict", "properties": {"company1": {"type": "string", "description": "The name of the first company."}, "company2": {"type": "string", "description": "The name of the second company."}, "country": {"type": "string", "description": "The country in which the court case is located.", "default": "USA"}}, "required": ["company1", "company2"]}}]}, "model_result_raw": "[find_latest_court_case(company1=\"Apple\", company2=\"Samsung\", country=\"USA\")]", "model_result_decoded": [], "possible_answer": [{"find_latest_court_case": {"company1": ["Apple"], "company2": ["Samsung"], "country": ["USA", ""]}}]}
{"id": "simple_180", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde'. Expected one of ['California', 'CA']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_180", "question": [[{"role": "user", "content": "\u67e5\u627e2020\u5e74\u5c0d\u52a0\u5229\u798f\u5c3c\u4e9e\u5ddeGoogle\u516c\u53f8\u63d0\u8d77\u7684\u8a34\u8a1f\u3002"}]], "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."}}, "required": ["company_name", "location", "year"]}}]}, "model_result_raw": [{"lawsuits_search": {"company_name": "Google", "location": "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde", "year": 2020}}], "model_result_decoded": [{"lawsuits_search": {"company_name": "Google", "location": "\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde", "year": 2020}}], "possible_answer": [{"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}]}
{"id": "simple_181", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_181", "question": [[{"role": "user", "content": "\u7372\u53d6\u6848\u4ef6\u7de8\u865f\u70ba\u201c 123456-ABC\u201d\u7684\u8a34\u8a1f\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u4e26\u5728\u6d1b\u6749\u78ef\u6cd5\u9662\u63d0\u8d77\u8a34\u8a1f"}]], "function": [{"name": "get_lawsuit_details", "description": "Retrieve details of a lawsuit based on its case number and court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "Case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the lawsuit was filed."}, "with_verdict": {"type": "boolean", "description": "Flag to include verdict details if available. Default is False"}}, "required": ["case_number", "court_location"]}}]}, "model_result_raw": "[get_lawsuit_details(case_number=\"123456-ABC\", court_location=\"Los Angeles\")]", "model_result_decoded": [], "possible_answer": [{"get_lawsuit_details": {"case_number": ["123456-ABC"], "court_location": ["Los Angeles"], "with_verdict": [true]}}]}
{"id": "simple_182", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_182", "question": [[{"role": "user", "content": "\u6aa2\u7d22\u6848\u4ef6\u7de8\u865fXYZ123\u7684\u6240\u6709\u8a34\u8a1f\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is 2023 if not specified.", "optional": true, "default": 2023}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}]}, "model_result_raw": "[lawsuit_info(case_number=\"XYZ123\")]", "model_result_decoded": [], "possible_answer": [{"lawsuit_info": {"case_number": ["XYZ123"], "year": ["", 2023], "location": ["", "all"]}}]}
{"id": "simple_183", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_183", "question": [[{"role": "user", "content": "\u641c\u7d22\u76ee\u524d\u91dd\u5c0d\u8056\u514b\u62c9\u62c9\u7e23\u91dd\u5c0d\u860b\u679c\u63d0\u8d77\u7684\u8a34\u8a1f\u3002"}]], "function": [{"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}]}, "model_result_raw": "[lawsuit_search(entity=\"Apple\", county=\"Santa Clara\")]", "model_result_decoded": [], "possible_answer": [{"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County", "Santa Clara"], "state": ["California", ""]}}]}
{"id": "simple_185", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_185", "question": [[{"role": "user", "content": "\u5728\u63a5\u4e0b\u4f86\u768472\u5c0f\u6642\u5167\uff0c\u5305\u62ec\u964d\u6c34\u5728\u5167\u7684\u7d10\u7d04\u5929\u6c23\u5c07\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}]}, "model_result_raw": "[detailed_weather_forecast(location=\"New York\", duration=72, include_precipitation=True)]", "model_result_decoded": [], "possible_answer": [{"detailed_weather_forecast": {"location": ["New York", "New York, USA"], "duration": [72], "include_precipitation": [true]}}]}
{"id": "simple_187", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_187", "question": [[{"role": "user", "content": "\u83ef\u76db\u9813\u897f\u96c5\u5716\u7684\u7576\u524d\u6eab\u5ea6\u548c\u6fd5\u5ea6\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}]}, "model_result_raw": "[get_current_weather(location=\"\u897f\u96c5\u5716\", include_temperature=true, include_humidity=true)]", "model_result_decoded": [], "possible_answer": [{"get_current_weather": {"location": ["Seattle", "Seattle, Washington"], "include_temperature": [true, ""], "include_humidity": [true, ""]}}]}
{"id": "simple_188", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6'. Expected one of ['Miami', 'Miami, Florida']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_188", "question": [[{"role": "user", "content": "\u63a5\u4e0b\u4f86\u76847\u5929\u5728\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6\u7684\u6fd5\u5ea6\u6c34\u5e73\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Default is 0."}}, "required": ["location", "days"]}}]}, "model_result_raw": [{"weather.humidity_forecast": {"location": "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6", "days": 7}}], "model_result_decoded": [{"weather.humidity_forecast": {"location": "\u4f5b\u7f85\u91cc\u9054\u5dde\u9081\u963f\u5bc6", "days": 7}}], "possible_answer": [{"weather.humidity_forecast": {"location": ["Miami", "Miami, Florida"], "days": [7], "min_humidity": ["", 0]}}]}
{"id": "simple_191", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u4e39\u4f5b'. Expected one of ['Denver, Colorado', 'Denver', 'CO']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_191", "question": [[{"role": "user", "content": "\u5728\u79d1\u7f85\u62c9\u591a\u5dde\u4e39\u4f5b50\u516c\u91cc\u5167\u627e\u5230\u6211\u76845\u500b\u6700\u9ad8\u7684\u5c71\u8108\u3002"}]], "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "integer", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}]}, "model_result_raw": [{"locate_tallest_mountains": {"location": "\u4e39\u4f5b", "radius": 50, "amount": 5}}], "model_result_decoded": [{"locate_tallest_mountains": {"location": "\u4e39\u4f5b", "radius": 50, "amount": 5}}], "possible_answer": [{"locate_tallest_mountains": {"location": ["Denver, Colorado", "Denver", "CO"], "radius": [50], "amount": [5]}}]}
{"id": "simple_193", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u591a\u502b\u591a'. Expected one of ['Toronto']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "\u5728\u591a\u502b\u591a\u627e\u5230\u6700\u597d\u7684\u7576\u5730\u6258\u5152\u6240\uff0c\u64c1\u6709\u5404\u7a2e\u5404\u6a23\u7684\u5e74\u5ea6\u690d\u7269\u3002"}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": [{"local_nursery.find": {"location": "\u591a\u502b\u591a", "plant_types": ["Annual"]}}], "model_result_decoded": [{"local_nursery.find": {"location": "\u591a\u502b\u591a", "plant_types": ["Annual"]}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_194", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_194", "question": [[{"role": "user", "content": "\u5728\u9810\u9632\u4fb5\u8755\u65b9\u9762\uff0c\u6700\u9069\u5408\u5c71\u5761\u7684\u524d\u4e09\u690d\u7269\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_plants_for_slope", "description": "Retrieve the list of plants suitable for slope based on erosion control ability.", "parameters": {"type": "dict", "properties": {"slope_type": {"type": "string", "description": "The type of slope like steep, moderate etc."}, "num_results": {"type": "integer", "description": "The number of top results needed. Default is 5."}}, "required": ["slope_type", "num_results"]}}]}, "model_result_raw": "[get_plants_for_slope(slope_type=\"steep\", num_results=3)]", "model_result_decoded": [], "possible_answer": [{"get_plants_for_slope": {"slope_type": ["hill", "steep", "moderate"], "num_results": [3]}}]}
{"id": "simple_196", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u502b\u6566'. Expected one of ['London']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "\u502b\u65662022/08/16\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": [{"air_quality": {"location": "\u502b\u6566", "date": "2022/08/16"}}], "model_result_decoded": [{"air_quality": {"location": "\u502b\u6566", "date": "2022/08/16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_197", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_197", "question": [[{"role": "user", "content": "\u5728\u4e0b\u534812\u9ede\u5728\u8056\u5730\u4e9e\u54e5\u627e\u5230\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002"}]], "function": [{"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}]}, "model_result_raw": "[get_air_quality_index(location=\"\u8056\u5730\u4e9e\u54e5\", time=\"12:00 PM\")]", "model_result_decoded": [], "possible_answer": [{"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}]}
{"id": "simple_199", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_199", "question": [[{"role": "user", "content": "\u5728\u63a5\u4e0b\u4f86\u7684\u4e09\u5929\u4e2d\u627e\u5230\u8056\u4f55\u585e\u7684\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u3002"}]], "function": [{"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}]}, "model_result_raw": "[environmental_data.air_quality_index(location=\"\u8056\u4f55\u585e\", days=3)]", "model_result_decoded": [], "possible_answer": [{"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}]}
{"id": "simple_200", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fuel_type': 'gasoline'. Expected one of ['gas']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_200", "question": [[{"role": "user", "content": "\u6bcf\u5e74\u6bcf\u5e74\u884c\u99db12,000\u82f1\u91cc\u7684\u6c7d\u6cb9\u6c7d\u8eca\u6bcf\u5e74\u751f\u7522\u591a\u5c11\u4e8c\u6c27\u5316\u78b3\uff0c\u71c3\u6cb9\u6548\u7387\u70ba25 mpg\uff1f"}]], "function": [{"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}]}, "model_result_raw": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25}}], "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gasoline", "fuel_efficiency": 25}}], "possible_answer": [{"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}]}
{"id": "simple_201", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_201", "question": [[{"role": "user", "content": "\u4f30\u8a08\u4e2d\u570b\u91ce\u5916\u5927\u718a\u8c93\u7684\u7a2e\u7fa4\u3002"}]], "function": [{"name": "estimate_population", "description": "Estimate the population of a particular species in a given country.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which population needs to be estimated."}, "country": {"type": "string", "description": "The country where the species lives."}, "year": {"type": "integer", "description": "The year for which population estimate is sought. Default is the current year."}}, "required": ["species", "country"]}}]}, "model_result_raw": "[estimate_population(species=\"giant_panda\", country=\"China\")]", "model_result_decoded": [], "possible_answer": [{"estimate_population": {"species": ["panda", "pandas"], "country": ["China", "CN"], "year": ["", 2024]}}]}
{"id": "simple_202", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "\u5982\u679c\u6211\u5728\u52a0\u5229\u798f\u5c3c\u4e9e\u5dde\u6539\u75283\u500b\u6708\u7684\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u6211\u5c07\u7bc0\u7701\u591a\u5c11\u6eab\u5ba4\u6c23\u9ad4\u6392\u653e\uff1f"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": "simple_203", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_203", "question": [[{"role": "user", "content": "\u60a8\u80fd\u627e\u5230\u6709\u95dc\u829d\u52a0\u54e5\u7a7a\u6c23\u8cea\u91cf\u6307\u6578\u548c\u6c61\u67d3\u6578\u64da\u7684\u6700\u65b0\u4fe1\u606f\u55ce\uff1f"}]], "function": [{"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "[get_air_quality(location=\"Chicago\", detail=True)]", "model_result_decoded": [], "possible_answer": [{"get_air_quality": {"location": ["Chicago"], "detail": [true]}}]}
{"id": "simple_204", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_204", "question": [[{"role": "user", "content": "\u572810\u82f1\u91cc\u5167\u627e\u5230\u6211\u9644\u8fd1\u7684\u9910\u9928\uff0c\u5728\u897f\u96c5\u5716\u63d0\u4f9b\u4e2d\u570b\u7f8e\u98df\u3002"}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "[restaurant.find_nearby(location=\"Seattle, WA\", cuisine=\"Chinese\", max_distance=10)]", "model_result_decoded": [], "possible_answer": [{"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}]}
{"id": "simple_205", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_205", "question": [[{"role": "user", "content": "\u627e\u51fa\u5f9e\u6ce2\u58eb\u9813\u958b\u8eca\u5230\u7d10\u7d04\u7684\u7576\u524d\u4ea4\u901a\u72c0\u6cc1\u3002"}]], "function": [{"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "[get_traffic_info(start_location=\"\u6ce2\u58eb\u9813\", end_location=\"\u7d10\u7d04\", mode=\"driving\")]", "model_result_decoded": [], "possible_answer": [{"get_traffic_info": {"start_location": ["Boston"], "end_location": ["New York", "NYC"], "mode": ["driving", ""]}}]}
{"id": "simple_206", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_206", "question": [[{"role": "user", "content": "\u5728\u502b\u6566\u627e\u5230\u6700\u8fd1\u6709\u7db2\u7403\u5834\u7684\u516c\u5712\u3002"}]], "function": [{"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park. Default is ['Running Track']"}}, "required": ["location"]}}]}, "model_result_raw": "[parks.find_nearby(location=\"London, UK\", amenities=[\"Tennis Court\"])]", "model_result_decoded": [], "possible_answer": [{"parks.find_nearby": {"location": ["London", "London, UK"], "amenities": [["Tennis Court"]]}}]}
{"id": "simple_207", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '\u7d10\u7d04'. Expected one of ['New York, USA', 'New York City', 'New York City, NY', 'NYC', 'NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_207", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\uff0c\u7f8e\u570b\u548c\u7f8e\u570b\u9081\u963f\u5bc6\u4e4b\u9593\u53d6\u5f97\u6700\u77ed\u7684\u884c\u99db\u8ddd\u96e2\u3002"}]], "function": [{"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": [{"calculate_shortest_distance": {"start_location": "\u7d10\u7d04", "end_location": "\u7f8e\u570b\u9081\u963f\u5bc6", "route_preference": "Shortest"}}], "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "\u7d10\u7d04", "end_location": "\u7f8e\u570b\u9081\u963f\u5bc6", "route_preference": "Shortest"}}], "possible_answer": [{"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}]}
{"id": "simple_208", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "\u5f9e\u7d10\u7d04\u5230\u6d1b\u6749\u78ef\u907f\u958b\u9ad8\u901f\u516c\u8def\u548c\u6536\u8cbb\u516c\u8def\u7684\u6307\u793a\u3002"}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "[map_service.get_directions(start=\"New York\", end=\"Los Angeles\", avoid=[\"highways\", \"tolls\"])]", "model_result_decoded": [], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_209", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "\u5728\u99ac\u85a9\u8af8\u585e\u5dde\u6ce2\u58eb\u9813\u627e\u5230\u6700\u8fd1\u7684\u516c\u5171\u5716\u66f8\u9928\uff0c\u5176\u4e2d\u5305\u542b\u82f1\u8a9e\u5c0f\u8aaa\u90e8\u5206\u548c\u514d\u8cbb\u7684Wi-Fi\u3002"}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "[public_library.find_nearby(location=\"Boston, MA\", facilities=[\"Fiction\", \"Wi-Fi\"])]", "model_result_decoded": [], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_210", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_210", "question": [[{"role": "user", "content": "\u5728\u7f8e\u570b\u7372\u53d6\u6709\u95dc\u6bd4\u7279\u5e63\u76845\u500b\u6700\u65b0\u6d88\u606f"}]], "function": [{"name": "get_news", "description": "Fetches the latest news on a specific topic.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject for the news topic."}, "quantity": {"type": "integer", "description": "Number of articles to fetch."}, "region": {"type": "string", "description": "The geographical region for the news. Default is 'US'."}}, "required": ["topic", "quantity"]}}]}, "model_result_raw": "[get_news(topic=\"\u6bd4\u7279\u5e63\", quantity=5, region=\"US\")]", "model_result_decoded": [], "possible_answer": [{"get_news": {"topic": ["Bitcoin"], "quantity": [5], "region": ["US", ""]}}]}
{"id": "simple_211", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'subject': '\u6703\u8b70'. Expected one of ['Meeting']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_211", "question": [[{"role": "user", "content": "\u901a\u904ejohn.doe@example.com\u5c07\u96fb\u5b50\u90f5\u4ef6\u767c\u9001\u7d66\u7d04\u7ff0\u00b7\u675c\uff08John Doe\uff09\uff0c\u4e3b\u984c\u201c\u6703\u8b70\u201d\u548c\u201c\u8eab\u9ad4\u201d\u548c\u201c\u660e\u5929\u4e0a\u534810\u9ede\u201d\u3002"}]], "function": [{"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is empty if not specified."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is empty if not specified."}}, "required": ["to", "subject", "body"]}}]}, "model_result_raw": [{"send_email": {"to": "john.doe@example.com", "subject": "\u6703\u8b70", "body": "\u660e\u5929\u4e0a\u534810\u9ede"}}], "model_result_decoded": [{"send_email": {"to": "john.doe@example.com", "subject": "\u6703\u8b70", "body": "\u660e\u5929\u4e0a\u534810\u9ede"}}], "possible_answer": [{"send_email": {"to": ["john.doe@example.com"], "subject": ["Meeting"], "body": ["Let's meet at 10 AM tomorrow", "Let's meet at 10 AM tomorrow."], "cc": [""], "bcc": [""]}}]}
{"id": "simple_212", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_212", "question": [[{"role": "user", "content": "\u7d66\u6211\u6709\u95dc\u860b\u679c\u516c\u53f8\u80a1\u7968\u7684\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}]}, "model_result_raw": "[get_stock_info(company_name=\"Apple\", detail_level=\"detailed\")]", "model_result_decoded": [], "possible_answer": [{"get_stock_info": {"company_name": ["Apple Inc."], "detail_level": ["detailed"], "market": ["", "NASDAQ"]}}]}
{"id": "simple_213", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'departure_location': '\u820a\u91d1\u5c71'. Expected one of ['San Francisco', 'SF']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_213", "question": [[{"role": "user", "content": "\u57282022-04-27\u4e0b\u5348\u9810\u8a02\u5f9e\u820a\u91d1\u5c71\u5230\u502b\u6566\u7684\u76f4\u63a5\u822a\u73ed"}]], "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'morning'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false."}}, "required": ["departure_location", "destination_location", "date"]}}]}, "model_result_raw": [{"flight.book": {"departure_location": "\u820a\u91d1\u5c71", "destination_location": "\u502b\u6566", "date": "2022-04-27", "time": "\u4e0b\u5348", "direct_flight": true}}], "model_result_decoded": [{"flight.book": {"departure_location": "\u820a\u91d1\u5c71", "destination_location": "\u502b\u6566", "date": "2022-04-27", "time": "\u4e0b\u5348", "direct_flight": true}}], "possible_answer": [{"flight.book": {"departure_location": ["San Francisco", "SF"], "destination_location": ["London"], "date": ["2022-04-27", "04/27/2022", "Apr 27, 2022"], "time": ["afternoon", ""], "direct_flight": [true]}}]}
{"id": "simple_214", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'days_ahead': 7. Expected one of [30]."], "error_type": "value_error:others", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u641c\u7d22\u5373\u5c07\u8209\u884c\u7684\u6416\u6efe\u97f3\u6a02\u6703\u3002"}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "rock", "days_ahead": 7}}], "model_result_decoded": [{"event_finder.find_upcoming": {"location": "New York, NY", "genre": "rock", "days_ahead": 7}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": "simple_215", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'title': '\u661f\u969b'. Expected one of ['Interstellar']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "\u7d66\u6211\u7c21\u8981\u4ecb\u7d39\u96fb\u5f71\u201c\u661f\u969b\u201d"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": [{"movie_details.brief": {"title": "\u661f\u969b"}}], "model_result_decoded": [{"movie_details.brief": {"title": "\u661f\u969b"}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_216", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'text': '\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002'. Expected one of [\"I love the food here! It's always fresh and delicious.\"]. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_216", "question": [[{"role": "user", "content": "\u5206\u6790\u5ba2\u6236\u8a55\u8ad6\u7684\u60c5\u611f\u201c\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002'\u3002"}]], "function": [{"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}]}, "model_result_raw": [{"sentiment_analysis": {"text": "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002", "language": "zh"}}], "model_result_decoded": [{"sentiment_analysis": {"text": "\u6211\u559c\u6b61\u9019\u88e1\u7684\u98df\u7269\uff01\u5b83\u7e3d\u662f\u65b0\u9bae\u53c8\u7f8e\u5473\u7684\u3002", "language": "zh"}}], "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English", "en"]}}]}
{"id": "simple_217", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_217", "question": [[{"role": "user", "content": "\u5f9e\u591a\u6ce2\u6bb5\u5e8f\u5217\u4e2d\u5206\u6790\u301c/data/myfmri.nii\u4e2d\u7684fMRI\u6578\u64da\uff0c\u8a72\u5e8f\u5217\u4ee56mm\u7684\u901f\u5ea6\u5e73\u6ed1\uff0c\u4ee5\u53ca\u5404\u5411\u540c\u6027\u9ad4\u7d20\u5927\u5c0f\u70ba2mm\u3002"}]], "function": [{"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}]}, "model_result_raw": "[fMRI.analyze(data_source=\"/data/myfmri.nii\", sequence_type=\"multi\", smooth=6, voxel_size=2)]", "model_result_decoded": [], "possible_answer": [{"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}]}
{"id": "simple_218", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_218", "question": [[{"role": "user", "content": "\u7d66\u4e88ID 546382\u7684\u60a3\u8005\uff0c\u4ee5\u201c\u7d50\u8ad6\u201d\u72c0\u614b\u6aa2\u7d22\u5176\u5927\u8166MRI\u5831\u544a\u3002"}]], "function": [{"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "dict", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI. Default to be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}]}, "model_result_raw": "[patient.get_mri_report(patient_id=\"546382\", status=\"concluded\")]", "model_result_decoded": [], "possible_answer": [{"patient.get_mri_report": {"patient_id": ["546382"], "mri_type": ["brain", ""], "status": ["concluded"]}}]}
{"id": "simple_219", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_219", "question": [[{"role": "user", "content": "\u5728\u5927\u9f20\u5927\u8166\u4e2d\u7522\u751fGABA\u795e\u7d93\u905e\u8cea\u7684\u5927\u8166\u90e8\u5206\u4e2d\u795e\u7d93\u5143\u7684\u5750\u6a19\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_neuron_coordinates", "description": "Retrieve the coordinates of the specified neuron in the rat's brain.", "parameters": {"type": "dict", "properties": {"neuron_type": {"type": "string", "description": "Type of neuron to find. For instance, GABA, Glutamate, etc."}, "brain_region": {"type": "string", "description": "The region of the brain to consider.", "default": "All"}}, "required": ["neuron_type", "brain_region"]}}]}, "model_result_raw": "[get_neuron_coordinates(neuron_type=\"GABA\", brain_region=\"All\")]", "model_result_decoded": [], "possible_answer": [{"get_neuron_coordinates": {"neuron_type": ["GABA"], "brain_region": ["All", "all part of the brain", "entire brain"]}}]}
{"id": "simple_221", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_221", "question": [[{"role": "user", "content": "\u672a\u4f86\u4e94\u5e74\uff0c\u502b\u6566\u7684\u4eba\u53e3\u589e\u9577\u5c07\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "population_growth_estimate", "description": "Estimate the future population growth of a specific location over a specified time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to estimate the population growth for."}, "years": {"type": "integer", "description": "Number of years into the future for the estimate."}, "rate": {"type": "float", "description": "Expected annual growth rate in percentage. Default is 1.2."}}, "required": ["location", "years"]}}]}, "model_result_raw": "[population_growth_estimate(location=\"\u502b\u6566\", years=5)]", "model_result_decoded": [], "possible_answer": [{"population_growth_estimate": {"location": ["London"], "years": [5], "rate": ["", 1.2]}}]}
{"id": "simple_224", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'topic': '\u5fc3\u7406\u5b78'. Expected one of ['psychology']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "\u5728Twitter\u4e0a\u627e\u5230\u6700\u53d7\u95dc\u6ce8\u7684\u4eba\uff0c\u4ed6\u767c\u63a8\u6587\u6709\u95dc\u8207\u884c\u70ba\u548c\u7fa4\u9ad4\u52d5\u614b\u6709\u95dc\u7684\u5fc3\u7406\u5b78\u3002"}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": [{"social_media_analytics.most_followed": {"topic": "\u5fc3\u7406\u5b78", "sub_topics": ["\u884c\u70ba", "\u7fa4\u9ad4\u52d5\u614b"]}}], "model_result_decoded": [{"social_media_analytics.most_followed": {"topic": "\u5fc3\u7406\u5b78", "sub_topics": ["\u884c\u70ba", "\u7fa4\u9ad4\u52d5\u614b"]}}], "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_226", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_226", "question": [[{"role": "user", "content": "\u627e\u5230\u767d\u7f8a\u5ea7\u8207\u96d9\u5b50\u5ea7\u7684\u517c\u5bb9\u6027\u5f97\u5206\u3002"}]], "function": [{"name": "get_zodiac_compatibility", "description": "Retrieve the compatibility score between two Zodiac signs.", "parameters": {"type": "dict", "properties": {"sign1": {"type": "string", "description": "The first Zodiac sign."}, "sign2": {"type": "string", "description": "The second Zodiac sign."}, "scale": {"type": "string", "enum": ["percentage", "0-10 scale"], "description": "The scale on which compatibility should be shown. Default is 'percentage'."}}, "required": ["sign1", "sign2"]}}]}, "model_result_raw": "[get_zodiac_compatibility(sign1=\"Aries\", sign2=\"Gemini\")]", "model_result_decoded": [], "possible_answer": [{"get_zodiac_compatibility": {"sign1": ["Aries"], "sign2": ["Gemini"], "scale": ["percentage", ""]}}]}
{"id": "simple_228", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_228", "question": [[{"role": "user", "content": "\u627e\u5230\u559c\u6b61\u6162\u8dd1\u7684\u4eba\u7684\u4e09\u500b\u500b\u6027\u7279\u5fb5\u3002"}]], "function": [{"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "dict", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}]}, "model_result_raw": "[get_personality_traits(hobby=\"running\", trait_count=3)]", "model_result_decoded": [], "possible_answer": [{"get_personality_traits": {"hobby": ["jogging"], "trait_count": [3]}}]}
{"id": "simple_229", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "\u9451\u65bc\u6211\u9ad8\u6548\uff0c\u6709\u689d\u7406\uff0c\u96a8\u548c\uff0c\u5bcc\u6709\u540c\u60c5\u5fc3\u548c\u5bcc\u6709\u540c\u60c5\u5fc3\uff0c\u6211\u7684\u4e94\u5927\u6027\u683c\u7279\u8cea\u5f97\u5206\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "[get_bigfive_scores(characteristics=[\"highly_efficient\", \"well_organized\", \"friendly\", \"sympathetic\", \"kind\"], scale=\"high\")]", "model_result_decoded": [], "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_233", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "Tordesillas\u689d\u7d04\u4f55\u6642\u767c\u751f\uff1f\u4ee5Yyyy\u7684\u683c\u5f0f\u8aaa\u51fa\u4f86\u3002"}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "[european_history.get_event_date(event_name=\"Tordesillas\u689d\u7d04\", format=\"YYYY\")]", "model_result_decoded": [], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": "simple_235", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "\u91cc\u65af\u672c\u689d\u7d04\u7684\u7c3d\u7f72\u662f\u4ec0\u9ebc\u6642\u5019\uff1f"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "[get_event_date(event=\"Treaty of Lisbon\", location=\"global\")]", "model_result_decoded": [], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_236", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_236", "question": [[{"role": "user", "content": "\u5728\u7f8e\u570b\u5167\u6230\u958b\u59cb\u65e5\u671f\u3002"}]], "function": [{"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}]}, "model_result_raw": "[us_history.get_event_info(event_name=\"\u7f8e\u570b\u5167\u6230\", specific_info=\"Start Date\")]", "model_result_decoded": [], "possible_answer": [{"us_history.get_event_info": {"event_name": ["American Civil War", "Civil War"], "specific_info": ["Start Date"]}}]}
{"id": "simple_237", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_237", "question": [[{"role": "user", "content": "\u5f9e1960\u5e74\u52302000\u5e74\u7372\u53d6\u7f8e\u570b\u7684\u6b77\u53f2GDP\u6578\u64da\u3002"}]], "function": [{"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "[get_historical_GDP(country=\"USA\", start_year=1960, end_year=2000)]", "model_result_decoded": [], "possible_answer": [{"get_historical_GDP": {"country": ["United States", "US"], "start_year": [1960], "end_year": [2000]}}]}
{"id": "simple_238", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "\u5728\u7f8e\u570b\u5167\u6230\u671f\u9593\uff0c\u8ab0\u662f\u7f8e\u570b\u7e3d\u7d71\uff1f"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "[us_history.get_president(event=\"\u7f8e\u570b\u5167\u6230\", year=1861)]", "model_result_decoded": [], "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": "simple_241", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': '\u5167\u6230'. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": [[{"role": "user", "content": "\u5167\u6230\u671f\u9593\u7f8e\u570b\u7e3d\u7d71\u662f\u8ab0\uff1f"}]], "function": [{"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}]}, "model_result_raw": [{"US_President_During_Event": {"event": "\u5167\u6230"}}], "model_result_decoded": [{"US_President_During_Event": {"event": "\u5167\u6230"}}], "possible_answer": [{"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}]}
{"id": "simple_242", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_242", "question": [[{"role": "user", "content": "\u8ab0\u662f\u6700\u521d\u63d0\u51fa\u9032\u5316\u8ad6\u7684\u79d1\u5b78\u5bb6\uff1f"}]], "function": [{"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}]}, "model_result_raw": "[get_scientist_for_discovery(discovery=\"\u9032\u5316\u8ad6\")]", "model_result_decoded": [], "possible_answer": [{"get_scientist_for_discovery": {"discovery": ["Theory of Evolution", "theory of evolution"]}}]}
{"id": "simple_243", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_243", "question": [[{"role": "user", "content": "\u8ab0\u767c\u73fe\u4e86\u4e2d\u5b50\uff1f\u7d66\u6211\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}]}, "model_result_raw": "[get_discoverer(discovery=\"\u4e2d\u5b50\", detail=True)]", "model_result_decoded": [], "possible_answer": [{"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}]}
{"id": "simple_244", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "\u827e\u85a9\u514b\u00b7\u725b\u9813\uff08Isaac Newton\uff09\u51fa\u7248\u4e86\u666e\u904d\u91cd\u529b\u5b9a\u5f8b\u7684\u54ea\u4e00\u5e74\uff1f"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "[publication_year.find(author=\"\u827e\u85a9\u514b\u00b7\u725b\u9813\", work_title=\"\u666e\u904d\u91cd\u529b\u5b9a\u5f8b\")]", "model_result_decoded": [], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_245", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_245", "question": [[{"role": "user", "content": "\u8ab0\u767c\u73fe\u4e86\u9433\uff1f"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}]}, "model_result_raw": "[discoverer.get(element_name=\"\u9433\")]", "model_result_decoded": [], "possible_answer": [{"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}]}
{"id": "simple_246", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_246", "question": [[{"role": "user", "content": "\u8ab0\u767c\u73fe\u4e86\u91cd\u529b\uff0c\u4f7f\u7528\u4e86\u4ec0\u9ebc\u65b9\u6cd5\uff1f"}]], "function": [{"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}]}, "model_result_raw": "[science_history.get_discovery_details(discovery='Gravity', method_used='default')]", "model_result_decoded": [], "possible_answer": [{"science_history.get_discovery_details": {"discovery": ["Gravity"], "method_used": ["", "default"]}}]}
{"id": "simple_247", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_247", "question": [[{"role": "user", "content": "1915\u5e743\u670817\u65e5\uff0c\u963f\u723e\u4f2f\u7279\u00b7\u611b\u56e0\u65af\u5766\uff08Albert Einstein\uff09\u5c0d\u79d1\u5b78\u7684\u8ca2\u737b\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}]}, "model_result_raw": "[historical_contrib.get_contrib(scientist=\"Albert Einstein\", date=\"1915-03-17\")]", "model_result_decoded": [], "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "simple_248", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "\u8ab0\u767c\u660e\u4e86\u76f8\u5c0d\u8ad6\u548c\u54ea\u4e00\u5e74\uff1f"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "[science_history.get_invention(invention_name=\"\u76f8\u5c0d\u8ad6\", want_year=True)]", "model_result_decoded": [], "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_250", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_250", "question": [[{"role": "user", "content": "\u820a\u91d1\u5c71\u548c\u6089\u5c3c\u4e4b\u9593\u7684\u6642\u5dee\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}]}, "model_result_raw": "[get_time_difference(place1=\"\u65e7\u91d1\u5c71\", place2=\"\u6089\u5c3c\")]", "model_result_decoded": [], "possible_answer": [{"get_time_difference": {"place1": ["San Francisco", "SF"], "place2": ["Sydney"]}}]}
{"id": "simple_251", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "\u6b77\u53f2\u8a18\u9304\u4e2d\uff0c\u8036\u7a4c\u57fa\u7763\u5728\u6b77\u53f2\u4e0a\u6700\u65e9\u7684\u53c3\u8003\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "[get_earliest_reference(name=\"\u8036\u7a4c\u57fa\u7763\", source=\"historical records\")]", "model_result_decoded": [], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_252", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_252", "question": [[{"role": "user", "content": "\u572816\u4e16\u7d00\u7684\u91cd\u8981\u6027\u4e2d\u627e\u5230\u8207\u57fa\u7763\u6559\u6709\u95dc\u7684\u5341\u500b\u4e3b\u8981\u6b77\u53f2\u4e8b\u4ef6\u3002"}]], "function": [{"name": "get_religion_history", "description": "Retrieves significant religious events, including the details of the event, its historical context, and its impacts.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion to be queried."}, "century": {"type": "integer", "description": "The century in which the event(s) took place."}, "sort_by": {"type": "string", "enum": ["importance", "chronological"], "default": "chronological", "description": "Order of sorting the events. Default is chronological."}, "count": {"type": "integer", "default": 5, "description": "Number of events to return. Default is 5."}}, "required": ["religion", "century"]}}]}, "model_result_raw": "[get_religion_history(religion=\"Christianity\", century=16, count=10)]", "model_result_decoded": [], "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "century": [16], "sort_by": ["importance"], "count": [10]}}]}
{"id": "simple_256", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_256", "question": [[{"role": "user", "content": "\u751f\u6210\u4e00\u500b\u534a\u5f91\u70ba50\u50cf\u7d20\u548c\u984f\u8272\u70ba\u201c\u7d05\u8272\u201d\u7684\u5713\u7684\u5716\u50cf\u3002"}]], "function": [{"name": "generate_circle_image", "description": "Generates a circle image based on the given radius and color", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle in pixels."}, "color": {"type": "string", "description": "The color of the circle."}, "background": {"type": "string", "description": "Optional: The color of the background, default is white."}}, "required": ["radius", "color"]}}]}, "model_result_raw": "[generate_circle_image(radius=50, color=\"red\")]", "model_result_decoded": [], "possible_answer": [{"generate_circle_image": {"radius": [50], "color": ["Red"], "background": ["", "white"]}}]}
{"id": "simple_257", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'color_name': '\u6d77\u7eff\u8272'. Expected one of ['Sea Green']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_257", "question": [[{"role": "user", "content": "\u60a8\u80fd\u5e6b\u6211\u78ba\u5b9a\u6d77\u7da0\u8272\u7684\u57fa\u672cRGB\u50f9\u503c\u55ce\uff1f"}]], "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}]}, "model_result_raw": [{"identify_color_rgb": {"color_name": "\u6d77\u7eff\u8272"}}], "model_result_decoded": [{"identify_color_rgb": {"color_name": "\u6d77\u7eff\u8272"}}], "possible_answer": [{"identify_color_rgb": {"color_name": ["Sea Green"], "standard": ["basic", ""]}}]}
{"id": "simple_260", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "\u5047\u8a2d1\u52a0\u4f96\u8986\u84cb\u7d04350\u5e73\u65b9\u82f1\u5c3a\uff0c\u5247\u8a08\u7b97\u7e6a\u88fd\u5bec\u5ea6\u70ba20\u82f1\u5c3a\u4e14\u9ad8\u5ea6\u70ba12\u82f1\u5c3a\u7684\u7246\u58c1\u9700\u8981\u591a\u5c11\u52a0\u4f96\u6cb9\u6f06\u3002\u4e0d\u5305\u62ec15\u5e73\u65b9\u82f1\u5c3a\u7684\u7a97\u6236\u5340\u57df\u3002"}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "[paint_requirement.calculate(area={\"width\": 20, \"height\": 12}, paint_coverage=350, exclusion={\"type\": \"window\", \"area\": 15})]", "model_result_decoded": [], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_261", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_261", "question": [[{"role": "user", "content": "\u7e6a\u88fd\u4e00\u500b\u5bec\u5ea6\u70ba20\u500b\u55ae\u4f4d\u7684\u77e9\u5f62\uff0c\u7d05\u8272\u70ba10\u500b\u55ae\u4f4d\u7684\u9ad8\u5ea6\u3002"}]], "function": [{"name": "draw_rectangle", "description": "Draw a rectangle given its width and height.", "parameters": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the rectangle."}, "height": {"type": "integer", "description": "The height of the rectangle."}, "color": {"type": "string", "description": "The color of the rectangle. Default is 'black'."}}, "required": ["width", "height"]}}]}, "model_result_raw": "[draw_rectangle(width=20, height=10, color='red')]", "model_result_decoded": [], "possible_answer": [{"draw_rectangle": {"width": [20], "height": [10], "color": ["red"]}}]}
{"id": "simple_262", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_262", "question": [[{"role": "user", "content": "\u5c07\u6211\u7684\u7e6a\u756b\u7684\u4e2d\u7b49\u6027\u66f4\u6539\u70ba\u6cb9\uff0c\u4e26\u4ee5\u7d05\u8272\u5360\u4e3b\u5c0e\u5730\u4f4d\u7684\u5c3a\u5bf8\u66f4\u6539\u70ba12x18\u3002"}]], "function": [{"name": "modify_painting", "description": "Modify an existing painting's attributes such as size, medium, and color.", "parameters": {"type": "dict", "properties": {"size": {"type": "string", "description": "The size of the painting in inches, width by height."}, "medium": {"type": "string", "description": "The medium of the painting, such as oil, acrylic, etc."}, "dominant_color": {"type": "string", "description": "The dominant color of the painting. Default to 'black'."}}, "required": ["size", "medium"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"modify_painting": {"size": ["12x18"], "medium": ["oil"], "dominant_color": ["red"]}}]}
{"id": "simple_263", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_263", "question": [[{"role": "user", "content": "\u627e\u5230\u8a79\u59c6\u65af\u00b7\u666e\u502b\u85a9\uff08James Plensa\uff09\u7684\u6700\u65b0\u85dd\u8853\u96d5\u5851\uff0c\u4e26\u9032\u884c\u4e86\u8a73\u7d30\u7684\u63cf\u8ff0\u3002"}]], "function": [{"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}]}, "model_result_raw": "[get_sculpture_info(artist_name=\"James Plensa\", detail=True)]", "model_result_decoded": [], "possible_answer": [{"get_sculpture_info": {"artist_name": ["James Plensa"], "detail": [true]}}]}
{"id": "simple_264", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_264", "question": [[{"role": "user", "content": "\u627e\u5230Michelangelo\u7684\u6a19\u984c\u201c David\u201d\u7684\u96d5\u5851\u7684\u5927\u5c0f\u3002"}]], "function": [{"name": "sculpture.get_details", "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist who made the sculpture."}, "title": {"type": "string", "description": "The title of the sculpture."}, "detail": {"type": "string", "description": "The specific detail wanted about the sculpture. Default is 'general information'."}}, "required": ["artist", "title"]}}]}, "model_result_raw": "[sculpture.get_details(artist=\"Michelangelo\", title=\"David\", detail=\"size\")]", "model_result_decoded": [], "possible_answer": [{"sculpture.get_details": {"artist": ["Michelangelo"], "title": ["David"], "detail": ["size"]}}]}
{"id": "simple_265", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_265", "question": [[{"role": "user", "content": "\u572819\u4e16\u7d00\u5728\u829d\u52a0\u54e5\u9644\u8fd1\u627e\u5230\u6211\u7684\u96d5\u5851\u3002"}]], "function": [{"name": "sculpture_search", "description": "Find sculptures based on location and a specific time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the sculptures are located."}, "time_frame": {"type": "string", "description": "The time frame during which the sculptures were made."}, "material": {"type": "string", "description": "Optional material of the sculptures. Default is 'all'"}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "[sculpture_search(location=\"\u829d\u52a0\u54e5\", time_frame=\"19\u4e16\u7d00\")]", "model_result_decoded": [], "possible_answer": [{"sculpture_search": {"location": ["Chicago", "Chicago, IL"], "time_frame": ["19th century"], "material": ["", "all"]}}]}
{"id": "simple_266", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_266", "question": [[{"role": "user", "content": "\u7f85\u4e39\u7684\u96d5\u5851\u201c\u601d\u60f3\u5bb6\u201d\u7684\u50f9\u503c\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "[get_sculpture_value(sculpture=\"\u601d\u60f3\u5bb6\", artist=\"\u7f85\u4e39\")]", "model_result_decoded": [], "possible_answer": [{"get_sculpture_value": {"sculpture": ["The Thinker"], "artist": ["Rodin"]}}]}
{"id": "simple_267", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'next'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "\u5728\u4e0b\u4e00\u500b\u6708\u4e2d\u627e\u5230\u7d10\u7d04\u8209\u884c\u7684\u6700\u9ad8\u8a55\u50f9\u7684\u73fe\u4ee3\u96d5\u5851\u5c55\u89bd\u3002"}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "next", "user_ratings": "high"}}], "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "next", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_268", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_268", "question": [[{"role": "user", "content": "\u5728\u610f\u5927\u5229\u7f85\u99ac\uff0c\u627e\u5230\u7c73\u958b\u6717\u57fa\u7f85\u7684\u96d5\u5851\u3002"}]], "function": [{"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}]}, "model_result_raw": "[sculpture_locator.find_by_artist(artist=\"\u7c73\u958b\u6717\u57fa\u7f85\", material=\"marble\", location=\"\u7f85\u99ac\")]", "model_result_decoded": [], "possible_answer": [{"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}]}
{"id": "simple_270", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'building_name': '\u5e1d\u570b\u5927\u5ec8'. Expected one of ['Empire State Building', 'Empire State']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_270", "question": [[{"role": "user", "content": "\u60a8\u80fd\u7d66\u6211\u5e1d\u570b\u5927\u5ec8\u7684\u9ad8\u5ea6\u548c\u5bec\u5ea6\u55ce\uff1f"}]], "function": [{"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}]}, "model_result_raw": [{"building.get_dimensions": {"building_name": "\u5e1d\u570b\u5927\u5ec8", "unit": "meter"}}], "model_result_decoded": [{"building.get_dimensions": {"building_name": "\u5e1d\u570b\u5927\u5ec8", "unit": "meter"}}], "possible_answer": [{"building.get_dimensions": {"building_name": ["Empire State Building", "Empire State"], "unit": ["feet"]}}]}
{"id": "simple_271", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_271", "question": [[{"role": "user", "content": "\u5efa\u7bc9\u7269\u7684\u5efa\u7bc9\u7269ID B1004\u7684\u7d50\u69cb\u52d5\u614b\u5206\u6790\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "[{\"name\": \"analyze_structure\", \"arguments\": {\"building_id\": \"B1004\", \"floors\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835,", "model_result_decoded": [], "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "simple_273", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'name': 'Mus\u00e9e de la Vie Romantique'. Expected one of ['Louvre Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_273", "question": [[{"role": "user", "content": "\u627e\u51fa\u5df4\u9ece\u767e\u8449\u7a97\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u3002"}]], "function": [{"name": "museum.get_hours", "description": "Retrieve the open hours for a museum based on its name and location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The city where the museum is located."}, "day": {"type": "string", "description": "Optional: Day of the week for specific open hours. Default 'Monday'."}}, "required": ["name", "location"]}}]}, "model_result_raw": [{"museum.get_hours": {"name": "Mus\u00e9e de la Vie Romantique", "location": "Paris"}}], "model_result_decoded": [{"museum.get_hours": {"name": "Mus\u00e9e de la Vie Romantique", "location": "Paris"}}], "possible_answer": [{"museum.get_hours": {"name": ["Louvre Museum"], "location": ["Paris", "Paris, France"], "day": ["", "Monday"]}}]}
{"id": "simple_274", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum_name': '\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928'. Expected one of ['Metropolitan Museum of Art', 'The Metropolitan Museum of Art', 'Met Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_274", "question": [[{"role": "user", "content": "\u67e5\u627e\u6709\u95dc\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\u958b\u696d\u6642\u9593\u7684\u4fe1\u606f\u3002"}]], "function": [{"name": "museum_info", "description": "Retrieve information about the opening hours of a museum based on its name.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "info_type": {"type": "string", "description": "The type of information needed about the museum.", "default": "opening_hours"}}, "required": ["museum_name"]}}]}, "model_result_raw": [{"museum_info": {"museum_name": "\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928"}}], "model_result_decoded": [{"museum_info": {"museum_name": "\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928"}}], "possible_answer": [{"museum_info": {"museum_name": ["Metropolitan Museum of Art", "The Metropolitan Museum of Art", "Met Museum"], "info_type": ["opening_hours", ""]}}]}
{"id": "simple_277", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum': '\u5927\u82f1\u535a\u7269\u9986'. Expected one of ['The British Museum']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "\u5728\u672c\u9031\u672b\uff0c6\u670820233\u65e5\uff0c\u67e5\u627e\u5927\u82f1\u535a\u7269\u9928\u7684\u5de5\u4f5c\u6642\u9593\u548c\u7968\u50f9\u3002"}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": [{"museum_info": {"museum": "\u5927\u82f1\u535a\u7269\u9986", "date": "2023-06-24", "information": ["opening_hours", "ticket_price"]}}], "model_result_decoded": [{"museum_info": {"museum": "\u5927\u82f1\u535a\u7269\u9986", "date": "2023-06-24", "information": ["opening_hours", "ticket_price"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'instrument': '\u92fc\u7434'. Expected one of ['piano']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "\u70ba\u6211\u627e\u5230\u96c5\u99ac\u54c8\u92fc\u7434\u7684\u5e73\u5747\u50f9\u683c\u548c\u6536\u8996\u7387\u3002"}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": [{"get_instrument_details": {"instrument": "\u92fc\u7434", "manufacturer": "\u96c5\u99ac\u54c8", "features": ["price", "rating"]}}], "model_result_decoded": [{"get_instrument_details": {"instrument": "\u92fc\u7434", "manufacturer": "\u96c5\u99ac\u54c8", "features": ["price", "rating"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_280", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'type': 'sound'. Expected one of ['acoustic']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_280", "question": [[{"role": "user", "content": "\u5728\u6211\u7684\u9810\u7b971000\u7f8e\u5143\u5167\u627e\u5230\u4e00\u7a2e\u8072\u5b78\u5100\u5668\u3002"}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "integer", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument. Default to not use if not specified."}}, "required": ["budget", "type"]}}]}, "model_result_raw": [{"find_instrument": {"budget": 1000, "type": "sound"}}], "model_result_decoded": [{"find_instrument": {"budget": 1000, "type": "sound"}}], "possible_answer": [{"find_instrument": {"budget": [1000], "type": ["acoustic"], "make": [""]}}]}
{"id": "simple_281", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_281", "question": [[{"role": "user", "content": "\u5f9e1721\u5e74\u88fd\u4f5c\u7684\u201c Stradivarius\u201d\u88fd\u9020\u5546\u4e2d\u7684\u6a02\u5668\u201c\u5c0f\u63d0\u7434\u201d\u7684\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}]}, "model_result_raw": "[get_instrument_info(name=\"\u5c0f\u63d0\u7434\", maker=\"Stradivarius\", year=1721)]", "model_result_decoded": [], "possible_answer": [{"get_instrument_info": {"name": ["Violin"], "maker": ["Stradivarius"], "year": [1721]}}]}
{"id": "simple_282", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_282", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u500b\u5e36\u6709\u958b\u5b54\uff0cC\u8173\u548c\u9280\u8272\u982d\u63a5\u982d\u7684\u898f\u683c\u7684Yamaha\u9577\u7b1b\u3002"}]], "function": [{"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}]}, "model_result_raw": "[find_flute(brand=\"Yamaha\", specs=[\"open hole\", \"C foot\", \"silver headjoint\"])]", "model_result_decoded": [], "possible_answer": [{"find_flute": {"brand": ["Yamaha"], "specs": [["open hole", "C foot", "silver headjoint"]]}}]}
{"id": "simple_283", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Good'. Expected one of ['Excellent']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_283", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u5730\u5340\u627e\u5230\u4e8c\u624bGibson Les Paul\u5409\u4ed6\u7684\u50f9\u683c\u3002"}]], "function": [{"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Good", "location": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois"]}}]}
{"id": "simple_284", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_284", "question": [[{"role": "user", "content": "\u7372\u53d6\u6709\u95dc\u4e0b\u500b\u6708\u5728\u7d10\u7d04\u7684\u6d41\u884c\u97f3\u6a02\u6703\u7684\u4fe1\u606f\u3002"}]], "function": [{"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "[concert_info.get(location=\"New York\", date=\"next month\", genre=\"Pop\")]", "model_result_decoded": [], "possible_answer": [{"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}]}
{"id": "simple_285", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_285", "question": [[{"role": "user", "content": "\u5728\u829d\u52a0\u54e5\u627e\u5230\u4e00\u5834\u6416\u6efe\u97f3\u6a02\u6703\uff0c\u7968\u50f9\u4f4e\u65bc100\u7f8e\u5143\u3002"}]], "function": [{"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}]}, "model_result_raw": "[find_concert(location=\"Chicago, IL\", price=100, genre=\"Rock\")]", "model_result_decoded": [], "possible_answer": [{"find_concert": {"location": ["Chicago, Illinois", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}]}
{"id": "simple_286", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Beyonc\u00e9'. Expected one of ['Beyonce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_286", "question": [[{"role": "user", "content": "\u7372\u53d6\u4e0b\u500b\u6708\uff082022\u5e744\u6708\uff09\u5728\u8056\u5730\u4e9e\u54e5\u6f14\u51fa\u7684\u85dd\u8853\u5bb6\u78a7\u6602\u65af\u6f14\u51fa\u7684\u97f3\u6a02\u6703\u8a73\u7d30\u4fe1\u606f\u3002"}]], "function": [{"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}]}, "model_result_raw": [{"concert.get_details": {"artist": "Beyonc\u00e9", "location": "San Francisco", "date": "04-2022"}}], "model_result_decoded": [{"concert.get_details": {"artist": "Beyonc\u00e9", "location": "San Francisco", "date": "04-2022"}}], "possible_answer": [{"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}]}
{"id": "simple_287", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_287", "question": [[{"role": "user", "content": "\u5728\u672c\u9031\u672b\u5728\u6d1b\u6749\u78ef\u627e\u5230\u4e00\u5834\u5ec9\u50f9\u9580\u7968\u7684\u53e4\u5178\u97f3\u6a02\u6703\u3002"}]], "function": [{"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow.", "enum": ["this weekend", "next weekend", "this month", "next month", "today", "tomorrow", "the day after"]}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}]}, "model_result_raw": "[concert.search(genre=\"classical\", location=\"Los Angeles\", date=\"this weekend\", price_range=\"cheap\")]", "model_result_decoded": [], "possible_answer": [{"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}]}
{"id": "simple_288", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Adele'. Expected one of ['Eminem']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_288", "question": [[{"role": "user", "content": "\u7d66\u6211\u5169\u5f35\u5728\u7d10\u7d04\u5e02\u4e0b\u4e00\u6b21\u963f\u59c6\u97f3\u6a02\u6703\u7684\u9580\u7968\u3002"}]], "function": [{"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}]}, "model_result_raw": [{"concert_booking.book_ticket": {"artist": "Adele", "city": "New York", "num_tickets": 2}}], "model_result_decoded": [{"concert_booking.book_ticket": {"artist": "Adele", "city": "New York", "num_tickets": 2}}], "possible_answer": [{"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}]}
{"id": "simple_289", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_289", "question": [[{"role": "user", "content": "\u5728\u897f\u96c5\u5716\u64ad\u653e\u7235\u58eb\u97f3\u6a02\u7684\u6211\u9644\u8fd1\u7684\u97f3\u6a02\u6703\u3002"}]], "function": [{"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}]}, "model_result_raw": "[concert.find_nearby(location=\"Seattle, WA\", genre=\"Jazz\")]", "model_result_decoded": [], "possible_answer": [{"concert.find_nearby": {"location": ["Seattle", "Seattle, WA"], "genre": ["jazz", "Jazz"]}}]}
{"id": "simple_290", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_290", "question": [[{"role": "user", "content": "\u9031\u672b\u97f3\u6a02\u6703\u572812\u6708\u8209\u884c\u7684\u6642\u6a5f\u548c\u4f4d\u7f6e\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}]}, "model_result_raw": "[concert.find_details(artist=\"Taylor Swift\", month=\"December\", year=2023)]", "model_result_decoded": [], "possible_answer": [{"concert.find_details": {"artist": ["The Weeknd"], "month": ["December"], "year": ["", 2022]}}]}
{"id": "simple_295", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_295", "question": [[{"role": "user", "content": "\u627e\u5230\u7687\u540e\u6b4c\u66f2\u300a\u6ce2\u5e0c\u7c73\u4e9e\u72c2\u60f3\u66f2\u300b\u7684\u6b4c\u8a5e\u3002"}]], "function": [{"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}]}, "model_result_raw": "[get_song_lyrics(song_title=\"\u6ce2\u5e0c\u7c73\u4e9e\u72c2\u60f3\u66f2\", artist_name=\"\u7687\u540e\")]", "model_result_decoded": [], "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": "simple_298", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_298", "question": [[{"role": "user", "content": "C\uff03\u5c08\u696d\u6709\u4ec0\u9ebc\u95dc\u9375\u7c3d\u540d\uff1f"}]], "function": [{"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}]}, "model_result_raw": [{"music_theory.key_signature": {"key": "C", "scale_type": "major"}}, {"music_theory.key_signature": {"key": "C", "scale_type": "minor"}}], "model_result_decoded": [{"music_theory.key_signature": {"key": "C", "scale_type": "major"}}, {"music_theory.key_signature": {"key": "C", "scale_type": "minor"}}], "possible_answer": [{"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}]}
{"id": "simple_300", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_300", "question": [[{"role": "user", "content": "\u6839\u64da\u8ae7\u6ce2\u7bc0\u594f\u8a08\u7b97\u5169\u500b\u97f3\u7b26\u548c880Hz\u983b\u7387\u7684\u5169\u500b\u97f3\u7b26\u4e4b\u9593\u7684\u6301\u7e8c\u6642\u9593\u3002"}]], "function": [{"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}]}, "model_result_raw": "Error during inference: 'arguments'", "model_result_decoded": [], "possible_answer": [{"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}]}
{"id": "simple_303", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_303", "question": [[{"role": "user", "content": "\u57282019-2020\u8cfd\u5b63\u7372\u53d6Cristiano Ronaldo\u7684\u7403\u54e1\u7d71\u8a08\u6578\u64da"}]], "function": [{"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues if not specified."}}, "required": ["player_name", "season"]}}]}, "model_result_raw": "[soccer_stat.get_player_stats(player_name=\"Cristiano Ronaldo\", season=\"2019-2020\")]", "model_result_decoded": [], "possible_answer": [{"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": [""]}}]}
{"id": "simple_304", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "\u5f9e\u4e0a\u4e00\u5834\u7c43\u7403\u6bd4\u8cfd\u4e2d\u7372\u53d6\u7403\u54e1\u201c\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u201d\u7684\u7c43\u677f\u7d71\u8a08\u6578\u64da"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "[player_stats.getLastGame(player_name=\"\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\", team=\"\u6d1b\u6749\u78ef\u6e56\u4eba\", metrics=[\"Rebounds\"])]", "model_result_decoded": [], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": "simple_305", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "\u8a08\u7b97\u897f\u7532\u8db3\u7403\u904b\u52d5\u54e1\u6885\u897f\u57282020-2021\u8cfd\u5b63\u7684\u7e3d\u9ad4\u76ee\u6a19\u548c\u5354\u52a9"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "[sports_stats.get_performance(player_name=\"\u6885\u897f\", tournament=\"\u897f\u7532\", season=\"2020-2021\", performance_indicator=[\"Goals Scored\", \"Assists Made\"])]", "model_result_decoded": [], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_307", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "\u8ab0\u57282021\u5e741\u670828\u65e5\u8d0f\u5f97\u4e86\u6e56\u4eba\u548c\u5feb\u8239\u968a\u4e4b\u9593\u7684\u7c43\u7403\u6bd4\u8cfd\uff1f"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "[game_result.get_winner(teams=[\"\u6e56\u4eba\", \"\u5feb\u8239\"], date=\"2021-01-28\")]", "model_result_decoded": [], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": "simple_308", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_308", "question": [[{"role": "user", "content": "\u63a5\u4e0b\u4f86\u7684\u66fc\u806f\u4e94\u5834\u6bd4\u8cfd\u662f\u4ec0\u9ebc\uff0c\u4ed6\u5011\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u5c0d\u9663\u8ab0\uff1f"}]], "function": [{"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}]}, "model_result_raw": "[sports.match_schedule(team_name=\"Manchester United\", num_matches=5, league=\"English Premier League\")]", "model_result_decoded": [], "possible_answer": [{"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}]}
{"id": "simple_309", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_309", "question": [[{"role": "user", "content": "\u57282020\u5e74NFL\u8cfd\u5b63\u627e\u5230\u6e6f\u59c6\u00b7\u5e03\u96f7\u8fea\uff08Tom Brady\uff09\u7684\u8a18\u9304\u3002"}]], "function": [{"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season. Default is all teams if not specified."}}, "required": ["player_name", "season_year"]}}]}, "model_result_raw": "[nfl_data.player_record(player_name=\"Tom Brady\", season_year=2020)]", "model_result_decoded": [], "possible_answer": [{"nfl_data.player_record": {"player_name": ["Tom Brady"], "season_year": [2020], "team": ["", "Tampa Bay Buccaneers"]}}]}
{"id": "simple_310", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_310", "question": [[{"role": "user", "content": "\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u7684\u8077\u696d\u6578\u64da\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_career_stats", "description": "Retrieve the career statistics of a basketball player based on the player's name.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified."}}, "required": ["player_name"]}}]}, "model_result_raw": "[get_career_stats(player_name=\"\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\")]", "model_result_decoded": [], "possible_answer": [{"get_career_stats": {"player_name": ["LeBron James"], "team": [""]}}]}
{"id": "simple_311", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_311", "question": [[{"role": "user", "content": "\u627e\u5230\u6211\u7684\u7c43\u7403\u904b\u52d5\u54e1\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\u7684\u8a73\u7d30\u8cc7\u6599"}]], "function": [{"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "[sports_db.find_athlete(name=\"\u52d2\u5e03\u6717\u00b7\u8a79\u59c6\u65af\", sport=\"Basketball\")]", "model_result_decoded": [], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": "simple_312", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_312", "question": [[{"role": "user", "content": "\u7f85\u7d0d\u723e\u591a\u57282021\u5e74\u7684\u6bd4\u8cfd\u7684\u7d71\u8a08\u6578\u64da\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default to not use it if not specified."}}, "required": ["player_name", "year"]}}]}, "model_result_raw": "[player_statistic(player_name=\"Cristiano Ronaldo\", year=2021)]", "model_result_decoded": [], "possible_answer": [{"player_statistic": {"player_name": ["Ronaldo", "Cristiano Ronaldo"], "year": [2021], "team_name": [""]}}]}
{"id": "simple_313", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_313", "question": [[{"role": "user", "content": "\u6839\u64da\u6700\u65b0\u6578\u64da\uff0c\u6885\u897f\u6b50\u5143\u7684\u7e3d\u50f9\u503c\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}]}, "model_result_raw": "[celebrity_net_worth.get(name=\"Lionel Messi\", currency=\"EUR\")]", "model_result_decoded": [], "possible_answer": [{"celebrity_net_worth.get": {"name": ["Lionel Messi", "Messi"], "currency": ["EUR", "euro"]}}]}
{"id": "simple_315", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_315", "question": [[{"role": "user", "content": "\u57282021\u8cfd\u5b63\u7372\u5f97NBA\u7403\u968a\u7684\u6392\u540d\u3002"}]], "function": [{"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "dict", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}]}, "model_result_raw": "[get_defense_ranking(season=2021)]", "model_result_decoded": [], "possible_answer": [{"get_defense_ranking": {"season": [2021], "top": [1, ""]}}]}
{"id": "simple_316", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_316", "question": [[{"role": "user", "content": "\u627e\u5230\u7576\u524d\u7684\u7db2\u7403\u904b\u52d5\u54e1\u585e\u96f7\u5a1c\u00b7\u5a01\u5ec9\u59c6\u65af\uff08Serena Williams\uff09\u7684\u4e16\u754c\u6392\u540d\u3002"}]], "function": [{"name": "get_sport_ranking", "description": "Retrieve the current world ranking of a sportsperson based on the sport and player's name.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "Name of the sport."}, "player_name": {"type": "string", "description": "Name of the player."}, "gender": {"type": "string", "description": "Gender of the player. This is optional. The possible values are male or female.", "default": "all"}}, "required": ["sport", "player_name"]}}]}, "model_result_raw": "[get_sport_ranking(sport=\"Tennis\", player_name=\"Serena Williams\")]", "model_result_decoded": [], "possible_answer": [{"get_sport_ranking": {"sport": ["Tennis"], "player_name": ["Serena Williams"], "gender": ["", "all", "female"]}}]}
{"id": "simple_317", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_317", "question": [[{"role": "user", "content": "\u5728NBA 2021\u5e38\u898f\u8cfd\u4e2d\u627e\u5230LA Lakers\u7684\u6392\u540d\u3002"}]], "function": [{"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}]}, "model_result_raw": "[get_team_rank(team_name=\"LA Lakers\", league=\"NBA\", season=\"2021\", type=\"regular\")]", "model_result_decoded": [], "possible_answer": [{"get_team_rank": {"team_name": ["LA Lakers"], "league": ["NBA"], "season": ["2021"], "type": ["regular"]}}]}
{"id": "simple_318", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_318", "question": [[{"role": "user", "content": "2021\u5e74\uff0c\u5fb7\u570b\u7537\u5b50\u8db3\u7403\u968a\u7684FIFA\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}]}, "model_result_raw": "[get_team_ranking(team_name=\"Germany\", year=2021, gender=\"men\")]", "model_result_decoded": [], "possible_answer": [{"get_team_ranking": {"team_name": ["Germany"], "year": [2021], "gender": ["men", ""]}}]}
{"id": "simple_319", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_319", "question": [[{"role": "user", "content": "\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season '2023' if not specified."}}, "required": ["team", "league"]}}]}, "model_result_raw": "[sports_ranking(team=\"\u66fc\u806f\", league=\"\u82f1\u8d85\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC"], "league": ["Premier League"], "season": ["", 2023]}}]}
{"id": "simple_320", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "\u53d6\u5f97\u7c43\u7403\u806f\u8cfd\u7684\u6392\u540d"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "[sports_ranking.get_team_position(team=\"Golden State Warriors\", season=\"2023\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": "simple_321", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_321", "question": [[{"role": "user", "content": "\u57282021\u5e74\u897f\u7532\u8cfd\u5b63\uff0c\u5df4\u585e\u7f85\u90a3\u7684\u6392\u540d\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "sports_ranking", "description": "Get the ranking of a team in a given sports league and season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the sports league."}, "season": {"type": "string", "description": "The season for which ranking needs to be obtained."}}, "required": ["team", "league", "season"]}}]}, "model_result_raw": "[sports_ranking(team=\"\u5df4\u585e\u7f85\u90a3\", league=\"\u897f\u7532\", season=\"2021\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking": {"team": ["Barcelona", "FC Barcelona"], "league": ["La Liga"], "season": ["2021"]}}]}
{"id": "simple_322", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_322", "question": [[{"role": "user", "content": "\u5728\u82f1\u8d85\u806f\u8cfd\u4e2d\u7372\u5f97\u5229\u7269\u6d66\u8db3\u7403\u4ff1\u6a02\u90e8\u7684\u7576\u524d\u6392\u540d\u3002"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season '2023-2024' if not provided."}}, "required": ["team", "league"]}}]}, "model_result_raw": "[sports_ranking.get_current(team=\"Liverpool\", league=\"Premier League\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking.get_current": {"team": ["Liverpool Football Club", "Liverpool", "LFC"], "league": ["Premier League", "EPL", "English Premier League"], "season": ["", "2023-2024"]}}]}
{"id": "simple_323", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "\u8ab0\u88ab\u8a55\u70ba\u5973\u5b50\u7db2\u7403\u7684\u9802\u7d1a\u7403\u54e1\uff1f"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "[sports_ranking.get_top_player(sport=\"tennis\", gender=\"women\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "simple_324", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_324", "question": [[{"role": "user", "content": "\u627e\u5230\u5305\u62ec\u5c0d\u624b\u540d\u7a31\u5728\u5167\u7684\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u7684\u6700\u5f8c\u4e00\u5834\u6bd4\u8cfd\u5f97\u5206\u3002"}]], "function": [{"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": false}}, "required": ["team"]}}]}, "model_result_raw": "[team_score.get_latest(team=\"Lakers\", include_opponent=True)]", "model_result_decoded": [], "possible_answer": [{"team_score.get_latest": {"team": ["Los Angeles Lakers", "Lakers"], "include_opponent": [true]}}]}
{"id": "simple_325", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_325", "question": [[{"role": "user", "content": "\u8ab0\u8d0f\u5f97\u4e86\u829d\u52a0\u54e5\u516c\u725b\u968a\u548c\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u4e4b\u9593\u7684\u6700\u5f8c\u4e00\u5834\u6bd4\u8cfd\uff1f"}]], "function": [{"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "[sports.match_results(team1=\"\u829d\u52a0\u54e5\u516c\u725b\u968a\", team2=\"\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\")]", "model_result_decoded": [], "possible_answer": [{"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}]}
{"id": "simple_326", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_326", "question": [[{"role": "user", "content": "\u7372\u5f97NBA\u6d1b\u6749\u78ef\u6e56\u4eba\u968a\u7684\u6700\u65b0\u6bd4\u8cfd\u5f97\u5206\u548c\u7d71\u8a08\u6578\u64da\u3002"}]], "function": [{"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "[get_team_score(team_name=\"Lakers\", league=\"NBA\", include_player_stats=True)]", "model_result_decoded": [], "possible_answer": [{"get_team_score": {"team_name": ["Los Angeles Lakers", "Lakers"], "league": ["NBA"], "include_player_stats": ["", true, false]}}]}
{"id": "simple_327", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "\u7d66\u6211\u66fc\u806f\u5728\u82f1\u8d85\u806f\u8cfd\u63a5\u4e0b\u4f86\u76846\u5834\u6bd4\u8cfd\u4e2d\u7684\u65e5\u7a0b\u5b89\u6392\u3002"}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "[sports_team.get_schedule(team_name=\"\u66fc\u806f\", num_of_games=6, league=\"\u82f1\u8d85\u806f\u8cfd\")]", "model_result_decoded": [], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "\u627e\u5230\u68cb\u76e4\u904a\u6232\u201c\u9a0e\u8eca\u7968\u201d\u7684\u8a55\u5206\u548c\u73a9\u5bb6\u6578\u91cf\u3002"}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "[boardgame.get_info(name=\"\u9a0e\u8eca\u7968\", parameters=[\"rating\", \"player count\"])]", "model_result_decoded": [], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_331", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_331", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u627e\u5230\u9802\u7d1a\u570b\u969b\u8c61\u68cb\u7403\u54e1\uff0c\u5176\u8a55\u5206\u8d85\u904e2300\u3002"}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}]}, "model_result_raw": "[board_game.chess.get_top_players(location=\"New York\", minimum_rating=2300)]", "model_result_decoded": [], "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": "simple_332", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_332", "question": [[{"role": "user", "content": "\u99ac\u683c\u52aa\u65af\u00b7\u5361\u723e\u68ee\uff08Magnus Carlsen\uff09\u7684\u570b\u969b\u8c61\u68cb\u7d93\u5178\u8a55\u7d1a\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}]}, "model_result_raw": "[chess.rating(player_name=\"\u99ac\u683c\u52aa\u65af\u00b7\u5361\u723e\u68ee\", variant=\"classical\")]", "model_result_decoded": [], "possible_answer": [{"chess.rating": {"player_name": ["Magnus Carlsen"], "variant": ["classical", ""]}}]}
{"id": "simple_333", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "\u5728\u63a5\u4e0b\u4f86\u76843\u5929\u5167\u627e\u5230\u82f1\u570b\u502b\u6566\u7684\u9ad8\u6eab\u548c\u4f4e\u6eab\uff0c\u6fd5\u5ea6\u548c\u964d\u6c34\u91cf\u3002"}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "[detailed_weather_forecast(location=\"London\", days=3, details=[\"high_low_temperature\", \"humidity\", \"precipitation\"])]", "model_result_decoded": [], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_334", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "\u6aa2\u67e5\u8ab0\u662f\u4e8c\u5341\u4e00\u9ede\u904a\u6232\u4e2d\u7684\u8d0f\u5bb6\uff0c\u7d66\u4e88\u73a9\u5bb6\u64c1\u6709A\u548c10\u7684\u7403\u54e1\uff0c\u7d93\u92b7\u5546\u64c1\u670910\u548c9\u3002\u738b\u724c\u88ab\u8a8d\u70ba\u662f1\u3002"}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "[blackjack.check_winner(player_cards=[\"A\", \"10\"], dealer_cards=[\"10\", \"9\"], ace_value=1)]", "model_result_decoded": [], "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": "simple_335", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_335", "question": [[{"role": "user", "content": "\u5728\u7532\u677f\u4e0a\u627e\u5230\u4e00\u5f35\u201c\u7687\u540e\u201d\u548c\u201c\u7687\u540e\u201d\u7684\u5361\u7247\u3002"}]], "function": [{"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"}}, "required": ["rank", "suit"]}}]}, "model_result_raw": "[find_card_in_deck(rank=\"Queen\", suit=\"Queen\", deck=[])]", "model_result_decoded": [], "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}
{"id": "simple_337", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_337", "question": [[{"role": "user", "content": "\u5728\u5fb7\u514b\u85a9\u65af\u5dde\u7684\u4e00\u5834\u970d\u723e\u5fb7\u59c6\u904a\u6232\u4e2d\uff0c\u4ed6\u8207\u7403\u54e1\u4e9e\u6b77\u514b\u65af\uff0c\u5c71\u59c6\uff0c\u7f85\u4f2f\u7279\u548c\u53f2\u8482\u592b\u5728\u64b2\u514b\u904a\u6232\u4e2d\u7372\u52dd\uff0c\u7d66\u4e86\u4e9e\u6b77\u514b\u65af\u7684\u5361\u7247\uff1a"}]], "function": [{"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "[poker_game_winner(players=[\"\u4e9e\u6b77\u514b\u65af\", \"\u5c71\u59c6\", \"\u7f85\u4f2f\u7279\", \"\u53f2\u8482\u592b\"], cards={\"\u4e9e\u6b77\u514b\u65af\": [\"A\", \"K\", \"Q\", \"J\", \"10\"], \"\u5c71\u59c6\": [\"A\", \"K\", \"Q\", \"J\", \"10\"], \"\u7f85\u4f2f\u7279\": [\"A\", \"K\", \"Q\", \"J\", \"10\"], \"\u53f2\u8482\u592b\": [\"A\", \"K\", \"Q\", \"J\", \"10\"]})]", "model_result_decoded": [], "possible_answer": [{"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}]}
{"id": "simple_339", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_339", "question": [[{"role": "user", "content": "\u5728\u64b2\u514b\u4e2d\u7372\u5f97\u6eff\u623f\u5b50\u7684\u53ef\u80fd\u6027\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}]}, "model_result_raw": "[poker_probability.full_house(deck_size=52, hand_size=5)]", "model_result_decoded": [], "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}
{"id": "simple_340", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "\u78ba\u5b9a\u64b2\u514b\u904a\u6232\u4e2d\u7684\u7372\u52dd\u8005\uff0c\u7d04\u7ff0\u7684\u624b\u64c1\u67098\u2665\uff0c10\u2665\uff0cJ\u2665\uff0cQ\u2665\uff0cK\u2665\u548cMike\u7684\u624b\u67099\u2660\uff0cJ\u2660\uff0c10\u2660\uff0cQ\u2660\uff0cK\u2660\u3002"}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "[card_games.poker_determine_winner(player1=\"\u7d04\u7ff0\", hand1=[\"8\u2665\", \"10\u2665\", \"J\u2665\", \"Q\u2665\", \"K\u2665\"], player2=\"Mike\", hand2=[\"9\u2660\", \"J\u2660\", \"10\u2660\", \"Q\u2660\", \"K\u2660\"])]", "model_result_decoded": [], "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": "simple_341", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_341", "question": [[{"role": "user", "content": "\u6c92\u6709\u5c0f\u4e11\u5f9e\u7532\u677f\u4e0a\u756b\u5fc3\u81df\u5361\u7684\u6a5f\u7387\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "deck_of_cards.odds", "description": "Compute the probability of drawing a specific suit from a given deck of cards.", "parameters": {"type": "dict", "properties": {"suit": {"type": "string", "description": "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, "deck_type": {"type": "string", "description": "Type of deck, normal deck includes joker, and without_joker deck excludes joker.", "default": "normal"}}, "required": ["suit", "deck_type"]}}]}, "model_result_raw": "[deck_of_cards.odds(suit=\"hearts\", deck_type=\"without_joker\")]", "model_result_decoded": [], "possible_answer": [{"deck_of_cards.odds": {"suit": ["hearts"], "deck_type": ["without_joker", "normal"]}}]}
{"id": "simple_342", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_342", "question": [[{"role": "user", "content": "\u67e5\u627e2019\u5e74\u767c\u884c\u7684\u6240\u6709\u591a\u4eba\u904a\u6232\uff0c\u4e26\u7372\u5f97\u4e86\u201c\u6240\u6709\u4eba\u201d\u7684ESRB\u8a55\u7d1a"}]], "function": [{"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "dict", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}]}, "model_result_raw": "[game_list.get_games(release_year=2019, multiplayer=True, ESRB_rating=\"Everyone\")]", "model_result_decoded": [], "possible_answer": [{"game_list.get_games": {"release_year": [2019], "multiplayer": [true], "ESRB_rating": ["Everyone"]}}]}
{"id": "simple_343", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_343", "question": [[{"role": "user", "content": "\u7372\u53d6\u201c Zelda\u201d\u7684\u64ad\u653e\u5668\u7d71\u8a08\u4fe1\u606f\u5728\u7528\u6236\u201c SAM\u201d\u4e0a\u3002"}]], "function": [{"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "[game_stats.fetch_player_statistics(game=\"Zelda\", username=\"SAM\")]", "model_result_decoded": [], "possible_answer": [{"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch"]}}]}
{"id": "simple_344", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'game': 'Zelda \u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438'. Expected one of ['Legend of Zelda: Breath of the Wild']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_344", "question": [[{"role": "user", "content": "\u6b66\u5668\u201c Guardian Sword+\u201d\u904a\u6232\u4e2d\u7684\u201c Zelda\u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438\u201d\u7684\u529f\u7387\u8a55\u7d1a\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_game_item_stats", "description": "Retrieve the statistics of a specific item in a specific video game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game to retrieve information from."}, "item": {"type": "string", "description": "The name of the item in the game."}, "stat": {"type": "string", "description": "Specific statistic required."}}, "required": ["game", "item", "stat"]}}]}, "model_result_raw": [{"get_game_item_stats": {"game": "Zelda \u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438", "item": "Guardian Sword+", "stat": "power"}}], "model_result_decoded": [{"get_game_item_stats": {"game": "Zelda \u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438", "item": "Guardian Sword+", "stat": "power"}}], "possible_answer": [{"get_game_item_stats": {"game": ["Legend of Zelda: Breath of the Wild"], "item": ["Guardian Sword+"], "stat": ["Power", "power", "power rating"]}}]}
{"id": "simple_345", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_345", "question": [[{"role": "user", "content": "\u627e\u52301985\u5e74\u7684\u8001\u5f0f\u8d85\u7d1a\u99ac\u91cc\u5967\u5144\u5f1f\u904a\u6232\u7684\u50f9\u503c\u3002"}]], "function": [{"name": "game_valuation", "description": "Get the current market value of a vintage video game.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "release_year": {"type": "integer", "description": "The year the game was released."}, "condition": {"type": "string", "enum": ["New", "Like New", "Used", "Fair", "Poor"], "description": "The condition of the game. Default is 'Used'."}}, "required": ["game_name", "release_year"]}}]}, "model_result_raw": "[game_valuation(game_name=\"Super Mario Bros.\", release_year=1985)]", "model_result_decoded": [], "possible_answer": [{"game_valuation": {"game_name": ["Super Mario Bros."], "release_year": [1985], "condition": ["Like New", "New"]}}]}
{"id": "simple_346", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_346", "question": [[{"role": "user", "content": "\u5728\u6625\u5b63\uff0c\u5f9e\u904a\u6232\u201c\u52d5\u7269\u4ea4\u53c9\uff1a\u65b0\u8996\u91ce\u201d\u4e2d\u7372\u53d6\u6240\u6709\u53ef\u6536\u96c6\u7269\u54c1\u3002"}]], "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}]}, "model_result_raw": "[get_collectables_in_season(game_name=\"\u52d5\u7269\u4ea4\u53c9\uff1a\u65b0\u8996\u91ce\", season=\"\u6625\u5b63\", item_type=\"all\")]", "model_result_decoded": [], "possible_answer": [{"get_collectables_in_season": {"game_name": ["Animal Crossing: New Horizons"], "season": ["Spring"], "item_type": ["", "all"]}}]}
{"id": "simple_348", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter '_class': '\u6cd5\u5e2b'. Expected one of ['Mage']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_348", "question": [[{"role": "user", "content": "\u4f7f\u7528\u540d\u7a31\u70ba\u201c Starplayer\u201d\u548c\u5b57\u7b26\u985e\u201c\u6cd5\u5e2b\u201d\u70ba\u904a\u6232\u5275\u5efa\u4e00\u500b\u65b0\u7684\u73a9\u5bb6\u914d\u7f6e\u6587\u4ef6\uff0c\u5c07\u8d77\u59cb\u7d1a\u5225\u8a2d\u7f6e\u70ba5\u3002"}]], "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}]}, "model_result_raw": [{"create_player_profile": {"player_name": "Starplayer", "_class": "\u6cd5\u5e2b", "starting_level": 5}}], "model_result_decoded": [{"create_player_profile": {"player_name": "Starplayer", "_class": "\u6cd5\u5e2b", "starting_level": 5}}], "possible_answer": [{"create_player_profile": {"player_name": ["StarPlayer"], "_class": ["Mage"], "starting_level": [5]}}]}
{"id": "simple_349", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_349", "question": [[{"role": "user", "content": "\u5728\u5168\u7403PC\u4e0a\u627e\u5230\u4efb\u4f55\u73a9\u5bb6\u5728\u7dda\u904a\u6232\u4e2d\u4efb\u4f55\u73a9\u5bb6\u6240\u7372\u5f97\u7684\u6700\u9ad8\u5206\u6578\u3002"}]], "function": [{"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}]}, "model_result_raw": "[game_score.highest(game=\"Online Game\", platform=\"PC\", region=\"Global\")]", "model_result_decoded": [], "possible_answer": [{"game_score.highest": {"game": ["Overwatch"], "platform": ["PC"], "region": ["Global", ""]}}]}
{"id": "simple_350", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_350", "question": [[{"role": "user", "content": "\u57282022\u8cfd\u5b63\u7372\u5f97\u904a\u6232\u201c Valort\u201d\u7684\u5f97\u5206\u6700\u9ad8\u7684\u7403\u54e1\u3002"}]], "function": [{"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}}, "required": ["game", "season"]}}]}, "model_result_raw": "[get_highest_scoring_player(game=\"Valort\", season=\"2022\")]", "model_result_decoded": [], "possible_answer": [{"get_highest_scoring_player": {"game": ["Valorant"], "season": ["2022", "2022 season"]}}]}
{"id": "simple_352", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "\u5f9eGamespot\u7372\u53d6\u904a\u6232\u201c Zelda\u7684\u50b3\u5947\uff1a\u91ce\u5916\u547c\u5438\u201d\u7684\u5e73\u5747\u7528\u6236\u5f97\u5206\u3002"}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "[gamespot.getAverageUserScore(game_name=\"Zelda's Breath of the Wild\", platform=\"Nintendo Switch\")]", "model_result_decoded": [], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_354", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_354", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u500b\u4e0d\u523030\u5206\u9418\u7684\u7d20\u98df\u6e6f\u98df\u8b5c\u3002"}]], "function": [{"name": "get_vegan_recipe", "description": "Retrieve a vegan soup recipe based on the provided cooking time.", "parameters": {"type": "dict", "properties": {"dish_type": {"type": "string", "description": "The type of dish, e.g. soup, dessert, etc.", "enum": ["soup", "main dish", "dessert", "salad"]}, "cooking_time": {"type": "integer", "description": "The maximum cooking time for the recipe in minutes."}, "ingredient_preference": {"type": "array", "items": {"type": "string"}, "description": "Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided."}}, "required": ["dish_type", "cooking_time"]}}]}, "model_result_raw": "[get_vegan_recipe(dish_type=\"soup\", cooking_time=30)]", "model_result_decoded": [], "possible_answer": [{"get_vegan_recipe": {"dish_type": ["soup"], "cooking_time": [30], "ingredient_preference": [""]}}]}
{"id": "simple_355", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': '\u725b\u8089\u70e4\u5bec\u9eb5\u689d'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": [[{"role": "user", "content": "Foodnetwork.com\u7684\u725b\u8089\u70e4\u5bec\u9eb5\u689d\u98df\u8b5c\u4e2d\u6709\u591a\u5c11\u5361\u8def\u91cc\uff1f"}]], "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}]}, "model_result_raw": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "\u725b\u8089\u70e4\u5bec\u9eb5\u689d"}}], "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "\u725b\u8089\u70e4\u5bec\u9eb5\u689d"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}]}
{"id": "simple_357", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'dish_name': '\u7d20\u98df\u5de7\u514b\u529b\u86cb\u7cd5'. Expected one of ['chocolate cake', 'vegan chocolate cake']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_357", "question": [[{"role": "user", "content": "\u7372\u53d6\u7d20\u98df\u5de7\u514b\u529b\u86cb\u7cd5\u7684\u98df\u8b5c\uff0c\u5305\u62ec\u6e96\u5099\u6b65\u9a5f\u3002"}]], "function": [{"name": "get_recipe", "description": "Fetch the recipe for a specific dish along with preparation steps.", "parameters": {"type": "dict", "properties": {"dish_name": {"type": "string", "description": "Name of the dish whose recipe needs to be fetched."}, "diet_preference": {"type": "string", "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.", "default": "none"}}, "required": ["dish_name"]}}]}, "model_result_raw": [{"get_recipe": {"dish_name": "\u7d20\u98df\u5de7\u514b\u529b\u86cb\u7cd5", "diet_preference": "vegan"}}], "model_result_decoded": [{"get_recipe": {"dish_name": "\u7d20\u98df\u5de7\u514b\u529b\u86cb\u7cd5", "diet_preference": "vegan"}}], "possible_answer": [{"get_recipe": {"dish_name": ["chocolate cake", "vegan chocolate cake"], "diet_preference": ["vegan"]}}]}
{"id": "simple_358", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'dish'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "\u627e\u5230\u4e00\u500b\u7121\u9ea9\u8cea\u9905\u4e7e\u98df\u8b5c\uff0c\u9700\u8981\u4e0d\u523030\u5206\u9418\u624d\u80fd\u6e96\u5099\u3002"}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 30}}], "model_result_decoded": [{"recipe_search": {"diet": ["Gluten Free"], "time_limit": 30}}], "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": "simple_359", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'ingredients': ['\u5976\u916a']. Expected one of [['pasta', 'cheese']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "\u7d66\u6211\u4e00\u500b\u914d\u4ee5\u5169\u4efd\u5976\u916a\u7684\u7d20\u98df\u9eb5\u98df\u7684\u98df\u8b5c\u3002"}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["\u5976\u916a"], "servings": 2}}], "model_result_decoded": [{"recipe_search": {"dietary_restriction": "Vegetarian", "ingredients": ["\u5976\u916a"], "servings": 2}}], "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": "simple_360", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipeName': 'Carbonara'. Expected one of ['pasta carbonara']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "\u67e5\u627e\u9eb5\u98dfCarbonara\u7684\u98df\u8b5c\uff0c\u5176\u4e2d\u50c5\u5305\u542b\u5c11\u65bc500\u5361\u8def\u91cc\u7684\u5361\u8def\u91cc\u3002"}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": [{"find_recipe": {"recipeName": "Carbonara", "maxCalories": 500}}], "model_result_decoded": [{"find_recipe": {"recipeName": "Carbonara", "maxCalories": 500}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_361", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_361", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u5e02\u9644\u8fd1\u627e\u5230\u7121\u9ea9\u8cea\u9078\u64c7\u7684\u610f\u5927\u5229\u9910\u5ef3\u3002"}]], "function": [{"name": "restaurant_finder", "description": "Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "City where you are looking for the restaurant."}, "cuisine": {"type": "string", "description": "Type of cuisine you are interested in."}, "diet": {"type": "string", "description": "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."}}, "required": ["city", "cuisine"]}}]}, "model_result_raw": "[restaurant_finder(city=\"New York\", cuisine=\"Italian\", diet=\"Gluten-free\")]", "model_result_decoded": [], "possible_answer": [{"restaurant_finder": {"city": ["New York City", "New York City, NY", "NYC", "New York"], "cuisine": ["Italian"], "diet": ["Gluten-free"]}}]}
{"id": "simple_362", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_362", "question": [[{"role": "user", "content": "\u5728\u6771\u4eac4/5\u4ee5\u4e0a\u7684\u58fd\u53f8\u9910\u5ef3\u7684\u524d\u4e94\u5bb6\u58fd\u53f8\u9910\u5ef3\u662f\u4ec0\u9ebc\uff1f"}]], "function": [{"name": "get_best_sushi_places", "description": "Returns the best sushi places given the city, review_rate and top number.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city in which to look for the sushi places."}, "top": {"type": "integer", "description": "The number of top sushi places to be returned."}, "review_rate": {"type": "float", "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."}}, "required": ["city", "top"]}}]}, "model_result_raw": "[get_best_sushi_places(city=\"\u6771\u4eac\", top=5, review_rate=4.0)]", "model_result_decoded": [], "possible_answer": [{"get_best_sushi_places": {"city": ["Tokyo"], "top": [5], "review_rate": [4.0]}}]}
{"id": "simple_363", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Optional parameter 'amenities' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "\u5728\u6ce2\u58eb\u9813\u627e\u5230\u6700\u63a5\u8fd1\u7684\u58fd\u53f8\u9910\u5ef3\u3002"}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": "Sushi"}}], "model_result_decoded": [{"restaurant_search.find_closest": {"location": "Boston, MA", "cuisine": "Sushi"}}], "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": "simple_364", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': '\u5e03\u9b6f\u514b\u6797'. Expected one of ['Brooklyn', 'Brooklyn, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_364", "question": [[{"role": "user", "content": "\u6211\u53ef\u4ee5\u5728\u5e03\u9b6f\u514b\u6797\u9644\u8fd1\u627e\u5230\u4e00\u5bb6\u5e36\u6709\u7121\u9ea9\u8cea\u9078\u64c7\u7684\u610f\u5927\u5229\u9910\u5ef3\u55ce\uff1f"}]], "function": [{"name": "find_restaurant", "description": "Locate nearby restaurants based on user defined criteria", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where user wants to search for a restaurant."}, "type": {"type": "string", "description": "The type of the cuisine/restaurant."}, "diet_option": {"type": "string", "description": "Special dietary preferences."}}, "required": ["location", "type", "diet_option"]}}]}, "model_result_raw": [{"find_restaurant": {"location": "\u5e03\u9b6f\u514b\u6797", "type": "\u610f\u5927\u5229", "diet_option": "\u7121\u9ea9\u8cea"}}], "model_result_decoded": [{"find_restaurant": {"location": "\u5e03\u9b6f\u514b\u6797", "type": "\u610f\u5927\u5229", "diet_option": "\u7121\u9ea9\u8cea"}}], "possible_answer": [{"find_restaurant": {"location": ["Brooklyn", "Brooklyn, NY"], "type": ["Italian"], "diet_option": ["Gluten-free"]}}]}
{"id": "simple_368", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_368", "question": [[{"role": "user", "content": "\u716e1.5\u516c\u65a4\u7684\u70e4\u96de\u9700\u8981\u591a\u5c11\u6642\u9593\uff1f"}]], "function": [{"name": "calculate_cooking_time", "description": "Calculate the cooking time for a roast chicken.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "float", "description": "The weight of the chicken in kilograms."}, "cooking_method": {"type": "string", "description": "The method of cooking, defaults to 'roast'."}, "temp_celsius": {"type": "integer", "description": "The cooking temperature in degrees celsius, defaults to 180."}}, "required": ["weight_kg"]}}]}, "model_result_raw": "[calculate_cooking_time(weight_kg=1.5)]", "model_result_decoded": [], "possible_answer": [{"calculate_cooking_time": {"weight_kg": [1.5], "cooking_method": ["", "roast"], "temp_celsius": ["", 180]}}]}
{"id": "simple_369", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "\u5728\u4f11\u65af\u6566\uff0c\u5728\u6211\u9644\u8fd1\u627e\u5230\u6709\u6a5f\u6c34\u679c\u548c\u852c\u83dc\u7684\u96dc\u8ca8\u5e97\u3002"}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "[grocery_store.find_nearby(location=\"Houston, TX\", categories=[\"Organic\", \"Fruits\", \"Vegetables\"])]", "model_result_decoded": [], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['\u6a44\u6b16\u6cb9', '\u7c73\u98ef']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "\u5f9e\u5e15\u6d1b\u963f\u723e\u6258\uff08Palo Alto\uff09\u7684Safeway\u8a02\u8cfc\u4e09\u74f6\u6a44\u6b16\u6cb9\u548c\u4e00\u888b\u4e94\u78c5\u7684\u7c73\u98ef\u3002"}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["\u6a44\u6b16\u6cb9", "\u7c73\u98ef"], "quantity": [3, 5]}}], "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["\u6a44\u6b16\u6cb9", "\u7c73\u98ef"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_371", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_371", "question": [[{"role": "user", "content": "\u5728\u6d1b\u6749\u78ef\u7684\u5168\u98df\u7269\u4e2d\u6aa2\u67e5\u897f\u7d05\u67ff\u548c\u751f\u83dc\u7684\u50f9\u683c\u3002"}]], "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}]}, "model_result_raw": "[whole_foods.check_price(location=\"Los Angeles\", items=[\"tomatoes\", \"lettuce\"])]", "model_result_decoded": [], "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}]}
{"id": "simple_372", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "\u6839\u64daWhole Foods\u5546\u5e97\u7684\u8a55\u7d1a\uff0c\u627e\u5230\u524d\u4e94\u540d\u6709\u6a5f\u9999\u8549\u54c1\u724c\u3002"}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "[whole_foods.find_top_brands(product=\"banana\", organic=true, number=5)]", "model_result_decoded": [], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": "simple_373", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "\u6211\u60f3\u5f9e\u8056\u4f55\u585e\u9644\u8fd1\u7684\u6c83\u723e\u746a\u8cfc\u8cb7\u860b\u679c\uff0c\u5927\u7c73\u548c12\u5305\u74f6\u88dd\u6c34\u3002\u5411\u6211\u5c55\u793a\u7522\u54c1\u4fe1\u606f\u548c\u5eab\u5b58\u53ef\u7528\u6027\u3002"}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "[walmart.purchase(loc=\"\u8056\u4f55\u585e\", product_list=[\"\u860b\u679c\", \"\u5927\u7c73\", \"\u74f6\u88dd\u6c34\"], pack_size=[1, 1, 12])]", "model_result_decoded": [], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'store': '\u6c83\u723e\u746a'. Expected one of ['Walmart']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "\u6aa2\u67e5\u6c83\u723e\u746a\u7684\u9c77\u68a8\u4e2d\u7684\u86cb\u767d\u8cea\uff0c\u5361\u8def\u91cc\u548c\u78b3\u6c34\u5316\u5408\u7269\u7684\u91cf\u3002"}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": [{"grocery_info.nutritional_info": {"store": "\u6c83\u723e\u746a", "food": "\u9c77\u68a8", "information": ["Protein", "Calories", "Carbohydrates"]}}], "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "\u6c83\u723e\u746a", "food": "\u9c77\u68a8", "information": ["Protein", "Calories", "Carbohydrates"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "\u6aa2\u67e5\u6c83\u723e\u746a\u7684\u4e09\u500b\u5357\u74dc\u548c\u4e8c\u5341\u500b\u96de\u86cb\u7684\u7e3d\u50f9\u3002"}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[walmart.check_price(items=[\"\u5357\u74dc\", \"\u96de\u86cb\"], quantities=[3, 20])]", "model_result_decoded": [], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_376", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_376", "question": [[{"role": "user", "content": "\u76ee\u524d\u4ee524\u5c0f\u6642\u683c\u5f0f\u5728\u82f1\u570b\u502b\u6566\u5e7e\u9ede\u9418\uff1f"}]], "function": [{"name": "time_zone_converter", "description": "Retrieve the current time of a specific city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city you want to know the current time for."}, "country": {"type": "string", "description": "The country where the city is located."}, "display_format": {"type": "string", "description": "The time display format: '12h' or '24h'. Default is '24h'."}}, "required": ["city", "country"]}}]}, "model_result_raw": "[time_zone_converter(city=\"London\", country=\"UK\", display_format=\"24h\")]", "model_result_decoded": [], "possible_answer": [{"time_zone_converter": {"city": ["London"], "country": ["UK", "United Kingdom"], "display_format": ["24h", "24 hour"]}}]}
{"id": "simple_377", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_377", "question": [[{"role": "user", "content": "\u7576\u524d\u5728\u6fb3\u5927\u5229\u4e9e\u6089\u5c3c\u7684\u6642\u9593\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_current_time", "description": "Retrieve the current time for a specified city and country.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city for which the current time is to be retrieved."}, "country": {"type": "string", "description": "The country where the city is located."}, "format": {"type": "string", "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, "required": ["city", "country"]}}]}, "model_result_raw": "[get_current_time(city=\"Sydney\", country=\"Australia\")]", "model_result_decoded": [], "possible_answer": [{"get_current_time": {"city": ["Sydney"], "country": ["Australia"], "format": ["", "HH:MM:SS"]}}]}
{"id": "simple_379", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_379", "question": [[{"role": "user", "content": "\u76ee\u524d\u5728\u6fb3\u5927\u5229\u4e9e\u6089\u5c3c\u7684\u6642\u9593\u662f\u5e7e\u9ede\uff1f"}]], "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default "}}, "required": ["location", "country"]}}]}, "model_result_raw": "[get_current_time(location=\"Sydney\", country=\"Australia\")]", "model_result_decoded": [], "possible_answer": [{"get_current_time": {"location": ["Sydney"], "country": ["Australia", "Australia/Sydney"], "timezone": [""]}}]}
{"id": "simple_380", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "\u5f9e2023\u5e743\u670810\u65e5\u958b\u59cb\uff0c\u5728\u7d10\u7d04\u66fc\u54c8\u9813\u9644\u8fd1\u7684\u4e00\u5bb6\u5bf5\u7269\u53cb\u597d\u9152\u5e97\u9810\u8a02\u4e00\u9593\u55ae\u4eba\u9593\u3002"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "[hotel_booking(location=\"New York\", room_type=\"single\", duration=3, start_date=\"2023-03-10\", preferences=[\"pet_friendly\"])]", "model_result_decoded": [], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_381", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_381", "question": [[{"role": "user", "content": "\u5f9e4\u67084\u65e5\u81f34\u67088\u65e5\uff0c\u6aa2\u67e5\u5df4\u9ece\u7684\u5169\u540d\u6210\u5e74\u4eba\u662f\u5426\u6709\u5e0c\u723e\u9813\u9152\u5e97\uff1f"}]], "function": [{"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}]}, "model_result_raw": "[hilton_hotel.check_availability(location=\"Paris\", check_in_date=\"2024-04-04\", check_out_date=\"2024-04-08\", no_of_adults=2)]", "model_result_decoded": [], "possible_answer": [{"hilton_hotel.check_availability": {"location": ["Paris"], "check_in_date": ["2023-04-04"], "check_out_date": ["2023-04-08"], "no_of_adults": [2], "hotel_chain": ["Hilton", ""]}}]}
{"id": "simple_382", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hotel_name': '\u5e0c\u723e\u9813\u9152\u5e97'. Expected one of ['Hilton Hotel', 'Hilton']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "\u5f9e2022\u5e7412\u670810\u65e5\u958b\u59cb\uff0c\u5728\u829d\u52a0\u54e5\u7684\u5e0c\u723e\u9813\u9152\u5e97\u9810\u8a02\u4e00\u9593\u55ae\u4eba\u9593\u5169\u665a\u3002"}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": [{"book_hotel": {"hotel_name": "\u5e0c\u723e\u9813\u9152\u5e97", "location": "\u829d\u52a0\u54e5", "room_type": "\u55ae\u9593", "start_date": "2022-12-10", "nights": 2}}], "model_result_decoded": [{"book_hotel": {"hotel_name": "\u5e0c\u723e\u9813\u9152\u5e97", "location": "\u829d\u52a0\u54e5", "room_type": "\u55ae\u9593", "start_date": "2022-12-10", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": "simple_383", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_383", "question": [[{"role": "user", "content": "\u6211\u60f3\u5728\u5ee3\u5834\u9152\u5e97\u9810\u8a02\u4e00\u500b\u55ae\u4eba\u9593\u5169\u665a\u3002"}]], "function": [{"name": "book_room", "description": "Book a room in a specified hotel.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "num_nights": {"type": "integer", "description": "The number of nights to book the room for."}}, "required": ["hotel_name", "room_type", "num_nights"]}}]}, "model_result_raw": "[book_room(hotel_name=\"\u5ee3\u5834\u9152\u5e97\", room_type=\"\u55ae\u4eba\u9593\", num_nights=2)]", "model_result_decoded": [], "possible_answer": [{"book_room": {"hotel_name": ["The Plaza"], "room_type": ["Single", "single"], "num_nights": [2]}}]}
{"id": "simple_384", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_384", "question": [[{"role": "user", "content": "\u5f9e2022\u5e747\u670810\u65e5\u81f32022\u5e747\u670820\u65e5\uff0c\u70ba\u6cd5\u570b\u5df4\u9ece\u7684\u5169\u500b\u6210\u5e74\u4eba\u548c\u4e00\u500b\u5b69\u5b50\u9810\u8a02\u9152\u5e97\u623f\u9593\u3002"}]], "function": [{"name": "hotel_booking.book", "description": "Book a hotel room given the city, date, and the number of adults and children.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city where the hotel is located."}, "from_date": {"type": "string", "description": "The start date of the booking. The format is MM-DD-YYYY."}, "to_date": {"type": "string", "description": "The end date of the booking. The format is MM-DD-YYYY."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}, "room_type": {"type": "string", "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", "default": "Standard"}}, "required": ["city", "from_date", "to_date", "adults", "children"]}}]}, "model_result_raw": "[hotel_booking.book(city=\"\u6cd5\u570b\u5df4\u9ece\", from_date=\"2022-07-10\", to_date=\"2022-07-20\", adults=2, children=1)]", "model_result_decoded": [], "possible_answer": [{"hotel_booking.book": {"city": ["Paris", "Paris, France"], "from_date": ["07-10-2022", "2022-07-10", "10/07/2022", "Jul.10,2022"], "to_date": ["07-20-2022", "2022-07-20", "20/07/2022", "Jul.20,2022"], "adults": [2], "children": [1], "room_type": ["Standard", ""]}}]}
{"id": "simple_385", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_385", "question": [[{"role": "user", "content": "\u5f9e2023\u5e7410\u670815\u65e5\u8d77\uff0c\u5728\u6d1b\u6749\u78ef\u9810\u8a02\u4e00\u9593\u5e36\u7279\u5927\u865f\u5e8a\u7684\u9152\u5e97\u623f\u9593\uff0c\u5728\u6d1b\u6749\u78ef\u8209\u884c\u4e862\u665a\u3002"}]], "function": [{"name": "hotel_bookings.book_room", "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"}, "room_type": {"type": "string", "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."}, "check_in_date": {"type": "string", "description": "Check-in date for the hotel. Format - DD-MM-YYYY."}, "no_of_nights": {"type": "integer", "description": "Number of nights for the stay."}, "no_of_rooms": {"type": "integer", "description": "Number of rooms to book. Default is 1.", "default": 1}}, "required": ["location", "room_type", "check_in_date", "no_of_nights"]}}]}, "model_result_raw": "[hotel_bookings.book_room(location=\"Los Angeles, CA\", room_type=\"king size\", check_in_date=\"15-10-2023\", no_of_nights=2)]", "model_result_decoded": [], "possible_answer": [{"hotel_bookings.book_room": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "room_type": ["King Size", "king size"], "check_in_date": ["15-10-2023", "15th October", "2023-10-15", "10/15/2023", "Oct.15,2023"], "no_of_nights": [2], "no_of_rooms": ["", 1]}}]}
{"id": "simple_386", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_386", "question": [[{"role": "user", "content": "\u5f9e2022\u5e745\u670812\u65e5\u958b\u59cb\uff0c\u5728\u62c9\u65af\u7dad\u52a0\u65af\u9152\u5e97\u7684\u9152\u5e97\u9810\u8a02\u4e00\u9593\u8c6a\u83ef\u623f\u9593\uff0c\u4eab\u67093\u5929\u7684\u57ce\u5e02\u666f\u89c0\u3002"}]], "function": [{"name": "book_hotel", "description": "Book a room in a specific hotel with particular preferences", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The location of the hotel."}, "room_type": {"type": "string", "description": "The type of room preferred."}, "start_date": {"type": "string", "description": "The starting date of the stay in format MM-DD-YYYY."}, "stay_duration": {"type": "integer", "description": "The duration of the stay in days."}, "view": {"type": "string", "description": "The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.", "default": "No preference"}}, "required": ["hotel_name", "location", "room_type", "start_date", "stay_duration"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Las Vegas Hotel\", location=\"Las Vegas\", room_type=\"Luxury\", start_date=\"05-12-2022\", stay_duration=3, view=\"City View\")]", "model_result_decoded": [], "possible_answer": [{"book_hotel": {"hotel_name": ["Hotel Paradise"], "location": ["Las Vegas", "LV"], "room_type": ["luxury", "Luxury"], "start_date": ["05-12-2022", "2022-05-12", "12/05/2022", "May.12,2022", "May 12, 2022"], "stay_duration": [3], "view": ["city view", "city"]}}]}
{"id": "simple_387", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "\u5f9e2022\u5e746\u67081\u65e5\u958b\u59cb\u5728\u7d10\u7d04\u5ee3\u5834\u9152\u5e97\u9810\u8a02\u9152\u5e97\u623f\u95933\u665a"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"New York Plaza Hotel\", location=\"New York, NY\", start_date=\"2022-06-01\", end_date=\"2022-06-04\", rooms=1)]", "model_result_decoded": [], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": "simple_391", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_391", "question": [[{"role": "user", "content": "\u7372\u53d6\u5f9e\u82f1\u938a\u5230\u65e5\u5143\u7684\u532f\u7387\uff0c\u5176\u4e2d\u5305\u62ec0.02\u3002"}]], "function": [{"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}]}, "model_result_raw": "[get_exchange_rate_with_fee(base_currency=\"GBP\", target_currency=\"JPY\", fee=0.02)]", "model_result_decoded": [], "possible_answer": [{"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}]}
{"id": "simple_392", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_392", "question": [[{"role": "user", "content": "\u8b93\u6211\u7372\u5f97\u5f9e\u82f1\u938a\u5230\u65e5\u5143\u65e5\u5143\u7684\u6700\u65b0\u532f\u7387\u3002"}]], "function": [{"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "dict", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "float", "description": "The amount to be converted. If omitted, default to exchange rate of 1 unit source currency"}}, "required": ["source_currency", "target_currency"]}}]}, "model_result_raw": "[latest_exchange_rate(source_currency=\"GBP\", target_currency=\"JPY\")]", "model_result_decoded": [], "possible_answer": [{"latest_exchange_rate": {"source_currency": ["GBP", "British Pounds", "Pounds Sterling"], "target_currency": ["JPY", "Japanese Yen"], "amount": ["", 1.0]}}]}
{"id": "simple_393", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "20000\u5e74\u65e5\u5143\u5728\u7f8e\u570b\u7f8e\u5143\u591a\u5c11\u9322\uff1f"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "[convert_currency(base_currency=\"JPY\", target_currency=\"USD\", amount=20000)]", "model_result_decoded": [], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}
{"id": "simple_394", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_location': '\u57c3\u83f2\u723e\u9435\u5854'. Expected one of ['Eiffel Tower']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_394", "question": [[{"role": "user", "content": "\u5f9e\u57c3\u83f2\u723e\u9435\u5854\u5230\u76e7\u6d6e\u5bae\u535a\u7269\u9928"}]], "function": [{"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": [{"maps.get_distance_duration": {"start_location": "\u57c3\u83f2\u723e\u9435\u5854", "end_location": "\u76e7\u6d6e\u5bae\u535a\u7269\u9928"}}], "model_result_decoded": [{"maps.get_distance_duration": {"start_location": "\u57c3\u83f2\u723e\u9435\u5854", "end_location": "\u76e7\u6d6e\u5bae\u535a\u7269\u9928"}}], "possible_answer": [{"maps.get_distance_duration": {"start_location": ["Eiffel Tower"], "end_location": ["Louvre Museum"], "traffic": ["", false]}}]}
{"id": "simple_395", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_395", "question": [[{"role": "user", "content": "\u5728\u7d10\u7d04\u4e2d\u592e\u516c\u57122\u82f1\u91cc\u5167\u627e\u5230\u6700\u8fd1\u7684\u505c\u8eca\u5834\u3002"}]], "function": [{"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}]}, "model_result_raw": "[parking_lot.find_nearest(location=\"Central Park\", radius=2)]", "model_result_decoded": [], "possible_answer": [{"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}]}
{"id": "simple_397", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_397", "question": [[{"role": "user", "content": "\u627e\u5230\u7d10\u7d04\u548c\u6ce2\u58eb\u9813\u4e4b\u9593\u7684\u8ddd\u96e2\uff0c\u8003\u616e\u5230\u5730\u5f62\u3002"}]], "function": [{"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "[distance_calculator.calculate(origin=\"\u7d10\u7d04\", destination=\"\u6ce2\u58eb\u9813\", consider_terrain=true)]", "model_result_decoded": [], "possible_answer": [{"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "New York, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}]}
{"id": "simple_398", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_398", "question": [[{"role": "user", "content": "\u9031\u516d\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\u7684\u958b\u653e\u6642\u9593\u662f\u591a\u5c11\uff1f"}]], "function": [{"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "required": ["museum_name", "day"]}}]}, "model_result_raw": "[get_museum_hours(museum_name=\"\u9031\u516d\u5927\u90fd\u6703\u85dd\u8853\u535a\u7269\u9928\", day=\"Saturday\")]", "model_result_decoded": [], "possible_answer": [{"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met"], "day": ["Saturday"]}}]}
{"id": "simple_399", "model_name": "mistralai_Ministral-8B-Instruct-2410", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_399", "question": [[{"role": "user", "content": "\u627e\u5230\u6211\u662f\u7d10\u7d04\u5e02\u6700\u597d\u7684\u610f\u5927\u5229\u9910\u5ef3\uff0c\u5e73\u5747\u5ba2\u6236\u8a55\u7d1a\u8d85\u904e4\uff0c\u4e26\u63a5\u53d7\u4fe1\u7528\u5361\u3002"}]], "function": [{"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}]}, "model_result_raw": "[restaurant_search(location=\"New York City, NY\", cuisine=\"Italian\", rating=4, accepts_credit_cards=True)]", "model_result_decoded": [], "possible_answer": [{"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}]}